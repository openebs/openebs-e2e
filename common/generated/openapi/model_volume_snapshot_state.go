/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VolumeSnapshotState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSnapshotState{}

// VolumeSnapshotState Volume Snapshot State information.
type VolumeSnapshotState struct {
	Uuid string `json:"uuid"`
	// Runtime size in bytes of the snapshot. Equal to the volume allocation at the time of the snapshot creation. It may grow larger if any of its predecessors are deleted.
	AllocatedSize int64 `json:"allocated_size"`
	SourceVolume string `json:"source_volume"`
	// Timestamp when snapshot is taken on the storage system.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Indicates if a snapshot is ready to be used as a new volume source.
	ReadyAsSource bool `json:"ready_as_source"`
	// List of individual ReplicaSnapshotStates.
	ReplicaSnapshots []ReplicaSnapshotState `json:"replica_snapshots"`
}

type _VolumeSnapshotState VolumeSnapshotState

// NewVolumeSnapshotState instantiates a new VolumeSnapshotState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSnapshotState(uuid string, allocatedSize int64, sourceVolume string, readyAsSource bool, replicaSnapshots []ReplicaSnapshotState) *VolumeSnapshotState {
	this := VolumeSnapshotState{}
	this.Uuid = uuid
	this.AllocatedSize = allocatedSize
	this.SourceVolume = sourceVolume
	this.ReadyAsSource = readyAsSource
	this.ReplicaSnapshots = replicaSnapshots
	return &this
}

// NewVolumeSnapshotStateWithDefaults instantiates a new VolumeSnapshotState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSnapshotStateWithDefaults() *VolumeSnapshotState {
	this := VolumeSnapshotState{}
	var readyAsSource bool = false
	this.ReadyAsSource = readyAsSource
	return &this
}

// GetUuid returns the Uuid field value
func (o *VolumeSnapshotState) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotState) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *VolumeSnapshotState) SetUuid(v string) {
	o.Uuid = v
}

// GetAllocatedSize returns the AllocatedSize field value
func (o *VolumeSnapshotState) GetAllocatedSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedSize
}

// GetAllocatedSizeOk returns a tuple with the AllocatedSize field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotState) GetAllocatedSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedSize, true
}

// SetAllocatedSize sets field value
func (o *VolumeSnapshotState) SetAllocatedSize(v int64) {
	o.AllocatedSize = v
}

// GetSourceVolume returns the SourceVolume field value
func (o *VolumeSnapshotState) GetSourceVolume() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceVolume
}

// GetSourceVolumeOk returns a tuple with the SourceVolume field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotState) GetSourceVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceVolume, true
}

// SetSourceVolume sets field value
func (o *VolumeSnapshotState) SetSourceVolume(v string) {
	o.SourceVolume = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *VolumeSnapshotState) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotState) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *VolumeSnapshotState) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *VolumeSnapshotState) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetReadyAsSource returns the ReadyAsSource field value
func (o *VolumeSnapshotState) GetReadyAsSource() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadyAsSource
}

// GetReadyAsSourceOk returns a tuple with the ReadyAsSource field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotState) GetReadyAsSourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadyAsSource, true
}

// SetReadyAsSource sets field value
func (o *VolumeSnapshotState) SetReadyAsSource(v bool) {
	o.ReadyAsSource = v
}

// GetReplicaSnapshots returns the ReplicaSnapshots field value
func (o *VolumeSnapshotState) GetReplicaSnapshots() []ReplicaSnapshotState {
	if o == nil {
		var ret []ReplicaSnapshotState
		return ret
	}

	return o.ReplicaSnapshots
}

// GetReplicaSnapshotsOk returns a tuple with the ReplicaSnapshots field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotState) GetReplicaSnapshotsOk() ([]ReplicaSnapshotState, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplicaSnapshots, true
}

// SetReplicaSnapshots sets field value
func (o *VolumeSnapshotState) SetReplicaSnapshots(v []ReplicaSnapshotState) {
	o.ReplicaSnapshots = v
}

func (o VolumeSnapshotState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSnapshotState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["allocated_size"] = o.AllocatedSize
	toSerialize["source_volume"] = o.SourceVolume
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["ready_as_source"] = o.ReadyAsSource
	toSerialize["replica_snapshots"] = o.ReplicaSnapshots
	return toSerialize, nil
}

func (o *VolumeSnapshotState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"allocated_size",
		"source_volume",
		"ready_as_source",
		"replica_snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSnapshotState := _VolumeSnapshotState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSnapshotState)

	if err != nil {
		return err
	}

	*o = VolumeSnapshotState(varVolumeSnapshotState)

	return err
}

type NullableVolumeSnapshotState struct {
	value *VolumeSnapshotState
	isSet bool
}

func (v NullableVolumeSnapshotState) Get() *VolumeSnapshotState {
	return v.value
}

func (v *NullableVolumeSnapshotState) Set(val *VolumeSnapshotState) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSnapshotState) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSnapshotState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSnapshotState(val *VolumeSnapshotState) *NullableVolumeSnapshotState {
	return &NullableVolumeSnapshotState{value: val, isSet: true}
}

func (v NullableVolumeSnapshotState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSnapshotState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


