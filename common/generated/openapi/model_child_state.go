/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChildState State of a Nexus Child
type ChildState string

// List of ChildState
const (
	CHILDSTATE_UNKNOWN  ChildState = "Unknown"
	CHILDSTATE_ONLINE   ChildState = "Online"
	CHILDSTATE_DEGRADED ChildState = "Degraded"
	CHILDSTATE_FAULTED  ChildState = "Faulted"
)

// All allowed values of ChildState enum
var AllowedChildStateEnumValues = []ChildState{
	"Unknown",
	"Online",
	"Degraded",
	"Faulted",
}

func (v *ChildState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChildState(value)
	for _, existing := range AllowedChildStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChildState", value)
}

// NewChildStateFromValue returns a pointer to a valid ChildState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChildStateFromValue(v string) (*ChildState, error) {
	ev := ChildState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChildState: valid values are %v", v, AllowedChildStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChildState) IsValid() bool {
	for _, existing := range AllowedChildStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChildState value
func (v ChildState) Ptr() *ChildState {
	return &v
}

type NullableChildState struct {
	value *ChildState
	isSet bool
}

func (v NullableChildState) Get() *ChildState {
	return v.value
}

func (v *NullableChildState) Set(val *ChildState) {
	v.value = val
	v.isSet = true
}

func (v NullableChildState) IsSet() bool {
	return v.isSet
}

func (v *NullableChildState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildState(val *ChildState) *NullableChildState {
	return &NullableChildState{value: val, isSet: true}
}

func (v NullableChildState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

