/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VolumeShareProtocol Volume Share Protocol
type VolumeShareProtocol string

// List of VolumeShareProtocol
const (
	NVMF VolumeShareProtocol = "nvmf"
	ISCSI VolumeShareProtocol = "iscsi"
)

// All allowed values of VolumeShareProtocol enum
var AllowedVolumeShareProtocolEnumValues = []VolumeShareProtocol{
	"nvmf",
	"iscsi",
}

func (v *VolumeShareProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeShareProtocol(value)
	for _, existing := range AllowedVolumeShareProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeShareProtocol", value)
}

// NewVolumeShareProtocolFromValue returns a pointer to a valid VolumeShareProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeShareProtocolFromValue(v string) (*VolumeShareProtocol, error) {
	ev := VolumeShareProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeShareProtocol: valid values are %v", v, AllowedVolumeShareProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeShareProtocol) IsValid() bool {
	for _, existing := range AllowedVolumeShareProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeShareProtocol value
func (v VolumeShareProtocol) Ptr() *VolumeShareProtocol {
	return &v
}

type NullableVolumeShareProtocol struct {
	value *VolumeShareProtocol
	isSet bool
}

func (v NullableVolumeShareProtocol) Get() *VolumeShareProtocol {
	return v.value
}

func (v *NullableVolumeShareProtocol) Set(val *VolumeShareProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeShareProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeShareProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeShareProtocol(val *VolumeShareProtocol) *NullableVolumeShareProtocol {
	return &NullableVolumeShareProtocol{value: val, isSet: true}
}

func (v NullableVolumeShareProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeShareProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

