/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSnapshot{}

// VolumeSnapshot Volume Snapshot Information.
type VolumeSnapshot struct {
	Definition VolumeSnapshotDefinition `json:"definition"`
	State VolumeSnapshotState `json:"state"`
}

type _VolumeSnapshot VolumeSnapshot

// NewVolumeSnapshot instantiates a new VolumeSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSnapshot(definition VolumeSnapshotDefinition, state VolumeSnapshotState) *VolumeSnapshot {
	this := VolumeSnapshot{}
	this.Definition = definition
	this.State = state
	return &this
}

// NewVolumeSnapshotWithDefaults instantiates a new VolumeSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSnapshotWithDefaults() *VolumeSnapshot {
	this := VolumeSnapshot{}
	return &this
}

// GetDefinition returns the Definition field value
func (o *VolumeSnapshot) GetDefinition() VolumeSnapshotDefinition {
	if o == nil {
		var ret VolumeSnapshotDefinition
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshot) GetDefinitionOk() (*VolumeSnapshotDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Definition, true
}

// SetDefinition sets field value
func (o *VolumeSnapshot) SetDefinition(v VolumeSnapshotDefinition) {
	o.Definition = v
}

// GetState returns the State field value
func (o *VolumeSnapshot) GetState() VolumeSnapshotState {
	if o == nil {
		var ret VolumeSnapshotState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshot) GetStateOk() (*VolumeSnapshotState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VolumeSnapshot) SetState(v VolumeSnapshotState) {
	o.State = v
}

func (o VolumeSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["definition"] = o.Definition
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *VolumeSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"definition",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSnapshot := _VolumeSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSnapshot)

	if err != nil {
		return err
	}

	*o = VolumeSnapshot(varVolumeSnapshot)

	return err
}

type NullableVolumeSnapshot struct {
	value *VolumeSnapshot
	isSet bool
}

func (v NullableVolumeSnapshot) Get() *VolumeSnapshot {
	return v.value
}

func (v *NullableVolumeSnapshot) Set(val *VolumeSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSnapshot(val *VolumeSnapshot) *NullableVolumeSnapshot {
	return &NullableVolumeSnapshot{value: val, isSet: true}
}

func (v NullableVolumeSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


