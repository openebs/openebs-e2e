/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDevice{}

// BlockDevice Block device information
type BlockDevice struct {
	// identifies if device is available for use (ie. is not \"currently\" in  use)
	Available bool `json:"available"`
	// the type of bus through which the device is connected to the system
	ConnectionType string `json:"connection_type"`
	// list of udev generated symlinks by which device may be identified
	Devlinks []string `json:"devlinks"`
	// major device number
	Devmajor int32 `json:"devmajor"`
	// minor device number
	Devminor int32 `json:"devminor"`
	// entry in /dev associated with device
	Devname string `json:"devname"`
	// official device path
	Devpath string `json:"devpath"`
	// currently \"disk\" or \"partition\"
	Devtype string `json:"devtype"`
	Filesystem *BlockDeviceFilesystem `json:"filesystem,omitempty"`
	// indicates whether the device is rotational or non-rotational
	IsRotational *bool `json:"is_rotational,omitempty"`
	// device model - useful for identifying devices
	Model string `json:"model"`
	Partition *BlockDevicePartition `json:"partition,omitempty"`
	// size of device in (512 byte) blocks
	Size int64 `json:"size"`
}

type _BlockDevice BlockDevice

// NewBlockDevice instantiates a new BlockDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDevice(available bool, connectionType string, devlinks []string, devmajor int32, devminor int32, devname string, devpath string, devtype string, model string, size int64) *BlockDevice {
	this := BlockDevice{}
	this.Available = available
	this.ConnectionType = connectionType
	this.Devlinks = devlinks
	this.Devmajor = devmajor
	this.Devminor = devminor
	this.Devname = devname
	this.Devpath = devpath
	this.Devtype = devtype
	this.Model = model
	this.Size = size
	return &this
}

// NewBlockDeviceWithDefaults instantiates a new BlockDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDeviceWithDefaults() *BlockDevice {
	this := BlockDevice{}
	return &this
}

// GetAvailable returns the Available field value
func (o *BlockDevice) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *BlockDevice) SetAvailable(v bool) {
	o.Available = v
}

// GetConnectionType returns the ConnectionType field value
func (o *BlockDevice) GetConnectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionType, true
}

// SetConnectionType sets field value
func (o *BlockDevice) SetConnectionType(v string) {
	o.ConnectionType = v
}

// GetDevlinks returns the Devlinks field value
func (o *BlockDevice) GetDevlinks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Devlinks
}

// GetDevlinksOk returns a tuple with the Devlinks field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetDevlinksOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Devlinks, true
}

// SetDevlinks sets field value
func (o *BlockDevice) SetDevlinks(v []string) {
	o.Devlinks = v
}

// GetDevmajor returns the Devmajor field value
func (o *BlockDevice) GetDevmajor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Devmajor
}

// GetDevmajorOk returns a tuple with the Devmajor field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetDevmajorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devmajor, true
}

// SetDevmajor sets field value
func (o *BlockDevice) SetDevmajor(v int32) {
	o.Devmajor = v
}

// GetDevminor returns the Devminor field value
func (o *BlockDevice) GetDevminor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Devminor
}

// GetDevminorOk returns a tuple with the Devminor field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetDevminorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devminor, true
}

// SetDevminor sets field value
func (o *BlockDevice) SetDevminor(v int32) {
	o.Devminor = v
}

// GetDevname returns the Devname field value
func (o *BlockDevice) GetDevname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Devname
}

// GetDevnameOk returns a tuple with the Devname field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetDevnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devname, true
}

// SetDevname sets field value
func (o *BlockDevice) SetDevname(v string) {
	o.Devname = v
}

// GetDevpath returns the Devpath field value
func (o *BlockDevice) GetDevpath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Devpath
}

// GetDevpathOk returns a tuple with the Devpath field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetDevpathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devpath, true
}

// SetDevpath sets field value
func (o *BlockDevice) SetDevpath(v string) {
	o.Devpath = v
}

// GetDevtype returns the Devtype field value
func (o *BlockDevice) GetDevtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Devtype
}

// GetDevtypeOk returns a tuple with the Devtype field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetDevtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devtype, true
}

// SetDevtype sets field value
func (o *BlockDevice) SetDevtype(v string) {
	o.Devtype = v
}

// GetFilesystem returns the Filesystem field value if set, zero value otherwise.
func (o *BlockDevice) GetFilesystem() BlockDeviceFilesystem {
	if o == nil || IsNil(o.Filesystem) {
		var ret BlockDeviceFilesystem
		return ret
	}
	return *o.Filesystem
}

// GetFilesystemOk returns a tuple with the Filesystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetFilesystemOk() (*BlockDeviceFilesystem, bool) {
	if o == nil || IsNil(o.Filesystem) {
		return nil, false
	}
	return o.Filesystem, true
}

// HasFilesystem returns a boolean if a field has been set.
func (o *BlockDevice) HasFilesystem() bool {
	if o != nil && !IsNil(o.Filesystem) {
		return true
	}

	return false
}

// SetFilesystem gets a reference to the given BlockDeviceFilesystem and assigns it to the Filesystem field.
func (o *BlockDevice) SetFilesystem(v BlockDeviceFilesystem) {
	o.Filesystem = &v
}

// GetIsRotational returns the IsRotational field value if set, zero value otherwise.
func (o *BlockDevice) GetIsRotational() bool {
	if o == nil || IsNil(o.IsRotational) {
		var ret bool
		return ret
	}
	return *o.IsRotational
}

// GetIsRotationalOk returns a tuple with the IsRotational field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetIsRotationalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRotational) {
		return nil, false
	}
	return o.IsRotational, true
}

// HasIsRotational returns a boolean if a field has been set.
func (o *BlockDevice) HasIsRotational() bool {
	if o != nil && !IsNil(o.IsRotational) {
		return true
	}

	return false
}

// SetIsRotational gets a reference to the given bool and assigns it to the IsRotational field.
func (o *BlockDevice) SetIsRotational(v bool) {
	o.IsRotational = &v
}

// GetModel returns the Model field value
func (o *BlockDevice) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *BlockDevice) SetModel(v string) {
	o.Model = v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *BlockDevice) GetPartition() BlockDevicePartition {
	if o == nil || IsNil(o.Partition) {
		var ret BlockDevicePartition
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetPartitionOk() (*BlockDevicePartition, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *BlockDevice) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given BlockDevicePartition and assigns it to the Partition field.
func (o *BlockDevice) SetPartition(v BlockDevicePartition) {
	o.Partition = &v
}

// GetSize returns the Size field value
func (o *BlockDevice) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *BlockDevice) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *BlockDevice) SetSize(v int64) {
	o.Size = v
}

func (o BlockDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	toSerialize["connection_type"] = o.ConnectionType
	toSerialize["devlinks"] = o.Devlinks
	toSerialize["devmajor"] = o.Devmajor
	toSerialize["devminor"] = o.Devminor
	toSerialize["devname"] = o.Devname
	toSerialize["devpath"] = o.Devpath
	toSerialize["devtype"] = o.Devtype
	if !IsNil(o.Filesystem) {
		toSerialize["filesystem"] = o.Filesystem
	}
	if !IsNil(o.IsRotational) {
		toSerialize["is_rotational"] = o.IsRotational
	}
	toSerialize["model"] = o.Model
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *BlockDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"connection_type",
		"devlinks",
		"devmajor",
		"devminor",
		"devname",
		"devpath",
		"devtype",
		"model",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockDevice := _BlockDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockDevice)

	if err != nil {
		return err
	}

	*o = BlockDevice(varBlockDevice)

	return err
}

type NullableBlockDevice struct {
	value *BlockDevice
	isSet bool
}

func (v NullableBlockDevice) Get() *BlockDevice {
	return v.value
}

func (v *NullableBlockDevice) Set(val *BlockDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDevice(val *BlockDevice) *NullableBlockDevice {
	return &NullableBlockDevice{value: val, isSet: true}
}

func (v NullableBlockDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


