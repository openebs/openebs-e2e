/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockDeviceFilesystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDeviceFilesystem{}

// BlockDeviceFilesystem filesystem information in case where a filesystem is present
type BlockDeviceFilesystem struct {
	// filesystem type: ext3, ntfs, ...
	Fstype string `json:"fstype"`
	// volume label
	Label string `json:"label"`
	// path where filesystem is currently mounted
	Mountpoint string `json:"mountpoint"`
	// UUID identifying the volume (filesystem)
	Uuid string `json:"uuid"`
}

type _BlockDeviceFilesystem BlockDeviceFilesystem

// NewBlockDeviceFilesystem instantiates a new BlockDeviceFilesystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDeviceFilesystem(fstype string, label string, mountpoint string, uuid string) *BlockDeviceFilesystem {
	this := BlockDeviceFilesystem{}
	this.Fstype = fstype
	this.Label = label
	this.Mountpoint = mountpoint
	this.Uuid = uuid
	return &this
}

// NewBlockDeviceFilesystemWithDefaults instantiates a new BlockDeviceFilesystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDeviceFilesystemWithDefaults() *BlockDeviceFilesystem {
	this := BlockDeviceFilesystem{}
	return &this
}

// GetFstype returns the Fstype field value
func (o *BlockDeviceFilesystem) GetFstype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fstype
}

// GetFstypeOk returns a tuple with the Fstype field value
// and a boolean to check if the value has been set.
func (o *BlockDeviceFilesystem) GetFstypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fstype, true
}

// SetFstype sets field value
func (o *BlockDeviceFilesystem) SetFstype(v string) {
	o.Fstype = v
}

// GetLabel returns the Label field value
func (o *BlockDeviceFilesystem) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *BlockDeviceFilesystem) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *BlockDeviceFilesystem) SetLabel(v string) {
	o.Label = v
}

// GetMountpoint returns the Mountpoint field value
func (o *BlockDeviceFilesystem) GetMountpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value
// and a boolean to check if the value has been set.
func (o *BlockDeviceFilesystem) GetMountpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mountpoint, true
}

// SetMountpoint sets field value
func (o *BlockDeviceFilesystem) SetMountpoint(v string) {
	o.Mountpoint = v
}

// GetUuid returns the Uuid field value
func (o *BlockDeviceFilesystem) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *BlockDeviceFilesystem) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *BlockDeviceFilesystem) SetUuid(v string) {
	o.Uuid = v
}

func (o BlockDeviceFilesystem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDeviceFilesystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fstype"] = o.Fstype
	toSerialize["label"] = o.Label
	toSerialize["mountpoint"] = o.Mountpoint
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *BlockDeviceFilesystem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fstype",
		"label",
		"mountpoint",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockDeviceFilesystem := _BlockDeviceFilesystem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockDeviceFilesystem)

	if err != nil {
		return err
	}

	*o = BlockDeviceFilesystem(varBlockDeviceFilesystem)

	return err
}

type NullableBlockDeviceFilesystem struct {
	value *BlockDeviceFilesystem
	isSet bool
}

func (v NullableBlockDeviceFilesystem) Get() *BlockDeviceFilesystem {
	return v.value
}

func (v *NullableBlockDeviceFilesystem) Set(val *BlockDeviceFilesystem) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDeviceFilesystem) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDeviceFilesystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDeviceFilesystem(val *BlockDeviceFilesystem) *NullableBlockDeviceFilesystem {
	return &NullableBlockDeviceFilesystem{value: val, isSet: true}
}

func (v NullableBlockDeviceFilesystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDeviceFilesystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


