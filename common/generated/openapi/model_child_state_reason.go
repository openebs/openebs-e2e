/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ChildStateReason Reason for the state of a Nexus Child
type ChildStateReason string

// List of ChildStateReason
const (
	OUT_OF_SPACE ChildStateReason = "OutOfSpace"
)

// All allowed values of ChildStateReason enum
var AllowedChildStateReasonEnumValues = []ChildStateReason{
	"OutOfSpace",
}

func (v *ChildStateReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChildStateReason(value)
	for _, existing := range AllowedChildStateReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChildStateReason", value)
}

// NewChildStateReasonFromValue returns a pointer to a valid ChildStateReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChildStateReasonFromValue(v string) (*ChildStateReason, error) {
	ev := ChildStateReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChildStateReason: valid values are %v", v, AllowedChildStateReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChildStateReason) IsValid() bool {
	for _, existing := range AllowedChildStateReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChildStateReason value
func (v ChildStateReason) Ptr() *ChildStateReason {
	return &v
}

type NullableChildStateReason struct {
	value *ChildStateReason
	isSet bool
}

func (v NullableChildStateReason) Get() *ChildStateReason {
	return v.value
}

func (v *NullableChildStateReason) Set(val *ChildStateReason) {
	v.value = val
	v.isSet = true
}

func (v NullableChildStateReason) IsSet() bool {
	return v.isSet
}

func (v *NullableChildStateReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildStateReason(val *ChildStateReason) *NullableChildStateReason {
	return &NullableChildStateReason{value: val, isSet: true}
}

func (v NullableChildStateReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildStateReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

