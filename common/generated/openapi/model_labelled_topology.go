/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LabelledTopology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelledTopology{}

// LabelledTopology labelled topology
type LabelledTopology struct {
	// Excludes resources with the same $label name, eg:  \"Zone\" would not allow for resources with the same \"Zone\" value  to be used for a certain operation, eg:  A node with \"Zone: A\" would not be paired up with a node with \"Zone: A\",  but it could be paired up with a node with \"Zone: B\"  exclusive label NAME in the form \"NAME\", and not \"NAME: VALUE\"
	Exclusion map[string]string `json:"exclusion"`
	// Includes resources with the same $label or $label:$value eg:  if label is \"Zone: A\":  A resource with \"Zone: A\" would be paired up with a resource with \"Zone: A\",  but not with a resource with \"Zone: B\"  if label is \"Zone\":  A resource with \"Zone: A\" would be paired up with a resource with \"Zone: B\",  but not with a resource with \"OtherLabel: B\"  inclusive label key value in the form \"NAME: VALUE\"
	Inclusion map[string]string `json:"inclusion"`
}

type _LabelledTopology LabelledTopology

// NewLabelledTopology instantiates a new LabelledTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelledTopology(exclusion map[string]string, inclusion map[string]string) *LabelledTopology {
	this := LabelledTopology{}
	this.Exclusion = exclusion
	this.Inclusion = inclusion
	return &this
}

// NewLabelledTopologyWithDefaults instantiates a new LabelledTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelledTopologyWithDefaults() *LabelledTopology {
	this := LabelledTopology{}
	return &this
}

// GetExclusion returns the Exclusion field value
func (o *LabelledTopology) GetExclusion() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Exclusion
}

// GetExclusionOk returns a tuple with the Exclusion field value
// and a boolean to check if the value has been set.
func (o *LabelledTopology) GetExclusionOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclusion, true
}

// SetExclusion sets field value
func (o *LabelledTopology) SetExclusion(v map[string]string) {
	o.Exclusion = v
}

// GetInclusion returns the Inclusion field value
func (o *LabelledTopology) GetInclusion() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Inclusion
}

// GetInclusionOk returns a tuple with the Inclusion field value
// and a boolean to check if the value has been set.
func (o *LabelledTopology) GetInclusionOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inclusion, true
}

// SetInclusion sets field value
func (o *LabelledTopology) SetInclusion(v map[string]string) {
	o.Inclusion = v
}

func (o LabelledTopology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelledTopology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exclusion"] = o.Exclusion
	toSerialize["inclusion"] = o.Inclusion
	return toSerialize, nil
}

func (o *LabelledTopology) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exclusion",
		"inclusion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLabelledTopology := _LabelledTopology{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLabelledTopology)

	if err != nil {
		return err
	}

	*o = LabelledTopology(varLabelledTopology)

	return err
}

type NullableLabelledTopology struct {
	value *LabelledTopology
	isSet bool
}

func (v NullableLabelledTopology) Get() *LabelledTopology {
	return v.value
}

func (v *NullableLabelledTopology) Set(val *LabelledTopology) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelledTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelledTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelledTopology(val *LabelledTopology) *NullableLabelledTopology {
	return &NullableLabelledTopology{value: val, isSet: true}
}

func (v NullableLabelledTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelledTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


