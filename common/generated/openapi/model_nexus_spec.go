/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NexusSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NexusSpec{}

// NexusSpec User specification of a nexus.
type NexusSpec struct {
	// List of children.
	Children []string `json:"children"`
	// Managed by our control plane
	Managed bool `json:"managed"`
	// Node where the nexus should live.
	Node string `json:"node"`
	Operation *NexusSpecOperation `json:"operation,omitempty"`
	// Volume which owns this nexus, if any
	Owner *string `json:"owner,omitempty"`
	Share Protocol `json:"share"`
	// Size of the nexus.
	Size int64 `json:"size"`
	Status SpecStatus `json:"status"`
	// Nexus Id
	Uuid string `json:"uuid"`
}

type _NexusSpec NexusSpec

// NewNexusSpec instantiates a new NexusSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNexusSpec(children []string, managed bool, node string, share Protocol, size int64, status SpecStatus, uuid string) *NexusSpec {
	this := NexusSpec{}
	this.Children = children
	this.Managed = managed
	this.Node = node
	this.Share = share
	this.Size = size
	this.Status = status
	this.Uuid = uuid
	return &this
}

// NewNexusSpecWithDefaults instantiates a new NexusSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNexusSpecWithDefaults() *NexusSpec {
	this := NexusSpec{}
	return &this
}

// GetChildren returns the Children field value
func (o *NexusSpec) GetChildren() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetChildrenOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *NexusSpec) SetChildren(v []string) {
	o.Children = v
}

// GetManaged returns the Managed field value
func (o *NexusSpec) GetManaged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Managed
}

// GetManagedOk returns a tuple with the Managed field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetManagedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Managed, true
}

// SetManaged sets field value
func (o *NexusSpec) SetManaged(v bool) {
	o.Managed = v
}

// GetNode returns the Node field value
func (o *NexusSpec) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *NexusSpec) SetNode(v string) {
	o.Node = v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *NexusSpec) GetOperation() NexusSpecOperation {
	if o == nil || IsNil(o.Operation) {
		var ret NexusSpecOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetOperationOk() (*NexusSpecOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *NexusSpec) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given NexusSpecOperation and assigns it to the Operation field.
func (o *NexusSpec) SetOperation(v NexusSpecOperation) {
	o.Operation = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *NexusSpec) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *NexusSpec) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *NexusSpec) SetOwner(v string) {
	o.Owner = &v
}

// GetShare returns the Share field value
func (o *NexusSpec) GetShare() Protocol {
	if o == nil {
		var ret Protocol
		return ret
	}

	return o.Share
}

// GetShareOk returns a tuple with the Share field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetShareOk() (*Protocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Share, true
}

// SetShare sets field value
func (o *NexusSpec) SetShare(v Protocol) {
	o.Share = v
}

// GetSize returns the Size field value
func (o *NexusSpec) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *NexusSpec) SetSize(v int64) {
	o.Size = v
}

// GetStatus returns the Status field value
func (o *NexusSpec) GetStatus() SpecStatus {
	if o == nil {
		var ret SpecStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetStatusOk() (*SpecStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NexusSpec) SetStatus(v SpecStatus) {
	o.Status = v
}

// GetUuid returns the Uuid field value
func (o *NexusSpec) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NexusSpec) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NexusSpec) SetUuid(v string) {
	o.Uuid = v
}

func (o NexusSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NexusSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["children"] = o.Children
	toSerialize["managed"] = o.Managed
	toSerialize["node"] = o.Node
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["share"] = o.Share
	toSerialize["size"] = o.Size
	toSerialize["status"] = o.Status
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *NexusSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"children",
		"managed",
		"node",
		"share",
		"size",
		"status",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNexusSpec := _NexusSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNexusSpec)

	if err != nil {
		return err
	}

	*o = NexusSpec(varNexusSpec)

	return err
}

type NullableNexusSpec struct {
	value *NexusSpec
	isSet bool
}

func (v NullableNexusSpec) Get() *NexusSpec {
	return v.value
}

func (v *NullableNexusSpec) Set(val *NexusSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNexusSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNexusSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexusSpec(val *NexusSpec) *NullableNexusSpec {
	return &NullableNexusSpec{value: val, isSet: true}
}

func (v NullableNexusSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexusSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


