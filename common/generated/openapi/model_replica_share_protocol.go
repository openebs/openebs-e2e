/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReplicaShareProtocol Replica Share Protocol
type ReplicaShareProtocol string

// List of ReplicaShareProtocol
const (
	REPLICASHAREPROTOCOL_NVMF ReplicaShareProtocol = "nvmf"
)

// All allowed values of ReplicaShareProtocol enum
var AllowedReplicaShareProtocolEnumValues = []ReplicaShareProtocol{
	"nvmf",
}

func (v *ReplicaShareProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaShareProtocol(value)
	for _, existing := range AllowedReplicaShareProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaShareProtocol", value)
}

// NewReplicaShareProtocolFromValue returns a pointer to a valid ReplicaShareProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaShareProtocolFromValue(v string) (*ReplicaShareProtocol, error) {
	ev := ReplicaShareProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaShareProtocol: valid values are %v", v, AllowedReplicaShareProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaShareProtocol) IsValid() bool {
	for _, existing := range AllowedReplicaShareProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaShareProtocol value
func (v ReplicaShareProtocol) Ptr() *ReplicaShareProtocol {
	return &v
}

type NullableReplicaShareProtocol struct {
	value *ReplicaShareProtocol
	isSet bool
}

func (v NullableReplicaShareProtocol) Get() *ReplicaShareProtocol {
	return v.value
}

func (v *NullableReplicaShareProtocol) Set(val *ReplicaShareProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaShareProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaShareProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaShareProtocol(val *ReplicaShareProtocol) *NullableReplicaShareProtocol {
	return &NullableReplicaShareProtocol{value: val, isSet: true}
}

func (v NullableReplicaShareProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaShareProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

