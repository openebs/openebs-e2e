/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReplicaKind Type of replica, example regular or snapshot.
type ReplicaKind string

// List of ReplicaKind
const (
	REGULAR ReplicaKind = "Regular"
	SNAPSHOT ReplicaKind = "Snapshot"
	SNAPSHOT_CLONE ReplicaKind = "SnapshotClone"
)

// All allowed values of ReplicaKind enum
var AllowedReplicaKindEnumValues = []ReplicaKind{
	"Regular",
	"Snapshot",
	"SnapshotClone",
}

func (v *ReplicaKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaKind(value)
	for _, existing := range AllowedReplicaKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaKind", value)
}

// NewReplicaKindFromValue returns a pointer to a valid ReplicaKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaKindFromValue(v string) (*ReplicaKind, error) {
	ev := ReplicaKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaKind: valid values are %v", v, AllowedReplicaKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaKind) IsValid() bool {
	for _, existing := range AllowedReplicaKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaKind value
func (v ReplicaKind) Ptr() *ReplicaKind {
	return &v
}

type NullableReplicaKind struct {
	value *ReplicaKind
	isSet bool
}

func (v NullableReplicaKind) Get() *ReplicaKind {
	return v.value
}

func (v *NullableReplicaKind) Set(val *ReplicaKind) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaKind) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaKind(val *ReplicaKind) *NullableReplicaKind {
	return &NullableReplicaKind{value: val, isSet: true}
}

func (v NullableReplicaKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

