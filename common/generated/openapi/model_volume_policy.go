/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumePolicy{}

// VolumePolicy Volume policy used to determine if and how to replace a replica
type VolumePolicy struct {
	// If true the control plane will attempt to heal the volume by itself
	SelfHeal bool `json:"self_heal"`
}

type _VolumePolicy VolumePolicy

// NewVolumePolicy instantiates a new VolumePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumePolicy(selfHeal bool) *VolumePolicy {
	this := VolumePolicy{}
	this.SelfHeal = selfHeal
	return &this
}

// NewVolumePolicyWithDefaults instantiates a new VolumePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumePolicyWithDefaults() *VolumePolicy {
	this := VolumePolicy{}
	return &this
}

// GetSelfHeal returns the SelfHeal field value
func (o *VolumePolicy) GetSelfHeal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SelfHeal
}

// GetSelfHealOk returns a tuple with the SelfHeal field value
// and a boolean to check if the value has been set.
func (o *VolumePolicy) GetSelfHealOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SelfHeal, true
}

// SetSelfHeal sets field value
func (o *VolumePolicy) SetSelfHeal(v bool) {
	o.SelfHeal = v
}

func (o VolumePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["self_heal"] = o.SelfHeal
	return toSerialize, nil
}

func (o *VolumePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"self_heal",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumePolicy := _VolumePolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumePolicy)

	if err != nil {
		return err
	}

	*o = VolumePolicy(varVolumePolicy)

	return err
}

type NullableVolumePolicy struct {
	value *VolumePolicy
	isSet bool
}

func (v NullableVolumePolicy) Get() *VolumePolicy {
	return v.value
}

func (v *NullableVolumePolicy) Set(val *VolumePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumePolicy(val *VolumePolicy) *NullableVolumePolicy {
	return &NullableVolumePolicy{value: val, isSet: true}
}

func (v NullableVolumePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


