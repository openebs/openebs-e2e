/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PoolStatus current status of the pool
type PoolStatus string

// List of PoolStatus
const (
	POOLSTATUS_UNKNOWN  PoolStatus = "Unknown"
	POOLSTATUS_ONLINE   PoolStatus = "Online"
	POOLSTATUS_DEGRADED PoolStatus = "Degraded"
	POOLSTATUS_FAULTED  PoolStatus = "Faulted"
)

// All allowed values of PoolStatus enum
var AllowedPoolStatusEnumValues = []PoolStatus{
	"Unknown",
	"Online",
	"Degraded",
	"Faulted",
}

func (v *PoolStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PoolStatus(value)
	for _, existing := range AllowedPoolStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PoolStatus", value)
}

// NewPoolStatusFromValue returns a pointer to a valid PoolStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPoolStatusFromValue(v string) (*PoolStatus, error) {
	ev := PoolStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PoolStatus: valid values are %v", v, AllowedPoolStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PoolStatus) IsValid() bool {
	for _, existing := range AllowedPoolStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PoolStatus value
func (v PoolStatus) Ptr() *PoolStatus {
	return &v
}

type NullablePoolStatus struct {
	value *PoolStatus
	isSet bool
}

func (v NullablePoolStatus) Get() *PoolStatus {
	return v.value
}

func (v *NullablePoolStatus) Set(val *PoolStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolStatus(val *PoolStatus) *NullablePoolStatus {
	return &NullablePoolStatus{value: val, isSet: true}
}

func (v NullablePoolStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

