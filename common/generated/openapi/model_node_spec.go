/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeSpec{}

// NodeSpec Node spec
type NodeSpec struct {
	// gRPC endpoint of the io-engine instance
	GrpcEndpoint string `json:"grpcEndpoint"`
	// storage node identifier
	Id string `json:"id"`
	// labels to be set on the node
	Labels *map[string]string `json:"labels,omitempty"`
	// the drain state
	Cordondrainstate NullableCordonDrainState `json:"cordondrainstate,omitempty"`
	// NVMe Qualified Names (NQNs) are used to uniquely describe a host or NVM subsystem for the purposes of identification and authentication
	NodeNqn *string `json:"node_nqn,omitempty"`
	// Version of the io-engine instance
	Version *string `json:"version,omitempty"`
}

type _NodeSpec NodeSpec

// NewNodeSpec instantiates a new NodeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeSpec(grpcEndpoint string, id string) *NodeSpec {
	this := NodeSpec{}
	this.GrpcEndpoint = grpcEndpoint
	this.Id = id
	return &this
}

// NewNodeSpecWithDefaults instantiates a new NodeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeSpecWithDefaults() *NodeSpec {
	this := NodeSpec{}
	return &this
}

// GetGrpcEndpoint returns the GrpcEndpoint field value
func (o *NodeSpec) GetGrpcEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrpcEndpoint
}

// GetGrpcEndpointOk returns a tuple with the GrpcEndpoint field value
// and a boolean to check if the value has been set.
func (o *NodeSpec) GetGrpcEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrpcEndpoint, true
}

// SetGrpcEndpoint sets field value
func (o *NodeSpec) SetGrpcEndpoint(v string) {
	o.GrpcEndpoint = v
}

// GetId returns the Id field value
func (o *NodeSpec) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodeSpec) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodeSpec) SetId(v string) {
	o.Id = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *NodeSpec) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSpec) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *NodeSpec) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *NodeSpec) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetCordondrainstate returns the Cordondrainstate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeSpec) GetCordondrainstate() CordonDrainState {
	if o == nil || IsNil(o.Cordondrainstate.Get()) {
		var ret CordonDrainState
		return ret
	}
	return *o.Cordondrainstate.Get()
}

// GetCordondrainstateOk returns a tuple with the Cordondrainstate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeSpec) GetCordondrainstateOk() (*CordonDrainState, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cordondrainstate.Get(), o.Cordondrainstate.IsSet()
}

// HasCordondrainstate returns a boolean if a field has been set.
func (o *NodeSpec) HasCordondrainstate() bool {
	if o != nil && o.Cordondrainstate.IsSet() {
		return true
	}

	return false
}

// SetCordondrainstate gets a reference to the given NullableCordonDrainState and assigns it to the Cordondrainstate field.
func (o *NodeSpec) SetCordondrainstate(v CordonDrainState) {
	o.Cordondrainstate.Set(&v)
}
// SetCordondrainstateNil sets the value for Cordondrainstate to be an explicit nil
func (o *NodeSpec) SetCordondrainstateNil() {
	o.Cordondrainstate.Set(nil)
}

// UnsetCordondrainstate ensures that no value is present for Cordondrainstate, not even an explicit nil
func (o *NodeSpec) UnsetCordondrainstate() {
	o.Cordondrainstate.Unset()
}

// GetNodeNqn returns the NodeNqn field value if set, zero value otherwise.
func (o *NodeSpec) GetNodeNqn() string {
	if o == nil || IsNil(o.NodeNqn) {
		var ret string
		return ret
	}
	return *o.NodeNqn
}

// GetNodeNqnOk returns a tuple with the NodeNqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSpec) GetNodeNqnOk() (*string, bool) {
	if o == nil || IsNil(o.NodeNqn) {
		return nil, false
	}
	return o.NodeNqn, true
}

// HasNodeNqn returns a boolean if a field has been set.
func (o *NodeSpec) HasNodeNqn() bool {
	if o != nil && !IsNil(o.NodeNqn) {
		return true
	}

	return false
}

// SetNodeNqn gets a reference to the given string and assigns it to the NodeNqn field.
func (o *NodeSpec) SetNodeNqn(v string) {
	o.NodeNqn = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NodeSpec) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSpec) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NodeSpec) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NodeSpec) SetVersion(v string) {
	o.Version = &v
}

func (o NodeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grpcEndpoint"] = o.GrpcEndpoint
	toSerialize["id"] = o.Id
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if o.Cordondrainstate.IsSet() {
		toSerialize["cordondrainstate"] = o.Cordondrainstate.Get()
	}
	if !IsNil(o.NodeNqn) {
		toSerialize["node_nqn"] = o.NodeNqn
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *NodeSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grpcEndpoint",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeSpec := _NodeSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeSpec)

	if err != nil {
		return err
	}

	*o = NodeSpec(varNodeSpec)

	return err
}

type NullableNodeSpec struct {
	value *NodeSpec
	isSet bool
}

func (v NullableNodeSpec) Get() *NodeSpec {
	return v.value
}

func (v *NullableNodeSpec) Set(val *NodeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeSpec(val *NodeSpec) *NullableNodeSpec {
	return &NullableNodeSpec{value: val, isSet: true}
}

func (v NullableNodeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


