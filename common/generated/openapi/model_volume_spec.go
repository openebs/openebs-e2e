/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSpec{}

// VolumeSpec User specification of a volume.
type VolumeSpec struct {
	// Optionally used to store custom volume information
	Labels *map[string]string `json:"labels,omitempty"`
	// Number of children the volume should have.
	NumReplicas int32 `json:"num_replicas"`
	Operation *VolumeSpecOperation `json:"operation,omitempty"`
	// Size that the volume should be.
	Size int64 `json:"size"`
	Status SpecStatus `json:"status"`
	Target *VolumeTarget `json:"target,omitempty"`
	// Volume Id
	Uuid string `json:"uuid"`
	Topology *Topology `json:"topology,omitempty"`
	Policy VolumePolicy `json:"policy"`
	// Thin provisioning flag.
	Thin bool `json:"thin"`
	// Volume converted to thin provisioned.
	AsThin *bool `json:"as_thin,omitempty"`
	AffinityGroup *AffinityGroup `json:"affinity_group,omitempty"`
	ContentSource NullableVolumeContentSource `json:"content_source,omitempty"`
	// Number of snapshots taken on this volume.
	NumSnapshots int32 `json:"num_snapshots"`
	// Max snapshots to limit per volume.
	MaxSnapshots *int32 `json:"max_snapshots,omitempty"`
}

type _VolumeSpec VolumeSpec

// NewVolumeSpec instantiates a new VolumeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSpec(numReplicas int32, size int64, status SpecStatus, uuid string, policy VolumePolicy, thin bool, numSnapshots int32) *VolumeSpec {
	this := VolumeSpec{}
	this.NumReplicas = numReplicas
	this.Size = size
	this.Status = status
	this.Uuid = uuid
	this.Policy = policy
	this.Thin = thin
	this.NumSnapshots = numSnapshots
	return &this
}

// NewVolumeSpecWithDefaults instantiates a new VolumeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSpecWithDefaults() *VolumeSpec {
	this := VolumeSpec{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *VolumeSpec) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *VolumeSpec) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *VolumeSpec) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetNumReplicas returns the NumReplicas field value
func (o *VolumeSpec) GetNumReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumReplicas
}

// GetNumReplicasOk returns a tuple with the NumReplicas field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetNumReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumReplicas, true
}

// SetNumReplicas sets field value
func (o *VolumeSpec) SetNumReplicas(v int32) {
	o.NumReplicas = v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *VolumeSpec) GetOperation() VolumeSpecOperation {
	if o == nil || IsNil(o.Operation) {
		var ret VolumeSpecOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetOperationOk() (*VolumeSpecOperation, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *VolumeSpec) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given VolumeSpecOperation and assigns it to the Operation field.
func (o *VolumeSpec) SetOperation(v VolumeSpecOperation) {
	o.Operation = &v
}

// GetSize returns the Size field value
func (o *VolumeSpec) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *VolumeSpec) SetSize(v int64) {
	o.Size = v
}

// GetStatus returns the Status field value
func (o *VolumeSpec) GetStatus() SpecStatus {
	if o == nil {
		var ret SpecStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetStatusOk() (*SpecStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VolumeSpec) SetStatus(v SpecStatus) {
	o.Status = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *VolumeSpec) GetTarget() VolumeTarget {
	if o == nil || IsNil(o.Target) {
		var ret VolumeTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetTargetOk() (*VolumeTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *VolumeSpec) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given VolumeTarget and assigns it to the Target field.
func (o *VolumeSpec) SetTarget(v VolumeTarget) {
	o.Target = &v
}

// GetUuid returns the Uuid field value
func (o *VolumeSpec) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *VolumeSpec) SetUuid(v string) {
	o.Uuid = v
}

// GetTopology returns the Topology field value if set, zero value otherwise.
func (o *VolumeSpec) GetTopology() Topology {
	if o == nil || IsNil(o.Topology) {
		var ret Topology
		return ret
	}
	return *o.Topology
}

// GetTopologyOk returns a tuple with the Topology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetTopologyOk() (*Topology, bool) {
	if o == nil || IsNil(o.Topology) {
		return nil, false
	}
	return o.Topology, true
}

// HasTopology returns a boolean if a field has been set.
func (o *VolumeSpec) HasTopology() bool {
	if o != nil && !IsNil(o.Topology) {
		return true
	}

	return false
}

// SetTopology gets a reference to the given Topology and assigns it to the Topology field.
func (o *VolumeSpec) SetTopology(v Topology) {
	o.Topology = &v
}

// GetPolicy returns the Policy field value
func (o *VolumeSpec) GetPolicy() VolumePolicy {
	if o == nil {
		var ret VolumePolicy
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetPolicyOk() (*VolumePolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *VolumeSpec) SetPolicy(v VolumePolicy) {
	o.Policy = v
}

// GetThin returns the Thin field value
func (o *VolumeSpec) GetThin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Thin
}

// GetThinOk returns a tuple with the Thin field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetThinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thin, true
}

// SetThin sets field value
func (o *VolumeSpec) SetThin(v bool) {
	o.Thin = v
}

// GetAsThin returns the AsThin field value if set, zero value otherwise.
func (o *VolumeSpec) GetAsThin() bool {
	if o == nil || IsNil(o.AsThin) {
		var ret bool
		return ret
	}
	return *o.AsThin
}

// GetAsThinOk returns a tuple with the AsThin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetAsThinOk() (*bool, bool) {
	if o == nil || IsNil(o.AsThin) {
		return nil, false
	}
	return o.AsThin, true
}

// HasAsThin returns a boolean if a field has been set.
func (o *VolumeSpec) HasAsThin() bool {
	if o != nil && !IsNil(o.AsThin) {
		return true
	}

	return false
}

// SetAsThin gets a reference to the given bool and assigns it to the AsThin field.
func (o *VolumeSpec) SetAsThin(v bool) {
	o.AsThin = &v
}

// GetAffinityGroup returns the AffinityGroup field value if set, zero value otherwise.
func (o *VolumeSpec) GetAffinityGroup() AffinityGroup {
	if o == nil || IsNil(o.AffinityGroup) {
		var ret AffinityGroup
		return ret
	}
	return *o.AffinityGroup
}

// GetAffinityGroupOk returns a tuple with the AffinityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetAffinityGroupOk() (*AffinityGroup, bool) {
	if o == nil || IsNil(o.AffinityGroup) {
		return nil, false
	}
	return o.AffinityGroup, true
}

// HasAffinityGroup returns a boolean if a field has been set.
func (o *VolumeSpec) HasAffinityGroup() bool {
	if o != nil && !IsNil(o.AffinityGroup) {
		return true
	}

	return false
}

// SetAffinityGroup gets a reference to the given AffinityGroup and assigns it to the AffinityGroup field.
func (o *VolumeSpec) SetAffinityGroup(v AffinityGroup) {
	o.AffinityGroup = &v
}

// GetContentSource returns the ContentSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeSpec) GetContentSource() VolumeContentSource {
	if o == nil || IsNil(o.ContentSource.Get()) {
		var ret VolumeContentSource
		return ret
	}
	return *o.ContentSource.Get()
}

// GetContentSourceOk returns a tuple with the ContentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeSpec) GetContentSourceOk() (*VolumeContentSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentSource.Get(), o.ContentSource.IsSet()
}

// HasContentSource returns a boolean if a field has been set.
func (o *VolumeSpec) HasContentSource() bool {
	if o != nil && o.ContentSource.IsSet() {
		return true
	}

	return false
}

// SetContentSource gets a reference to the given NullableVolumeContentSource and assigns it to the ContentSource field.
func (o *VolumeSpec) SetContentSource(v VolumeContentSource) {
	o.ContentSource.Set(&v)
}
// SetContentSourceNil sets the value for ContentSource to be an explicit nil
func (o *VolumeSpec) SetContentSourceNil() {
	o.ContentSource.Set(nil)
}

// UnsetContentSource ensures that no value is present for ContentSource, not even an explicit nil
func (o *VolumeSpec) UnsetContentSource() {
	o.ContentSource.Unset()
}

// GetNumSnapshots returns the NumSnapshots field value
func (o *VolumeSpec) GetNumSnapshots() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumSnapshots
}

// GetNumSnapshotsOk returns a tuple with the NumSnapshots field value
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetNumSnapshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumSnapshots, true
}

// SetNumSnapshots sets field value
func (o *VolumeSpec) SetNumSnapshots(v int32) {
	o.NumSnapshots = v
}

// GetMaxSnapshots returns the MaxSnapshots field value if set, zero value otherwise.
func (o *VolumeSpec) GetMaxSnapshots() int32 {
	if o == nil || IsNil(o.MaxSnapshots) {
		var ret int32
		return ret
	}
	return *o.MaxSnapshots
}

// GetMaxSnapshotsOk returns a tuple with the MaxSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSpec) GetMaxSnapshotsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSnapshots) {
		return nil, false
	}
	return o.MaxSnapshots, true
}

// HasMaxSnapshots returns a boolean if a field has been set.
func (o *VolumeSpec) HasMaxSnapshots() bool {
	if o != nil && !IsNil(o.MaxSnapshots) {
		return true
	}

	return false
}

// SetMaxSnapshots gets a reference to the given int32 and assigns it to the MaxSnapshots field.
func (o *VolumeSpec) SetMaxSnapshots(v int32) {
	o.MaxSnapshots = &v
}

func (o VolumeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["num_replicas"] = o.NumReplicas
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	toSerialize["size"] = o.Size
	toSerialize["status"] = o.Status
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.Topology) {
		toSerialize["topology"] = o.Topology
	}
	toSerialize["policy"] = o.Policy
	toSerialize["thin"] = o.Thin
	if !IsNil(o.AsThin) {
		toSerialize["as_thin"] = o.AsThin
	}
	if !IsNil(o.AffinityGroup) {
		toSerialize["affinity_group"] = o.AffinityGroup
	}
	if o.ContentSource.IsSet() {
		toSerialize["content_source"] = o.ContentSource.Get()
	}
	toSerialize["num_snapshots"] = o.NumSnapshots
	if !IsNil(o.MaxSnapshots) {
		toSerialize["max_snapshots"] = o.MaxSnapshots
	}
	return toSerialize, nil
}

func (o *VolumeSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"num_replicas",
		"size",
		"status",
		"uuid",
		"policy",
		"thin",
		"num_snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSpec := _VolumeSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSpec)

	if err != nil {
		return err
	}

	*o = VolumeSpec(varVolumeSpec)

	return err
}

type NullableVolumeSpec struct {
	value *VolumeSpec
	isSet bool
}

func (v NullableVolumeSpec) Get() *VolumeSpec {
	return v.value
}

func (v *NullableVolumeSpec) Set(val *VolumeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSpec(val *VolumeSpec) *NullableVolumeSpec {
	return &NullableVolumeSpec{value: val, isSet: true}
}

func (v NullableVolumeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


