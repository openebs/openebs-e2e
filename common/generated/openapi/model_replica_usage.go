/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplicaUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaUsage{}

// ReplicaUsage Replica space usage information. Useful for capacity management, eg: figure out how much of a thin-provisioned replica is allocated. 
type ReplicaUsage struct {
	// Replica capacity in bytes.
	Capacity int64 `json:"capacity"`
	// Amount of actually allocated disk space for this replica in bytes.
	Allocated int64 `json:"allocated"`
	// Amount of actually allocated disk space for this replica's snapshots in bytes.
	AllocatedSnapshots int64 `json:"allocated_snapshots"`
	// Amount of actually allocated disk space for this replica's snapshots and its predecessors in bytes. For a restored/cloned replica this includes snapshots from the parent source. 
	AllocatedAllSnapshots int64 `json:"allocated_all_snapshots"`
}

type _ReplicaUsage ReplicaUsage

// NewReplicaUsage instantiates a new ReplicaUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaUsage(capacity int64, allocated int64, allocatedSnapshots int64, allocatedAllSnapshots int64) *ReplicaUsage {
	this := ReplicaUsage{}
	this.Capacity = capacity
	this.Allocated = allocated
	this.AllocatedSnapshots = allocatedSnapshots
	this.AllocatedAllSnapshots = allocatedAllSnapshots
	return &this
}

// NewReplicaUsageWithDefaults instantiates a new ReplicaUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaUsageWithDefaults() *ReplicaUsage {
	this := ReplicaUsage{}
	var capacity int64 = 0
	this.Capacity = capacity
	var allocated int64 = 0
	this.Allocated = allocated
	var allocatedSnapshots int64 = 0
	this.AllocatedSnapshots = allocatedSnapshots
	var allocatedAllSnapshots int64 = 0
	this.AllocatedAllSnapshots = allocatedAllSnapshots
	return &this
}

// GetCapacity returns the Capacity field value
func (o *ReplicaUsage) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *ReplicaUsage) GetCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *ReplicaUsage) SetCapacity(v int64) {
	o.Capacity = v
}

// GetAllocated returns the Allocated field value
func (o *ReplicaUsage) GetAllocated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value
// and a boolean to check if the value has been set.
func (o *ReplicaUsage) GetAllocatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allocated, true
}

// SetAllocated sets field value
func (o *ReplicaUsage) SetAllocated(v int64) {
	o.Allocated = v
}

// GetAllocatedSnapshots returns the AllocatedSnapshots field value
func (o *ReplicaUsage) GetAllocatedSnapshots() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedSnapshots
}

// GetAllocatedSnapshotsOk returns a tuple with the AllocatedSnapshots field value
// and a boolean to check if the value has been set.
func (o *ReplicaUsage) GetAllocatedSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedSnapshots, true
}

// SetAllocatedSnapshots sets field value
func (o *ReplicaUsage) SetAllocatedSnapshots(v int64) {
	o.AllocatedSnapshots = v
}

// GetAllocatedAllSnapshots returns the AllocatedAllSnapshots field value
func (o *ReplicaUsage) GetAllocatedAllSnapshots() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedAllSnapshots
}

// GetAllocatedAllSnapshotsOk returns a tuple with the AllocatedAllSnapshots field value
// and a boolean to check if the value has been set.
func (o *ReplicaUsage) GetAllocatedAllSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedAllSnapshots, true
}

// SetAllocatedAllSnapshots sets field value
func (o *ReplicaUsage) SetAllocatedAllSnapshots(v int64) {
	o.AllocatedAllSnapshots = v
}

func (o ReplicaUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity"] = o.Capacity
	toSerialize["allocated"] = o.Allocated
	toSerialize["allocated_snapshots"] = o.AllocatedSnapshots
	toSerialize["allocated_all_snapshots"] = o.AllocatedAllSnapshots
	return toSerialize, nil
}

func (o *ReplicaUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity",
		"allocated",
		"allocated_snapshots",
		"allocated_all_snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplicaUsage := _ReplicaUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplicaUsage)

	if err != nil {
		return err
	}

	*o = ReplicaUsage(varReplicaUsage)

	return err
}

type NullableReplicaUsage struct {
	value *ReplicaUsage
	isSet bool
}

func (v NullableReplicaUsage) Get() *ReplicaUsage {
	return v.value
}

func (v *NullableReplicaUsage) Set(val *ReplicaUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaUsage(val *ReplicaUsage) *NullableReplicaUsage {
	return &NullableReplicaUsage{value: val, isSet: true}
}

func (v NullableReplicaUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


