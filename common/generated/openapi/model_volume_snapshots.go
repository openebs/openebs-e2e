/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeSnapshots type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSnapshots{}

// VolumeSnapshots Array of volume snapshots plus the next token for subsequent get requests when using pagination.
type VolumeSnapshots struct {
	Entries []VolumeSnapshot `json:"entries"`
	NextToken *int32 `json:"next_token,omitempty"`
}

type _VolumeSnapshots VolumeSnapshots

// NewVolumeSnapshots instantiates a new VolumeSnapshots object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSnapshots(entries []VolumeSnapshot) *VolumeSnapshots {
	this := VolumeSnapshots{}
	this.Entries = entries
	return &this
}

// NewVolumeSnapshotsWithDefaults instantiates a new VolumeSnapshots object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSnapshotsWithDefaults() *VolumeSnapshots {
	this := VolumeSnapshots{}
	return &this
}

// GetEntries returns the Entries field value
func (o *VolumeSnapshots) GetEntries() []VolumeSnapshot {
	if o == nil {
		var ret []VolumeSnapshot
		return ret
	}

	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshots) GetEntriesOk() ([]VolumeSnapshot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries, true
}

// SetEntries sets field value
func (o *VolumeSnapshots) SetEntries(v []VolumeSnapshot) {
	o.Entries = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *VolumeSnapshots) GetNextToken() int32 {
	if o == nil || IsNil(o.NextToken) {
		var ret int32
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSnapshots) GetNextTokenOk() (*int32, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *VolumeSnapshots) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given int32 and assigns it to the NextToken field.
func (o *VolumeSnapshots) SetNextToken(v int32) {
	o.NextToken = &v
}

func (o VolumeSnapshots) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSnapshots) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entries"] = o.Entries
	if !IsNil(o.NextToken) {
		toSerialize["next_token"] = o.NextToken
	}
	return toSerialize, nil
}

func (o *VolumeSnapshots) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSnapshots := _VolumeSnapshots{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSnapshots)

	if err != nil {
		return err
	}

	*o = VolumeSnapshots(varVolumeSnapshots)

	return err
}

type NullableVolumeSnapshots struct {
	value *VolumeSnapshots
	isSet bool
}

func (v NullableVolumeSnapshots) Get() *VolumeSnapshots {
	return v.value
}

func (v *NullableVolumeSnapshots) Set(val *VolumeSnapshots) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSnapshots) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSnapshots) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSnapshots(val *VolumeSnapshots) *NullableVolumeSnapshots {
	return &NullableVolumeSnapshots{value: val, isSet: true}
}

func (v NullableVolumeSnapshots) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSnapshots) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


