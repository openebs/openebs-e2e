/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Replica type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Replica{}

// Replica Replica information
type Replica struct {
	// storage node identifier
	Node string `json:"node"`
	// storage pool identifier
	Pool string `json:"pool"`
	// storage pool unique identifier
	PoolUuid *string `json:"poolUuid,omitempty"`
	Share Protocol `json:"share"`
	// size of the replica in bytes
	Size int64 `json:"size"`
	Space *ReplicaSpaceUsage `json:"space,omitempty"`
	State ReplicaState `json:"state"`
	// thin provisioning
	Thin bool `json:"thin"`
	// uri usable by nexus to access it
	Uri string `json:"uri"`
	// uuid of the replica
	Uuid string `json:"uuid"`
	// NQNs of hosts allowed to connect to this replica
	AllowedHosts []string `json:"allowed-hosts,omitempty"`
	Kind ReplicaKind `json:"kind"`
}

type _Replica Replica

// NewReplica instantiates a new Replica object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplica(node string, pool string, share Protocol, size int64, state ReplicaState, thin bool, uri string, uuid string, kind ReplicaKind) *Replica {
	this := Replica{}
	this.Node = node
	this.Pool = pool
	this.Share = share
	this.Size = size
	this.State = state
	this.Thin = thin
	this.Uri = uri
	this.Uuid = uuid
	this.Kind = kind
	return &this
}

// NewReplicaWithDefaults instantiates a new Replica object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaWithDefaults() *Replica {
	this := Replica{}
	var kind ReplicaKind = REGULAR
	this.Kind = kind
	return &this
}

// GetNode returns the Node field value
func (o *Replica) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *Replica) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *Replica) SetNode(v string) {
	o.Node = v
}

// GetPool returns the Pool field value
func (o *Replica) GetPool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pool
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
func (o *Replica) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pool, true
}

// SetPool sets field value
func (o *Replica) SetPool(v string) {
	o.Pool = v
}

// GetPoolUuid returns the PoolUuid field value if set, zero value otherwise.
func (o *Replica) GetPoolUuid() string {
	if o == nil || IsNil(o.PoolUuid) {
		var ret string
		return ret
	}
	return *o.PoolUuid
}

// GetPoolUuidOk returns a tuple with the PoolUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replica) GetPoolUuidOk() (*string, bool) {
	if o == nil || IsNil(o.PoolUuid) {
		return nil, false
	}
	return o.PoolUuid, true
}

// HasPoolUuid returns a boolean if a field has been set.
func (o *Replica) HasPoolUuid() bool {
	if o != nil && !IsNil(o.PoolUuid) {
		return true
	}

	return false
}

// SetPoolUuid gets a reference to the given string and assigns it to the PoolUuid field.
func (o *Replica) SetPoolUuid(v string) {
	o.PoolUuid = &v
}

// GetShare returns the Share field value
func (o *Replica) GetShare() Protocol {
	if o == nil {
		var ret Protocol
		return ret
	}

	return o.Share
}

// GetShareOk returns a tuple with the Share field value
// and a boolean to check if the value has been set.
func (o *Replica) GetShareOk() (*Protocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Share, true
}

// SetShare sets field value
func (o *Replica) SetShare(v Protocol) {
	o.Share = v
}

// GetSize returns the Size field value
func (o *Replica) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Replica) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Replica) SetSize(v int64) {
	o.Size = v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *Replica) GetSpace() ReplicaSpaceUsage {
	if o == nil || IsNil(o.Space) {
		var ret ReplicaSpaceUsage
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replica) GetSpaceOk() (*ReplicaSpaceUsage, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *Replica) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given ReplicaSpaceUsage and assigns it to the Space field.
func (o *Replica) SetSpace(v ReplicaSpaceUsage) {
	o.Space = &v
}

// GetState returns the State field value
func (o *Replica) GetState() ReplicaState {
	if o == nil {
		var ret ReplicaState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Replica) GetStateOk() (*ReplicaState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Replica) SetState(v ReplicaState) {
	o.State = v
}

// GetThin returns the Thin field value
func (o *Replica) GetThin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Thin
}

// GetThinOk returns a tuple with the Thin field value
// and a boolean to check if the value has been set.
func (o *Replica) GetThinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thin, true
}

// SetThin sets field value
func (o *Replica) SetThin(v bool) {
	o.Thin = v
}

// GetUri returns the Uri field value
func (o *Replica) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *Replica) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *Replica) SetUri(v string) {
	o.Uri = v
}

// GetUuid returns the Uuid field value
func (o *Replica) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Replica) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Replica) SetUuid(v string) {
	o.Uuid = v
}

// GetAllowedHosts returns the AllowedHosts field value if set, zero value otherwise.
func (o *Replica) GetAllowedHosts() []string {
	if o == nil || IsNil(o.AllowedHosts) {
		var ret []string
		return ret
	}
	return o.AllowedHosts
}

// GetAllowedHostsOk returns a tuple with the AllowedHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replica) GetAllowedHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedHosts) {
		return nil, false
	}
	return o.AllowedHosts, true
}

// HasAllowedHosts returns a boolean if a field has been set.
func (o *Replica) HasAllowedHosts() bool {
	if o != nil && !IsNil(o.AllowedHosts) {
		return true
	}

	return false
}

// SetAllowedHosts gets a reference to the given []string and assigns it to the AllowedHosts field.
func (o *Replica) SetAllowedHosts(v []string) {
	o.AllowedHosts = v
}

// GetKind returns the Kind field value
func (o *Replica) GetKind() ReplicaKind {
	if o == nil {
		var ret ReplicaKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Replica) GetKindOk() (*ReplicaKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Replica) SetKind(v ReplicaKind) {
	o.Kind = v
}

func (o Replica) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Replica) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node"] = o.Node
	toSerialize["pool"] = o.Pool
	if !IsNil(o.PoolUuid) {
		toSerialize["poolUuid"] = o.PoolUuid
	}
	toSerialize["share"] = o.Share
	toSerialize["size"] = o.Size
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	toSerialize["state"] = o.State
	toSerialize["thin"] = o.Thin
	toSerialize["uri"] = o.Uri
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.AllowedHosts) {
		toSerialize["allowed-hosts"] = o.AllowedHosts
	}
	toSerialize["kind"] = o.Kind
	return toSerialize, nil
}

func (o *Replica) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node",
		"pool",
		"share",
		"size",
		"state",
		"thin",
		"uri",
		"uuid",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplica := _Replica{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplica)

	if err != nil {
		return err
	}

	*o = Replica(varReplica)

	return err
}

type NullableReplica struct {
	value *Replica
	isSet bool
}

func (v NullableReplica) Get() *Replica {
	return v.value
}

func (v *NullableReplica) Set(val *Replica) {
	v.value = val
	v.isSet = true
}

func (v NullableReplica) IsSet() bool {
	return v.isSet
}

func (v *NullableReplica) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplica(val *Replica) *NullableReplica {
	return &NullableReplica{value: val, isSet: true}
}

func (v NullableReplica) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplica) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


