/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RebuildRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RebuildRecord{}

// RebuildRecord Rebuild record of a Child
type RebuildRecord struct {
	// Uri of the rebuilding child
	ChildUri string `json:"childUri"`
	// Uri of source child for rebuild job
	SrcUri string `json:"srcUri"`
	RebuildJobState RebuildJobState `json:"rebuildJobState"`
	// Total blocks to rebuild
	BlocksTotal int32 `json:"blocksTotal"`
	// Number of blocks processed
	BlocksRecovered int32 `json:"blocksRecovered"`
	// Number of blocks to transferred
	BlocksTransferred int32 `json:"blocksTransferred"`
	// Number of blocks remaining
	BlocksRemaining int32 `json:"blocksRemaining"`
	// Size of each block in the task
	BlockSize int32 `json:"blockSize"`
	// True means its Partial rebuild job. If false, its Full rebuild job
	IsPartial bool `json:"isPartial"`
	// Start time of the rebuild job (UTC)
	StartTime time.Time `json:"startTime"`
	// End time of the rebuild job (UTC)
	EndTime time.Time `json:"endTime"`
}

type _RebuildRecord RebuildRecord

// NewRebuildRecord instantiates a new RebuildRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebuildRecord(childUri string, srcUri string, rebuildJobState RebuildJobState, blocksTotal int32, blocksRecovered int32, blocksTransferred int32, blocksRemaining int32, blockSize int32, isPartial bool, startTime time.Time, endTime time.Time) *RebuildRecord {
	this := RebuildRecord{}
	this.ChildUri = childUri
	this.SrcUri = srcUri
	this.RebuildJobState = rebuildJobState
	this.BlocksTotal = blocksTotal
	this.BlocksRecovered = blocksRecovered
	this.BlocksTransferred = blocksTransferred
	this.BlocksRemaining = blocksRemaining
	this.BlockSize = blockSize
	this.IsPartial = isPartial
	this.StartTime = startTime
	this.EndTime = endTime
	return &this
}

// NewRebuildRecordWithDefaults instantiates a new RebuildRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebuildRecordWithDefaults() *RebuildRecord {
	this := RebuildRecord{}
	return &this
}

// GetChildUri returns the ChildUri field value
func (o *RebuildRecord) GetChildUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChildUri
}

// GetChildUriOk returns a tuple with the ChildUri field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetChildUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChildUri, true
}

// SetChildUri sets field value
func (o *RebuildRecord) SetChildUri(v string) {
	o.ChildUri = v
}

// GetSrcUri returns the SrcUri field value
func (o *RebuildRecord) GetSrcUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SrcUri
}

// GetSrcUriOk returns a tuple with the SrcUri field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetSrcUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcUri, true
}

// SetSrcUri sets field value
func (o *RebuildRecord) SetSrcUri(v string) {
	o.SrcUri = v
}

// GetRebuildJobState returns the RebuildJobState field value
func (o *RebuildRecord) GetRebuildJobState() RebuildJobState {
	if o == nil {
		var ret RebuildJobState
		return ret
	}

	return o.RebuildJobState
}

// GetRebuildJobStateOk returns a tuple with the RebuildJobState field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetRebuildJobStateOk() (*RebuildJobState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RebuildJobState, true
}

// SetRebuildJobState sets field value
func (o *RebuildRecord) SetRebuildJobState(v RebuildJobState) {
	o.RebuildJobState = v
}

// GetBlocksTotal returns the BlocksTotal field value
func (o *RebuildRecord) GetBlocksTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlocksTotal
}

// GetBlocksTotalOk returns a tuple with the BlocksTotal field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetBlocksTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlocksTotal, true
}

// SetBlocksTotal sets field value
func (o *RebuildRecord) SetBlocksTotal(v int32) {
	o.BlocksTotal = v
}

// GetBlocksRecovered returns the BlocksRecovered field value
func (o *RebuildRecord) GetBlocksRecovered() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlocksRecovered
}

// GetBlocksRecoveredOk returns a tuple with the BlocksRecovered field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetBlocksRecoveredOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlocksRecovered, true
}

// SetBlocksRecovered sets field value
func (o *RebuildRecord) SetBlocksRecovered(v int32) {
	o.BlocksRecovered = v
}

// GetBlocksTransferred returns the BlocksTransferred field value
func (o *RebuildRecord) GetBlocksTransferred() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlocksTransferred
}

// GetBlocksTransferredOk returns a tuple with the BlocksTransferred field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetBlocksTransferredOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlocksTransferred, true
}

// SetBlocksTransferred sets field value
func (o *RebuildRecord) SetBlocksTransferred(v int32) {
	o.BlocksTransferred = v
}

// GetBlocksRemaining returns the BlocksRemaining field value
func (o *RebuildRecord) GetBlocksRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlocksRemaining
}

// GetBlocksRemainingOk returns a tuple with the BlocksRemaining field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetBlocksRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlocksRemaining, true
}

// SetBlocksRemaining sets field value
func (o *RebuildRecord) SetBlocksRemaining(v int32) {
	o.BlocksRemaining = v
}

// GetBlockSize returns the BlockSize field value
func (o *RebuildRecord) GetBlockSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetBlockSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockSize, true
}

// SetBlockSize sets field value
func (o *RebuildRecord) SetBlockSize(v int32) {
	o.BlockSize = v
}

// GetIsPartial returns the IsPartial field value
func (o *RebuildRecord) GetIsPartial() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPartial
}

// GetIsPartialOk returns a tuple with the IsPartial field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetIsPartialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPartial, true
}

// SetIsPartial sets field value
func (o *RebuildRecord) SetIsPartial(v bool) {
	o.IsPartial = v
}

// GetStartTime returns the StartTime field value
func (o *RebuildRecord) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *RebuildRecord) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *RebuildRecord) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *RebuildRecord) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *RebuildRecord) SetEndTime(v time.Time) {
	o.EndTime = v
}

func (o RebuildRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RebuildRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["childUri"] = o.ChildUri
	toSerialize["srcUri"] = o.SrcUri
	toSerialize["rebuildJobState"] = o.RebuildJobState
	toSerialize["blocksTotal"] = o.BlocksTotal
	toSerialize["blocksRecovered"] = o.BlocksRecovered
	toSerialize["blocksTransferred"] = o.BlocksTransferred
	toSerialize["blocksRemaining"] = o.BlocksRemaining
	toSerialize["blockSize"] = o.BlockSize
	toSerialize["isPartial"] = o.IsPartial
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	return toSerialize, nil
}

func (o *RebuildRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"childUri",
		"srcUri",
		"rebuildJobState",
		"blocksTotal",
		"blocksRecovered",
		"blocksTransferred",
		"blocksRemaining",
		"blockSize",
		"isPartial",
		"startTime",
		"endTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRebuildRecord := _RebuildRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRebuildRecord)

	if err != nil {
		return err
	}

	*o = RebuildRecord(varRebuildRecord)

	return err
}

type NullableRebuildRecord struct {
	value *RebuildRecord
	isSet bool
}

func (v NullableRebuildRecord) Get() *RebuildRecord {
	return v.value
}

func (v *NullableRebuildRecord) Set(val *RebuildRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableRebuildRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableRebuildRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebuildRecord(val *RebuildRecord) *NullableRebuildRecord {
	return &NullableRebuildRecord{value: val, isSet: true}
}

func (v NullableRebuildRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebuildRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


