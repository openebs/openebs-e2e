/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VolumeStatus current volume status
type VolumeStatus string

// List of VolumeStatus
// List of VolumeStatus
const (
	VOLUMESTATUS_UNKNOWN  VolumeStatus = "Unknown"
	VOLUMESTATUS_ONLINE   VolumeStatus = "Online"
	VOLUMESTATUS_DEGRADED VolumeStatus = "Degraded"
	VOLUMESTATUS_FAULTED  VolumeStatus = "Faulted"
	VOLUMESTATUS_SHUTDOWN VolumeStatus = "Shutdown"
)

// All allowed values of VolumeStatus enum
var AllowedVolumeStatusEnumValues = []VolumeStatus{
	"Unknown",
	"Online",
	"Degraded",
	"Faulted",
	"Shutdown",
}

func (v *VolumeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeStatus(value)
	for _, existing := range AllowedVolumeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeStatus", value)
}

// NewVolumeStatusFromValue returns a pointer to a valid VolumeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeStatusFromValue(v string) (*VolumeStatus, error) {
	ev := VolumeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeStatus: valid values are %v", v, AllowedVolumeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeStatus) IsValid() bool {
	for _, existing := range AllowedVolumeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeStatus value
func (v VolumeStatus) Ptr() *VolumeStatus {
	return &v
}

type NullableVolumeStatus struct {
	value *VolumeStatus
	isSet bool
}

func (v NullableVolumeStatus) Get() *VolumeStatus {
	return v.value
}

func (v *NullableVolumeStatus) Set(val *VolumeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeStatus(val *VolumeStatus) *NullableVolumeStatus {
	return &NullableVolumeStatus{value: val, isSet: true}
}

func (v NullableVolumeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

