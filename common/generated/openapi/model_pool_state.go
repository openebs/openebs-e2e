/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PoolState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolState{}

// PoolState State of a pool, as reported by io-engine
type PoolState struct {
	// size of the pool in bytes
	Capacity int64 `json:"capacity"`
	// absolute disk paths claimed by the pool
	Disks []string `json:"disks"`
	// storage pool identifier
	Id string `json:"id"`
	// storage node identifier
	Node string `json:"node"`
	Status PoolStatus `json:"status"`
	// used bytes from the pool
	Used int64 `json:"used"`
	// accrued size of all replicas contained in this pool
	Committed *int64 `json:"committed,omitempty"`
}

type _PoolState PoolState

// NewPoolState instantiates a new PoolState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolState(capacity int64, disks []string, id string, node string, status PoolStatus, used int64) *PoolState {
	this := PoolState{}
	this.Capacity = capacity
	this.Disks = disks
	this.Id = id
	this.Node = node
	this.Status = status
	this.Used = used
	return &this
}

// NewPoolStateWithDefaults instantiates a new PoolState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolStateWithDefaults() *PoolState {
	this := PoolState{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *PoolState) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *PoolState) GetCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *PoolState) SetCapacity(v int64) {
	o.Capacity = v
}

// GetDisks returns the Disks field value
func (o *PoolState) GetDisks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *PoolState) GetDisksOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *PoolState) SetDisks(v []string) {
	o.Disks = v
}

// GetId returns the Id field value
func (o *PoolState) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PoolState) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PoolState) SetId(v string) {
	o.Id = v
}

// GetNode returns the Node field value
func (o *PoolState) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *PoolState) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *PoolState) SetNode(v string) {
	o.Node = v
}

// GetStatus returns the Status field value
func (o *PoolState) GetStatus() PoolStatus {
	if o == nil {
		var ret PoolStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PoolState) GetStatusOk() (*PoolStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PoolState) SetStatus(v PoolStatus) {
	o.Status = v
}

// GetUsed returns the Used field value
func (o *PoolState) GetUsed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *PoolState) GetUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *PoolState) SetUsed(v int64) {
	o.Used = v
}

// GetCommitted returns the Committed field value if set, zero value otherwise.
func (o *PoolState) GetCommitted() int64 {
	if o == nil || IsNil(o.Committed) {
		var ret int64
		return ret
	}
	return *o.Committed
}

// GetCommittedOk returns a tuple with the Committed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolState) GetCommittedOk() (*int64, bool) {
	if o == nil || IsNil(o.Committed) {
		return nil, false
	}
	return o.Committed, true
}

// HasCommitted returns a boolean if a field has been set.
func (o *PoolState) HasCommitted() bool {
	if o != nil && !IsNil(o.Committed) {
		return true
	}

	return false
}

// SetCommitted gets a reference to the given int64 and assigns it to the Committed field.
func (o *PoolState) SetCommitted(v int64) {
	o.Committed = &v
}

func (o PoolState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity"] = o.Capacity
	toSerialize["disks"] = o.Disks
	toSerialize["id"] = o.Id
	toSerialize["node"] = o.Node
	toSerialize["status"] = o.Status
	toSerialize["used"] = o.Used
	if !IsNil(o.Committed) {
		toSerialize["committed"] = o.Committed
	}
	return toSerialize, nil
}

func (o *PoolState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity",
		"disks",
		"id",
		"node",
		"status",
		"used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPoolState := _PoolState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPoolState)

	if err != nil {
		return err
	}

	*o = PoolState(varPoolState)

	return err
}

type NullablePoolState struct {
	value *PoolState
	isSet bool
}

func (v NullablePoolState) Get() *PoolState {
	return v.value
}

func (v *NullablePoolState) Set(val *PoolState) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolState) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolState(val *PoolState) *NullablePoolState {
	return &NullablePoolState{value: val, isSet: true}
}

func (v NullablePoolState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


