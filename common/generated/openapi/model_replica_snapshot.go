/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplicaSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaSnapshot{}

// ReplicaSnapshot Replica Snapshot information.
type ReplicaSnapshot struct {
	Uuid string `json:"uuid"`
	SourceId string `json:"source_id"`
	Status SpecStatus `json:"status"`
}

type _ReplicaSnapshot ReplicaSnapshot

// NewReplicaSnapshot instantiates a new ReplicaSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaSnapshot(uuid string, sourceId string, status SpecStatus) *ReplicaSnapshot {
	this := ReplicaSnapshot{}
	this.Uuid = uuid
	this.SourceId = sourceId
	this.Status = status
	return &this
}

// NewReplicaSnapshotWithDefaults instantiates a new ReplicaSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaSnapshotWithDefaults() *ReplicaSnapshot {
	this := ReplicaSnapshot{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *ReplicaSnapshot) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ReplicaSnapshot) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ReplicaSnapshot) SetUuid(v string) {
	o.Uuid = v
}

// GetSourceId returns the SourceId field value
func (o *ReplicaSnapshot) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *ReplicaSnapshot) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *ReplicaSnapshot) SetSourceId(v string) {
	o.SourceId = v
}

// GetStatus returns the Status field value
func (o *ReplicaSnapshot) GetStatus() SpecStatus {
	if o == nil {
		var ret SpecStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ReplicaSnapshot) GetStatusOk() (*SpecStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ReplicaSnapshot) SetStatus(v SpecStatus) {
	o.Status = v
}

func (o ReplicaSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["source_id"] = o.SourceId
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ReplicaSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"source_id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplicaSnapshot := _ReplicaSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplicaSnapshot)

	if err != nil {
		return err
	}

	*o = ReplicaSnapshot(varReplicaSnapshot)

	return err
}

type NullableReplicaSnapshot struct {
	value *ReplicaSnapshot
	isSet bool
}

func (v NullableReplicaSnapshot) Get() *ReplicaSnapshot {
	return v.value
}

func (v *NullableReplicaSnapshot) Set(val *ReplicaSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSnapshot(val *ReplicaSnapshot) *NullableReplicaSnapshot {
	return &NullableReplicaSnapshot{value: val, isSet: true}
}

func (v NullableReplicaSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


