/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReplicaSnapshotState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaSnapshotState{}

// ReplicaSnapshotState Replica Snapshot state information.
type ReplicaSnapshotState struct {
	Online *OnlineReplicaSnapshotState `json:"online,omitempty"`
	Offline *OfflineReplicaSnapshotState `json:"offline,omitempty"`
}

// NewReplicaSnapshotState instantiates a new ReplicaSnapshotState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaSnapshotState() *ReplicaSnapshotState {
	this := ReplicaSnapshotState{}
	return &this
}

// NewReplicaSnapshotStateWithDefaults instantiates a new ReplicaSnapshotState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaSnapshotStateWithDefaults() *ReplicaSnapshotState {
	this := ReplicaSnapshotState{}
	return &this
}

// GetOnline returns the Online field value if set, zero value otherwise.
func (o *ReplicaSnapshotState) GetOnline() OnlineReplicaSnapshotState {
	if o == nil || IsNil(o.Online) {
		var ret OnlineReplicaSnapshotState
		return ret
	}
	return *o.Online
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaSnapshotState) GetOnlineOk() (*OnlineReplicaSnapshotState, bool) {
	if o == nil || IsNil(o.Online) {
		return nil, false
	}
	return o.Online, true
}

// HasOnline returns a boolean if a field has been set.
func (o *ReplicaSnapshotState) HasOnline() bool {
	if o != nil && !IsNil(o.Online) {
		return true
	}

	return false
}

// SetOnline gets a reference to the given OnlineReplicaSnapshotState and assigns it to the Online field.
func (o *ReplicaSnapshotState) SetOnline(v OnlineReplicaSnapshotState) {
	o.Online = &v
}

// GetOffline returns the Offline field value if set, zero value otherwise.
func (o *ReplicaSnapshotState) GetOffline() OfflineReplicaSnapshotState {
	if o == nil || IsNil(o.Offline) {
		var ret OfflineReplicaSnapshotState
		return ret
	}
	return *o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaSnapshotState) GetOfflineOk() (*OfflineReplicaSnapshotState, bool) {
	if o == nil || IsNil(o.Offline) {
		return nil, false
	}
	return o.Offline, true
}

// HasOffline returns a boolean if a field has been set.
func (o *ReplicaSnapshotState) HasOffline() bool {
	if o != nil && !IsNil(o.Offline) {
		return true
	}

	return false
}

// SetOffline gets a reference to the given OfflineReplicaSnapshotState and assigns it to the Offline field.
func (o *ReplicaSnapshotState) SetOffline(v OfflineReplicaSnapshotState) {
	o.Offline = &v
}

func (o ReplicaSnapshotState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaSnapshotState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Online) {
		toSerialize["online"] = o.Online
	}
	if !IsNil(o.Offline) {
		toSerialize["offline"] = o.Offline
	}
	return toSerialize, nil
}

type NullableReplicaSnapshotState struct {
	value *ReplicaSnapshotState
	isSet bool
}

func (v NullableReplicaSnapshotState) Get() *ReplicaSnapshotState {
	return v.value
}

func (v *NullableReplicaSnapshotState) Set(val *ReplicaSnapshotState) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSnapshotState) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSnapshotState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSnapshotState(val *ReplicaSnapshotState) *NullableReplicaSnapshotState {
	return &NullableReplicaSnapshotState{value: val, isSet: true}
}

func (v NullableReplicaSnapshotState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSnapshotState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


