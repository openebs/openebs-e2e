/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeUsage{}

// VolumeUsage Volume space usage
type VolumeUsage struct {
	// Capacity of the volume in bytes.
	Capacity int64 `json:"capacity"`
	// -| Allocated size in bytes, related the largest healthy replica, including snapshots. For example, if a volume has 2 replicas, each with 1MiB allocated space, then this field will be 1MiB.
	Allocated int64 `json:"allocated"`
	// -| Allocated size in bytes, related to the largest healthy replica, excluding snapshots.
	AllocatedReplica int64 `json:"allocated_replica"`
	// -| Allocated size in bytes, related the healthy replica with the highest snapshot usage.
	AllocatedSnapshots int64 `json:"allocated_snapshots"`
	// -| For a restored/cloned volume, allocated size in bytes, related to the healthy replica with largest parent snapshot allocation.
	AllocatedAllSnapshots int64 `json:"allocated_all_snapshots"`
	// -| Allocated size in bytes, accrued from all the replicas, including snapshots. For example, if a volume has 2 replicas, each with 1MiB allocated space, then this field will be 2MiB.
	TotalAllocated int64 `json:"total_allocated"`
	// -| Allocated size in bytes, accrued from all the replicas, excluding snapshots.
	TotalAllocatedReplicas interface{} `json:"total_allocated_replicas"`
	// -| Allocated size in bytes, accrued from all the replica's snapshots.
	TotalAllocatedSnapshots int64 `json:"total_allocated_snapshots"`
}

type _VolumeUsage VolumeUsage

// NewVolumeUsage instantiates a new VolumeUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeUsage(capacity int64, allocated int64, allocatedReplica int64, allocatedSnapshots int64, allocatedAllSnapshots int64, totalAllocated int64, totalAllocatedReplicas interface{}, totalAllocatedSnapshots int64) *VolumeUsage {
	this := VolumeUsage{}
	this.Capacity = capacity
	this.Allocated = allocated
	this.AllocatedReplica = allocatedReplica
	this.AllocatedSnapshots = allocatedSnapshots
	this.AllocatedAllSnapshots = allocatedAllSnapshots
	this.TotalAllocated = totalAllocated
	this.TotalAllocatedReplicas = totalAllocatedReplicas
	this.TotalAllocatedSnapshots = totalAllocatedSnapshots
	return &this
}

// NewVolumeUsageWithDefaults instantiates a new VolumeUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeUsageWithDefaults() *VolumeUsage {
	this := VolumeUsage{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *VolumeUsage) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *VolumeUsage) SetCapacity(v int64) {
	o.Capacity = v
}

// GetAllocated returns the Allocated field value
func (o *VolumeUsage) GetAllocated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetAllocatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allocated, true
}

// SetAllocated sets field value
func (o *VolumeUsage) SetAllocated(v int64) {
	o.Allocated = v
}

// GetAllocatedReplica returns the AllocatedReplica field value
func (o *VolumeUsage) GetAllocatedReplica() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedReplica
}

// GetAllocatedReplicaOk returns a tuple with the AllocatedReplica field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetAllocatedReplicaOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedReplica, true
}

// SetAllocatedReplica sets field value
func (o *VolumeUsage) SetAllocatedReplica(v int64) {
	o.AllocatedReplica = v
}

// GetAllocatedSnapshots returns the AllocatedSnapshots field value
func (o *VolumeUsage) GetAllocatedSnapshots() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedSnapshots
}

// GetAllocatedSnapshotsOk returns a tuple with the AllocatedSnapshots field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetAllocatedSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedSnapshots, true
}

// SetAllocatedSnapshots sets field value
func (o *VolumeUsage) SetAllocatedSnapshots(v int64) {
	o.AllocatedSnapshots = v
}

// GetAllocatedAllSnapshots returns the AllocatedAllSnapshots field value
func (o *VolumeUsage) GetAllocatedAllSnapshots() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedAllSnapshots
}

// GetAllocatedAllSnapshotsOk returns a tuple with the AllocatedAllSnapshots field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetAllocatedAllSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedAllSnapshots, true
}

// SetAllocatedAllSnapshots sets field value
func (o *VolumeUsage) SetAllocatedAllSnapshots(v int64) {
	o.AllocatedAllSnapshots = v
}

// GetTotalAllocated returns the TotalAllocated field value
func (o *VolumeUsage) GetTotalAllocated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalAllocated
}

// GetTotalAllocatedOk returns a tuple with the TotalAllocated field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetTotalAllocatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAllocated, true
}

// SetTotalAllocated sets field value
func (o *VolumeUsage) SetTotalAllocated(v int64) {
	o.TotalAllocated = v
}

// GetTotalAllocatedReplicas returns the TotalAllocatedReplicas field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VolumeUsage) GetTotalAllocatedReplicas() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TotalAllocatedReplicas
}

// GetTotalAllocatedReplicasOk returns a tuple with the TotalAllocatedReplicas field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeUsage) GetTotalAllocatedReplicasOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TotalAllocatedReplicas) {
		return nil, false
	}
	return &o.TotalAllocatedReplicas, true
}

// SetTotalAllocatedReplicas sets field value
func (o *VolumeUsage) SetTotalAllocatedReplicas(v interface{}) {
	o.TotalAllocatedReplicas = v
}

// GetTotalAllocatedSnapshots returns the TotalAllocatedSnapshots field value
func (o *VolumeUsage) GetTotalAllocatedSnapshots() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalAllocatedSnapshots
}

// GetTotalAllocatedSnapshotsOk returns a tuple with the TotalAllocatedSnapshots field value
// and a boolean to check if the value has been set.
func (o *VolumeUsage) GetTotalAllocatedSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAllocatedSnapshots, true
}

// SetTotalAllocatedSnapshots sets field value
func (o *VolumeUsage) SetTotalAllocatedSnapshots(v int64) {
	o.TotalAllocatedSnapshots = v
}

func (o VolumeUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity"] = o.Capacity
	toSerialize["allocated"] = o.Allocated
	toSerialize["allocated_replica"] = o.AllocatedReplica
	toSerialize["allocated_snapshots"] = o.AllocatedSnapshots
	toSerialize["allocated_all_snapshots"] = o.AllocatedAllSnapshots
	toSerialize["total_allocated"] = o.TotalAllocated
	if o.TotalAllocatedReplicas != nil {
		toSerialize["total_allocated_replicas"] = o.TotalAllocatedReplicas
	}
	toSerialize["total_allocated_snapshots"] = o.TotalAllocatedSnapshots
	return toSerialize, nil
}

func (o *VolumeUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity",
		"allocated",
		"allocated_replica",
		"allocated_snapshots",
		"allocated_all_snapshots",
		"total_allocated",
		"total_allocated_replicas",
		"total_allocated_snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeUsage := _VolumeUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeUsage)

	if err != nil {
		return err
	}

	*o = VolumeUsage(varVolumeUsage)

	return err
}

type NullableVolumeUsage struct {
	value *VolumeUsage
	isSet bool
}

func (v NullableVolumeUsage) Get() *VolumeUsage {
	return v.value
}

func (v *NullableVolumeUsage) Set(val *VolumeUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeUsage(val *VolumeUsage) *NullableVolumeUsage {
	return &NullableVolumeUsage{value: val, isSet: true}
}

func (v NullableVolumeUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


