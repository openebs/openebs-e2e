/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReplicaSnapshotStatus Current ReplicaSnapshot status
type ReplicaSnapshotStatus string

// List of ReplicaSnapshotStatus
const (
	REPLICASNAPSHOTSTATUS_UNKNOWN ReplicaSnapshotStatus = "Unknown"
	REPLICASNAPSHOTSTATUS_ONLINE  ReplicaSnapshotStatus = "Online"
	REPLICASNAPSHOTSTATUS_OFFLINE ReplicaSnapshotStatus = "Offline"
)

// All allowed values of ReplicaSnapshotStatus enum
var AllowedReplicaSnapshotStatusEnumValues = []ReplicaSnapshotStatus{
	"Unknown",
	"Online",
	"Offline",
}

func (v *ReplicaSnapshotStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaSnapshotStatus(value)
	for _, existing := range AllowedReplicaSnapshotStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaSnapshotStatus", value)
}

// NewReplicaSnapshotStatusFromValue returns a pointer to a valid ReplicaSnapshotStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaSnapshotStatusFromValue(v string) (*ReplicaSnapshotStatus, error) {
	ev := ReplicaSnapshotStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaSnapshotStatus: valid values are %v", v, AllowedReplicaSnapshotStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaSnapshotStatus) IsValid() bool {
	for _, existing := range AllowedReplicaSnapshotStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaSnapshotStatus value
func (v ReplicaSnapshotStatus) Ptr() *ReplicaSnapshotStatus {
	return &v
}

type NullableReplicaSnapshotStatus struct {
	value *ReplicaSnapshotStatus
	isSet bool
}

func (v NullableReplicaSnapshotStatus) Get() *ReplicaSnapshotStatus {
	return v.value
}

func (v *NullableReplicaSnapshotStatus) Set(val *ReplicaSnapshotStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSnapshotStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSnapshotStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSnapshotStatus(val *ReplicaSnapshotStatus) *NullableReplicaSnapshotStatus {
	return &NullableReplicaSnapshotStatus{value: val, isSet: true}
}

func (v NullableReplicaSnapshotStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSnapshotStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

