/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Nexus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nexus{}

// Nexus Nexus information
type Nexus struct {
	// Array of Nexus Children
	Children []Child `json:"children"`
	// URI of the device for the volume (missing if not published).  Missing property and empty string are treated the same.
	DeviceUri string `json:"deviceUri"`
	// id of the io-engine instance
	Node string `json:"node"`
	// total number of rebuild tasks
	Rebuilds int32 `json:"rebuilds"`
	Protocol Protocol `json:"protocol"`
	// size of the volume in bytes
	Size int64 `json:"size"`
	State NexusState `json:"state"`
	// uuid of the nexus
	Uuid string `json:"uuid"`
}

type _Nexus Nexus

// NewNexus instantiates a new Nexus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNexus(children []Child, deviceUri string, node string, rebuilds int32, protocol Protocol, size int64, state NexusState, uuid string) *Nexus {
	this := Nexus{}
	this.Children = children
	this.DeviceUri = deviceUri
	this.Node = node
	this.Rebuilds = rebuilds
	this.Protocol = protocol
	this.Size = size
	this.State = state
	this.Uuid = uuid
	return &this
}

// NewNexusWithDefaults instantiates a new Nexus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNexusWithDefaults() *Nexus {
	this := Nexus{}
	return &this
}

// GetChildren returns the Children field value
func (o *Nexus) GetChildren() []Child {
	if o == nil {
		var ret []Child
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetChildrenOk() ([]Child, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *Nexus) SetChildren(v []Child) {
	o.Children = v
}

// GetDeviceUri returns the DeviceUri field value
func (o *Nexus) GetDeviceUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceUri
}

// GetDeviceUriOk returns a tuple with the DeviceUri field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetDeviceUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceUri, true
}

// SetDeviceUri sets field value
func (o *Nexus) SetDeviceUri(v string) {
	o.DeviceUri = v
}

// GetNode returns the Node field value
func (o *Nexus) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *Nexus) SetNode(v string) {
	o.Node = v
}

// GetRebuilds returns the Rebuilds field value
func (o *Nexus) GetRebuilds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rebuilds
}

// GetRebuildsOk returns a tuple with the Rebuilds field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetRebuildsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rebuilds, true
}

// SetRebuilds sets field value
func (o *Nexus) SetRebuilds(v int32) {
	o.Rebuilds = v
}

// GetProtocol returns the Protocol field value
func (o *Nexus) GetProtocol() Protocol {
	if o == nil {
		var ret Protocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetProtocolOk() (*Protocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *Nexus) SetProtocol(v Protocol) {
	o.Protocol = v
}

// GetSize returns the Size field value
func (o *Nexus) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Nexus) SetSize(v int64) {
	o.Size = v
}

// GetState returns the State field value
func (o *Nexus) GetState() NexusState {
	if o == nil {
		var ret NexusState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetStateOk() (*NexusState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Nexus) SetState(v NexusState) {
	o.State = v
}

// GetUuid returns the Uuid field value
func (o *Nexus) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Nexus) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Nexus) SetUuid(v string) {
	o.Uuid = v
}

func (o Nexus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nexus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["children"] = o.Children
	toSerialize["deviceUri"] = o.DeviceUri
	toSerialize["node"] = o.Node
	toSerialize["rebuilds"] = o.Rebuilds
	toSerialize["protocol"] = o.Protocol
	toSerialize["size"] = o.Size
	toSerialize["state"] = o.State
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *Nexus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"children",
		"deviceUri",
		"node",
		"rebuilds",
		"protocol",
		"size",
		"state",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNexus := _Nexus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNexus)

	if err != nil {
		return err
	}

	*o = Nexus(varNexus)

	return err
}

type NullableNexus struct {
	value *Nexus
	isSet bool
}

func (v NullableNexus) Get() *Nexus {
	return v.value
}

func (v *NullableNexus) Set(val *Nexus) {
	v.value = val
	v.isSet = true
}

func (v NullableNexus) IsSet() bool {
	return v.isSet
}

func (v *NullableNexus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexus(val *Nexus) *NullableNexus {
	return &NullableNexus{value: val, isSet: true}
}

func (v NullableNexus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


