/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RebuildHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RebuildHistory{}

// RebuildHistory struct for RebuildHistory
type RebuildHistory struct {
	// Id of the volume target
	TargetUuid string `json:"targetUuid"`
	// Array of rebuild record
	Records []RebuildRecord `json:"records"`
}

type _RebuildHistory RebuildHistory

// NewRebuildHistory instantiates a new RebuildHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebuildHistory(targetUuid string, records []RebuildRecord) *RebuildHistory {
	this := RebuildHistory{}
	this.TargetUuid = targetUuid
	this.Records = records
	return &this
}

// NewRebuildHistoryWithDefaults instantiates a new RebuildHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebuildHistoryWithDefaults() *RebuildHistory {
	this := RebuildHistory{}
	return &this
}

// GetTargetUuid returns the TargetUuid field value
func (o *RebuildHistory) GetTargetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUuid
}

// GetTargetUuidOk returns a tuple with the TargetUuid field value
// and a boolean to check if the value has been set.
func (o *RebuildHistory) GetTargetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetUuid, true
}

// SetTargetUuid sets field value
func (o *RebuildHistory) SetTargetUuid(v string) {
	o.TargetUuid = v
}

// GetRecords returns the Records field value
func (o *RebuildHistory) GetRecords() []RebuildRecord {
	if o == nil {
		var ret []RebuildRecord
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *RebuildHistory) GetRecordsOk() ([]RebuildRecord, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *RebuildHistory) SetRecords(v []RebuildRecord) {
	o.Records = v
}

func (o RebuildHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RebuildHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetUuid"] = o.TargetUuid
	toSerialize["records"] = o.Records
	return toSerialize, nil
}

func (o *RebuildHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetUuid",
		"records",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRebuildHistory := _RebuildHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRebuildHistory)

	if err != nil {
		return err
	}

	*o = RebuildHistory(varRebuildHistory)

	return err
}

type NullableRebuildHistory struct {
	value *RebuildHistory
	isSet bool
}

func (v NullableRebuildHistory) Get() *RebuildHistory {
	return v.value
}

func (v *NullableRebuildHistory) Set(val *RebuildHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableRebuildHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableRebuildHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebuildHistory(val *RebuildHistory) *NullableRebuildHistory {
	return &NullableRebuildHistory{value: val, isSet: true}
}

func (v NullableRebuildHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebuildHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


