/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateReplicaBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateReplicaBody{}

// CreateReplicaBody Create Replica Body
type CreateReplicaBody struct {
	Share *ReplicaShareProtocol `json:"share,omitempty"`
	AllowedHosts []string `json:"allowed-hosts,omitempty"`
	// size of the replica in bytes
	Size int64 `json:"size"`
	// thin provisioning
	Thin bool `json:"thin"`
}

type _CreateReplicaBody CreateReplicaBody

// NewCreateReplicaBody instantiates a new CreateReplicaBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReplicaBody(size int64, thin bool) *CreateReplicaBody {
	this := CreateReplicaBody{}
	this.Size = size
	this.Thin = thin
	return &this
}

// NewCreateReplicaBodyWithDefaults instantiates a new CreateReplicaBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReplicaBodyWithDefaults() *CreateReplicaBody {
	this := CreateReplicaBody{}
	return &this
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *CreateReplicaBody) GetShare() ReplicaShareProtocol {
	if o == nil || IsNil(o.Share) {
		var ret ReplicaShareProtocol
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReplicaBody) GetShareOk() (*ReplicaShareProtocol, bool) {
	if o == nil || IsNil(o.Share) {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *CreateReplicaBody) HasShare() bool {
	if o != nil && !IsNil(o.Share) {
		return true
	}

	return false
}

// SetShare gets a reference to the given ReplicaShareProtocol and assigns it to the Share field.
func (o *CreateReplicaBody) SetShare(v ReplicaShareProtocol) {
	o.Share = &v
}

// GetAllowedHosts returns the AllowedHosts field value if set, zero value otherwise.
func (o *CreateReplicaBody) GetAllowedHosts() []string {
	if o == nil || IsNil(o.AllowedHosts) {
		var ret []string
		return ret
	}
	return o.AllowedHosts
}

// GetAllowedHostsOk returns a tuple with the AllowedHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReplicaBody) GetAllowedHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedHosts) {
		return nil, false
	}
	return o.AllowedHosts, true
}

// HasAllowedHosts returns a boolean if a field has been set.
func (o *CreateReplicaBody) HasAllowedHosts() bool {
	if o != nil && !IsNil(o.AllowedHosts) {
		return true
	}

	return false
}

// SetAllowedHosts gets a reference to the given []string and assigns it to the AllowedHosts field.
func (o *CreateReplicaBody) SetAllowedHosts(v []string) {
	o.AllowedHosts = v
}

// GetSize returns the Size field value
func (o *CreateReplicaBody) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreateReplicaBody) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreateReplicaBody) SetSize(v int64) {
	o.Size = v
}

// GetThin returns the Thin field value
func (o *CreateReplicaBody) GetThin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Thin
}

// GetThinOk returns a tuple with the Thin field value
// and a boolean to check if the value has been set.
func (o *CreateReplicaBody) GetThinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thin, true
}

// SetThin sets field value
func (o *CreateReplicaBody) SetThin(v bool) {
	o.Thin = v
}

func (o CreateReplicaBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReplicaBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Share) {
		toSerialize["share"] = o.Share
	}
	if !IsNil(o.AllowedHosts) {
		toSerialize["allowed-hosts"] = o.AllowedHosts
	}
	toSerialize["size"] = o.Size
	toSerialize["thin"] = o.Thin
	return toSerialize, nil
}

func (o *CreateReplicaBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
		"thin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateReplicaBody := _CreateReplicaBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateReplicaBody)

	if err != nil {
		return err
	}

	*o = CreateReplicaBody(varCreateReplicaBody)

	return err
}

type NullableCreateReplicaBody struct {
	value *CreateReplicaBody
	isSet bool
}

func (v NullableCreateReplicaBody) Get() *CreateReplicaBody {
	return v.value
}

func (v *NullableCreateReplicaBody) Set(val *CreateReplicaBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReplicaBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReplicaBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReplicaBody(val *CreateReplicaBody) *NullableCreateReplicaBody {
	return &NullableCreateReplicaBody{value: val, isSet: true}
}

func (v NullableCreateReplicaBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReplicaBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


