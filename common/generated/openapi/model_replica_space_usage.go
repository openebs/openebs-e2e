/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplicaSpaceUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicaSpaceUsage{}

// ReplicaSpaceUsage Replica space usage information. Useful for capacity management, eg: figure out how much of a thin-provisioned replica is allocated. 
type ReplicaSpaceUsage struct {
	// Replica capacity in bytes.
	CapacityBytes int64 `json:"capacity_bytes"`
	// Amount of actually allocated disk space for this replica in bytes.
	AllocatedBytes int64 `json:"allocated_bytes"`
	// Amount of actually allocated disk space for this replica's snapshots in bytes.
	AllocatedBytesSnapshots int64 `json:"allocated_bytes_snapshots"`
	// Amount of actually allocated disk space for this replica's snapshots and its predecessors in bytes. For a restored/cloned replica this includes snapshots from the parent source. 
	AllocatedBytesAllSnapshots *int64 `json:"allocated_bytes_all_snapshots,omitempty"`
	// Cluster size in bytes.
	ClusterSize int64 `json:"cluster_size"`
	// Total number of clusters.
	Clusters int64 `json:"clusters"`
	// Number of actually used clusters.
	AllocatedClusters int64 `json:"allocated_clusters"`
}

type _ReplicaSpaceUsage ReplicaSpaceUsage

// NewReplicaSpaceUsage instantiates a new ReplicaSpaceUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaSpaceUsage(capacityBytes int64, allocatedBytes int64, allocatedBytesSnapshots int64, clusterSize int64, clusters int64, allocatedClusters int64) *ReplicaSpaceUsage {
	this := ReplicaSpaceUsage{}
	this.CapacityBytes = capacityBytes
	this.AllocatedBytes = allocatedBytes
	this.AllocatedBytesSnapshots = allocatedBytesSnapshots
	var allocatedBytesAllSnapshots int64 = 0
	this.AllocatedBytesAllSnapshots = &allocatedBytesAllSnapshots
	this.ClusterSize = clusterSize
	this.Clusters = clusters
	this.AllocatedClusters = allocatedClusters
	return &this
}

// NewReplicaSpaceUsageWithDefaults instantiates a new ReplicaSpaceUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaSpaceUsageWithDefaults() *ReplicaSpaceUsage {
	this := ReplicaSpaceUsage{}
	var allocatedBytesSnapshots int64 = 0
	this.AllocatedBytesSnapshots = allocatedBytesSnapshots
	var allocatedBytesAllSnapshots int64 = 0
	this.AllocatedBytesAllSnapshots = &allocatedBytesAllSnapshots
	return &this
}

// GetCapacityBytes returns the CapacityBytes field value
func (o *ReplicaSpaceUsage) GetCapacityBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CapacityBytes
}

// GetCapacityBytesOk returns a tuple with the CapacityBytes field value
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetCapacityBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapacityBytes, true
}

// SetCapacityBytes sets field value
func (o *ReplicaSpaceUsage) SetCapacityBytes(v int64) {
	o.CapacityBytes = v
}

// GetAllocatedBytes returns the AllocatedBytes field value
func (o *ReplicaSpaceUsage) GetAllocatedBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedBytes
}

// GetAllocatedBytesOk returns a tuple with the AllocatedBytes field value
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetAllocatedBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedBytes, true
}

// SetAllocatedBytes sets field value
func (o *ReplicaSpaceUsage) SetAllocatedBytes(v int64) {
	o.AllocatedBytes = v
}

// GetAllocatedBytesSnapshots returns the AllocatedBytesSnapshots field value
func (o *ReplicaSpaceUsage) GetAllocatedBytesSnapshots() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedBytesSnapshots
}

// GetAllocatedBytesSnapshotsOk returns a tuple with the AllocatedBytesSnapshots field value
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetAllocatedBytesSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedBytesSnapshots, true
}

// SetAllocatedBytesSnapshots sets field value
func (o *ReplicaSpaceUsage) SetAllocatedBytesSnapshots(v int64) {
	o.AllocatedBytesSnapshots = v
}

// GetAllocatedBytesAllSnapshots returns the AllocatedBytesAllSnapshots field value if set, zero value otherwise.
func (o *ReplicaSpaceUsage) GetAllocatedBytesAllSnapshots() int64 {
	if o == nil || IsNil(o.AllocatedBytesAllSnapshots) {
		var ret int64
		return ret
	}
	return *o.AllocatedBytesAllSnapshots
}

// GetAllocatedBytesAllSnapshotsOk returns a tuple with the AllocatedBytesAllSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetAllocatedBytesAllSnapshotsOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedBytesAllSnapshots) {
		return nil, false
	}
	return o.AllocatedBytesAllSnapshots, true
}

// HasAllocatedBytesAllSnapshots returns a boolean if a field has been set.
func (o *ReplicaSpaceUsage) HasAllocatedBytesAllSnapshots() bool {
	if o != nil && !IsNil(o.AllocatedBytesAllSnapshots) {
		return true
	}

	return false
}

// SetAllocatedBytesAllSnapshots gets a reference to the given int64 and assigns it to the AllocatedBytesAllSnapshots field.
func (o *ReplicaSpaceUsage) SetAllocatedBytesAllSnapshots(v int64) {
	o.AllocatedBytesAllSnapshots = &v
}

// GetClusterSize returns the ClusterSize field value
func (o *ReplicaSpaceUsage) GetClusterSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClusterSize
}

// GetClusterSizeOk returns a tuple with the ClusterSize field value
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetClusterSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterSize, true
}

// SetClusterSize sets field value
func (o *ReplicaSpaceUsage) SetClusterSize(v int64) {
	o.ClusterSize = v
}

// GetClusters returns the Clusters field value
func (o *ReplicaSpaceUsage) GetClusters() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetClustersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Clusters, true
}

// SetClusters sets field value
func (o *ReplicaSpaceUsage) SetClusters(v int64) {
	o.Clusters = v
}

// GetAllocatedClusters returns the AllocatedClusters field value
func (o *ReplicaSpaceUsage) GetAllocatedClusters() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AllocatedClusters
}

// GetAllocatedClustersOk returns a tuple with the AllocatedClusters field value
// and a boolean to check if the value has been set.
func (o *ReplicaSpaceUsage) GetAllocatedClustersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedClusters, true
}

// SetAllocatedClusters sets field value
func (o *ReplicaSpaceUsage) SetAllocatedClusters(v int64) {
	o.AllocatedClusters = v
}

func (o ReplicaSpaceUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicaSpaceUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity_bytes"] = o.CapacityBytes
	toSerialize["allocated_bytes"] = o.AllocatedBytes
	toSerialize["allocated_bytes_snapshots"] = o.AllocatedBytesSnapshots
	if !IsNil(o.AllocatedBytesAllSnapshots) {
		toSerialize["allocated_bytes_all_snapshots"] = o.AllocatedBytesAllSnapshots
	}
	toSerialize["cluster_size"] = o.ClusterSize
	toSerialize["clusters"] = o.Clusters
	toSerialize["allocated_clusters"] = o.AllocatedClusters
	return toSerialize, nil
}

func (o *ReplicaSpaceUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity_bytes",
		"allocated_bytes",
		"allocated_bytes_snapshots",
		"cluster_size",
		"clusters",
		"allocated_clusters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplicaSpaceUsage := _ReplicaSpaceUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplicaSpaceUsage)

	if err != nil {
		return err
	}

	*o = ReplicaSpaceUsage(varReplicaSpaceUsage)

	return err
}

type NullableReplicaSpaceUsage struct {
	value *ReplicaSpaceUsage
	isSet bool
}

func (v NullableReplicaSpaceUsage) Get() *ReplicaSpaceUsage {
	return v.value
}

func (v *NullableReplicaSpaceUsage) Set(val *ReplicaSpaceUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSpaceUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSpaceUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSpaceUsage(val *ReplicaSpaceUsage) *NullableReplicaSpaceUsage {
	return &NullableReplicaSpaceUsage{value: val, isSet: true}
}

func (v NullableReplicaSpaceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSpaceUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


