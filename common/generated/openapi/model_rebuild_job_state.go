/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RebuildJobState State of the rebuild job
type RebuildJobState string

// List of RebuildJobState
const (
	INIT RebuildJobState = "Init"
	REBUILDING RebuildJobState = "Rebuilding"
	STOPPED RebuildJobState = "Stopped"
	PAUSED RebuildJobState = "Paused"
	FAILED RebuildJobState = "Failed"
	COMPLETED RebuildJobState = "Completed"
)

// All allowed values of RebuildJobState enum
var AllowedRebuildJobStateEnumValues = []RebuildJobState{
	"Init",
	"Rebuilding",
	"Stopped",
	"Paused",
	"Failed",
	"Completed",
}

func (v *RebuildJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RebuildJobState(value)
	for _, existing := range AllowedRebuildJobStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RebuildJobState", value)
}

// NewRebuildJobStateFromValue returns a pointer to a valid RebuildJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRebuildJobStateFromValue(v string) (*RebuildJobState, error) {
	ev := RebuildJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RebuildJobState: valid values are %v", v, AllowedRebuildJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RebuildJobState) IsValid() bool {
	for _, existing := range AllowedRebuildJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RebuildJobState value
func (v RebuildJobState) Ptr() *RebuildJobState {
	return &v
}

type NullableRebuildJobState struct {
	value *RebuildJobState
	isSet bool
}

func (v NullableRebuildJobState) Get() *RebuildJobState {
	return v.value
}

func (v *NullableRebuildJobState) Set(val *RebuildJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableRebuildJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableRebuildJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebuildJobState(val *RebuildJobState) *NullableRebuildJobState {
	return &NullableRebuildJobState{value: val, isSet: true}
}

func (v NullableRebuildJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebuildJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

