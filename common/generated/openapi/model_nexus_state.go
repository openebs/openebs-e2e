/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NexusState State of the Nexus
type NexusState string

// List of NexusState
const (
	NEXUSSTATE_UNKNOWN       NexusState = "Unknown"
	NEXUSSTATE_ONLINE        NexusState = "Online"
	NEXUSSTATE_DEGRADED      NexusState = "Degraded"
	NEXUSSTATE_FAULTED       NexusState = "Faulted"
	NEXUSSTATE_SHUTTING_DOWN NexusState = "ShuttingDown"
	NEXUSSTATE_SHUTDOWN      NexusState = "Shutdown"
)

// All allowed values of NexusState enum
var AllowedNexusStateEnumValues = []NexusState{
	"Unknown",
	"Online",
	"Degraded",
	"Faulted",
	"ShuttingDown",
	"Shutdown",
}

func (v *NexusState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NexusState(value)
	for _, existing := range AllowedNexusStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NexusState", value)
}

// NewNexusStateFromValue returns a pointer to a valid NexusState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNexusStateFromValue(v string) (*NexusState, error) {
	ev := NexusState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NexusState: valid values are %v", v, AllowedNexusStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NexusState) IsValid() bool {
	for _, existing := range AllowedNexusStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NexusState value
func (v NexusState) Ptr() *NexusState {
	return &v
}

type NullableNexusState struct {
	value *NexusState
	isSet bool
}

func (v NullableNexusState) Get() *NexusState {
	return v.value
}

func (v *NullableNexusState) Set(val *NexusState) {
	v.value = val
	v.isSet = true
}

func (v NullableNexusState) IsSet() bool {
	return v.isSet
}

func (v *NullableNexusState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexusState(val *NexusState) *NullableNexusState {
	return &NullableNexusState{value: val, isSet: true}
}

func (v NullableNexusState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexusState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

