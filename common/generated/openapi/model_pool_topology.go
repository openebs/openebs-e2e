/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolTopology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolTopology{}

// PoolTopology Used to determine how to place/distribute the data during volume creation and replica replacement.  If left empty then the control plane will select from all available resources.
type PoolTopology struct {
	// volume pool topology definition through labels
	Labelled *LabelledTopology `json:"labelled,omitempty"`
}

// NewPoolTopology instantiates a new PoolTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolTopology() *PoolTopology {
	this := PoolTopology{}
	return &this
}

// NewPoolTopologyWithDefaults instantiates a new PoolTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolTopologyWithDefaults() *PoolTopology {
	this := PoolTopology{}
	return &this
}

// GetLabelled returns the Labelled field value if set, zero value otherwise.
func (o *PoolTopology) GetLabelled() LabelledTopology {
	if o == nil || IsNil(o.Labelled) {
		var ret LabelledTopology
		return ret
	}
	return *o.Labelled
}

// GetLabelledOk returns a tuple with the Labelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetLabelledOk() (*LabelledTopology, bool) {
	if o == nil || IsNil(o.Labelled) {
		return nil, false
	}
	return o.Labelled, true
}

// HasLabelled returns a boolean if a field has been set.
func (o *PoolTopology) HasLabelled() bool {
	if o != nil && !IsNil(o.Labelled) {
		return true
	}

	return false
}

// SetLabelled gets a reference to the given LabelledTopology and assigns it to the Labelled field.
func (o *PoolTopology) SetLabelled(v LabelledTopology) {
	o.Labelled = &v
}

func (o PoolTopology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolTopology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labelled) {
		toSerialize["labelled"] = o.Labelled
	}
	return toSerialize, nil
}

type NullablePoolTopology struct {
	value *PoolTopology
	isSet bool
}

func (v NullablePoolTopology) Get() *PoolTopology {
	return v.value
}

func (v *NullablePoolTopology) Set(val *PoolTopology) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolTopology) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolTopology(val *PoolTopology) *NullablePoolTopology {
	return &NullablePoolTopology{value: val, isSet: true}
}

func (v NullablePoolTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


