/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CordonedState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CordonedState{}

// CordonedState The item is cordoned
type CordonedState struct {
	Cordonlabels []string `json:"cordonlabels"`
}

type _CordonedState CordonedState

// NewCordonedState instantiates a new CordonedState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCordonedState(cordonlabels []string) *CordonedState {
	this := CordonedState{}
	this.Cordonlabels = cordonlabels
	return &this
}

// NewCordonedStateWithDefaults instantiates a new CordonedState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCordonedStateWithDefaults() *CordonedState {
	this := CordonedState{}
	return &this
}

// GetCordonlabels returns the Cordonlabels field value
func (o *CordonedState) GetCordonlabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cordonlabels
}

// GetCordonlabelsOk returns a tuple with the Cordonlabels field value
// and a boolean to check if the value has been set.
func (o *CordonedState) GetCordonlabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cordonlabels, true
}

// SetCordonlabels sets field value
func (o *CordonedState) SetCordonlabels(v []string) {
	o.Cordonlabels = v
}

func (o CordonedState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CordonedState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cordonlabels"] = o.Cordonlabels
	return toSerialize, nil
}

func (o *CordonedState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cordonlabels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCordonedState := _CordonedState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCordonedState)

	if err != nil {
		return err
	}

	*o = CordonedState(varCordonedState)

	return err
}

type NullableCordonedState struct {
	value *CordonedState
	isSet bool
}

func (v NullableCordonedState) Get() *CordonedState {
	return v.value
}

func (v *NullableCordonedState) Set(val *CordonedState) {
	v.value = val
	v.isSet = true
}

func (v NullableCordonedState) IsSet() bool {
	return v.isSet
}

func (v *NullableCordonedState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCordonedState(val *CordonedState) *NullableCordonedState {
	return &NullableCordonedState{value: val, isSet: true}
}

func (v NullableCordonedState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCordonedState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


