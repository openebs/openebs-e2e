/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Child type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Child{}

// Child Child information
type Child struct {
	// current rebuild progress (%)
	RebuildProgress *int32 `json:"rebuildProgress,omitempty"`
	State ChildState `json:"state"`
	StateReason *ChildStateReason `json:"state_reason,omitempty"`
	// uri of the child device
	Uri string `json:"uri"`
}

type _Child Child

// NewChild instantiates a new Child object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChild(state ChildState, uri string) *Child {
	this := Child{}
	this.State = state
	this.Uri = uri
	return &this
}

// NewChildWithDefaults instantiates a new Child object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildWithDefaults() *Child {
	this := Child{}
	return &this
}

// GetRebuildProgress returns the RebuildProgress field value if set, zero value otherwise.
func (o *Child) GetRebuildProgress() int32 {
	if o == nil || IsNil(o.RebuildProgress) {
		var ret int32
		return ret
	}
	return *o.RebuildProgress
}

// GetRebuildProgressOk returns a tuple with the RebuildProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Child) GetRebuildProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.RebuildProgress) {
		return nil, false
	}
	return o.RebuildProgress, true
}

// HasRebuildProgress returns a boolean if a field has been set.
func (o *Child) HasRebuildProgress() bool {
	if o != nil && !IsNil(o.RebuildProgress) {
		return true
	}

	return false
}

// SetRebuildProgress gets a reference to the given int32 and assigns it to the RebuildProgress field.
func (o *Child) SetRebuildProgress(v int32) {
	o.RebuildProgress = &v
}

// GetState returns the State field value
func (o *Child) GetState() ChildState {
	if o == nil {
		var ret ChildState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Child) GetStateOk() (*ChildState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Child) SetState(v ChildState) {
	o.State = v
}

// GetStateReason returns the StateReason field value if set, zero value otherwise.
func (o *Child) GetStateReason() ChildStateReason {
	if o == nil || IsNil(o.StateReason) {
		var ret ChildStateReason
		return ret
	}
	return *o.StateReason
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Child) GetStateReasonOk() (*ChildStateReason, bool) {
	if o == nil || IsNil(o.StateReason) {
		return nil, false
	}
	return o.StateReason, true
}

// HasStateReason returns a boolean if a field has been set.
func (o *Child) HasStateReason() bool {
	if o != nil && !IsNil(o.StateReason) {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given ChildStateReason and assigns it to the StateReason field.
func (o *Child) SetStateReason(v ChildStateReason) {
	o.StateReason = &v
}

// GetUri returns the Uri field value
func (o *Child) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *Child) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *Child) SetUri(v string) {
	o.Uri = v
}

func (o Child) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Child) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RebuildProgress) {
		toSerialize["rebuildProgress"] = o.RebuildProgress
	}
	toSerialize["state"] = o.State
	if !IsNil(o.StateReason) {
		toSerialize["state_reason"] = o.StateReason
	}
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *Child) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChild := _Child{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChild)

	if err != nil {
		return err
	}

	*o = Child(varChild)

	return err
}

type NullableChild struct {
	value *Child
	isSet bool
}

func (v NullableChild) Get() *Child {
	return v.value
}

func (v *NullableChild) Set(val *Child) {
	v.value = val
	v.isSet = true
}

func (v NullableChild) IsSet() bool {
	return v.isSet
}

func (v *NullableChild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChild(val *Child) *NullableChild {
	return &NullableChild{value: val, isSet: true}
}

func (v NullableChild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


