/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestWatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestWatch{}

// RestWatch Watch Resource in the store
type RestWatch struct {
	// callback used to notify the watch of a change
	Callback string `json:"callback"`
	// id of the resource to watch on
	Resource string `json:"resource"`
}

type _RestWatch RestWatch

// NewRestWatch instantiates a new RestWatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestWatch(callback string, resource string) *RestWatch {
	this := RestWatch{}
	this.Callback = callback
	this.Resource = resource
	return &this
}

// NewRestWatchWithDefaults instantiates a new RestWatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestWatchWithDefaults() *RestWatch {
	this := RestWatch{}
	return &this
}

// GetCallback returns the Callback field value
func (o *RestWatch) GetCallback() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value
// and a boolean to check if the value has been set.
func (o *RestWatch) GetCallbackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Callback, true
}

// SetCallback sets field value
func (o *RestWatch) SetCallback(v string) {
	o.Callback = v
}

// GetResource returns the Resource field value
func (o *RestWatch) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *RestWatch) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *RestWatch) SetResource(v string) {
	o.Resource = v
}

func (o RestWatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestWatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["callback"] = o.Callback
	toSerialize["resource"] = o.Resource
	return toSerialize, nil
}

func (o *RestWatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"callback",
		"resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestWatch := _RestWatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestWatch)

	if err != nil {
		return err
	}

	*o = RestWatch(varRestWatch)

	return err
}

type NullableRestWatch struct {
	value *RestWatch
	isSet bool
}

func (v NullableRestWatch) Get() *RestWatch {
	return v.value
}

func (v *NullableRestWatch) Set(val *RestWatch) {
	v.value = val
	v.isSet = true
}

func (v NullableRestWatch) IsSet() bool {
	return v.isSet
}

func (v *NullableRestWatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestWatch(val *RestWatch) *NullableRestWatch {
	return &NullableRestWatch{value: val, isSet: true}
}

func (v NullableRestWatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestWatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


