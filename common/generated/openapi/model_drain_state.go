/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DrainState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DrainState{}

// DrainState The item is draining
type DrainState struct {
	Cordonlabels []string `json:"cordonlabels"`
	Drainlabels []string `json:"drainlabels"`
}

type _DrainState DrainState

// NewDrainState instantiates a new DrainState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrainState(cordonlabels []string, drainlabels []string) *DrainState {
	this := DrainState{}
	this.Cordonlabels = cordonlabels
	this.Drainlabels = drainlabels
	return &this
}

// NewDrainStateWithDefaults instantiates a new DrainState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDrainStateWithDefaults() *DrainState {
	this := DrainState{}
	return &this
}

// GetCordonlabels returns the Cordonlabels field value
func (o *DrainState) GetCordonlabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cordonlabels
}

// GetCordonlabelsOk returns a tuple with the Cordonlabels field value
// and a boolean to check if the value has been set.
func (o *DrainState) GetCordonlabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cordonlabels, true
}

// SetCordonlabels sets field value
func (o *DrainState) SetCordonlabels(v []string) {
	o.Cordonlabels = v
}

// GetDrainlabels returns the Drainlabels field value
func (o *DrainState) GetDrainlabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Drainlabels
}

// GetDrainlabelsOk returns a tuple with the Drainlabels field value
// and a boolean to check if the value has been set.
func (o *DrainState) GetDrainlabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drainlabels, true
}

// SetDrainlabels sets field value
func (o *DrainState) SetDrainlabels(v []string) {
	o.Drainlabels = v
}

func (o DrainState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DrainState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cordonlabels"] = o.Cordonlabels
	toSerialize["drainlabels"] = o.Drainlabels
	return toSerialize, nil
}

func (o *DrainState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cordonlabels",
		"drainlabels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDrainState := _DrainState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDrainState)

	if err != nil {
		return err
	}

	*o = DrainState(varDrainState)

	return err
}

type NullableDrainState struct {
	value *DrainState
	isSet bool
}

func (v NullableDrainState) Get() *DrainState {
	return v.value
}

func (v *NullableDrainState) Set(val *DrainState) {
	v.value = val
	v.isSet = true
}

func (v NullableDrainState) IsSet() bool {
	return v.isSet
}

func (v *NullableDrainState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrainState(val *DrainState) *NullableDrainState {
	return &NullableDrainState{value: val, isSet: true}
}

func (v NullableDrainState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrainState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


