/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeState{}

// NodeState io-engine storage node information
type NodeState struct {
	// gRPC endpoint of the io-engine instance
	GrpcEndpoint string `json:"grpcEndpoint"`
	// storage node identifier
	Id string `json:"id"`
	Status NodeStatus `json:"status"`
	// NVMe Qualified Names (NQNs) are used to uniquely describe a host or NVM subsystem for the purposes of identification and authentication
	NodeNqn *string `json:"node_nqn,omitempty"`
	// Version of the io-engine instance
	Version *string `json:"version,omitempty"`
}

type _NodeState NodeState

// NewNodeState instantiates a new NodeState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeState(grpcEndpoint string, id string, status NodeStatus) *NodeState {
	this := NodeState{}
	this.GrpcEndpoint = grpcEndpoint
	this.Id = id
	this.Status = status
	return &this
}

// NewNodeStateWithDefaults instantiates a new NodeState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStateWithDefaults() *NodeState {
	this := NodeState{}
	return &this
}

// GetGrpcEndpoint returns the GrpcEndpoint field value
func (o *NodeState) GetGrpcEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GrpcEndpoint
}

// GetGrpcEndpointOk returns a tuple with the GrpcEndpoint field value
// and a boolean to check if the value has been set.
func (o *NodeState) GetGrpcEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GrpcEndpoint, true
}

// SetGrpcEndpoint sets field value
func (o *NodeState) SetGrpcEndpoint(v string) {
	o.GrpcEndpoint = v
}

// GetId returns the Id field value
func (o *NodeState) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NodeState) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NodeState) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *NodeState) GetStatus() NodeStatus {
	if o == nil {
		var ret NodeStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NodeState) GetStatusOk() (*NodeStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NodeState) SetStatus(v NodeStatus) {
	o.Status = v
}

// GetNodeNqn returns the NodeNqn field value if set, zero value otherwise.
func (o *NodeState) GetNodeNqn() string {
	if o == nil || IsNil(o.NodeNqn) {
		var ret string
		return ret
	}
	return *o.NodeNqn
}

// GetNodeNqnOk returns a tuple with the NodeNqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeState) GetNodeNqnOk() (*string, bool) {
	if o == nil || IsNil(o.NodeNqn) {
		return nil, false
	}
	return o.NodeNqn, true
}

// HasNodeNqn returns a boolean if a field has been set.
func (o *NodeState) HasNodeNqn() bool {
	if o != nil && !IsNil(o.NodeNqn) {
		return true
	}

	return false
}

// SetNodeNqn gets a reference to the given string and assigns it to the NodeNqn field.
func (o *NodeState) SetNodeNqn(v string) {
	o.NodeNqn = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NodeState) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeState) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NodeState) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NodeState) SetVersion(v string) {
	o.Version = &v
}

func (o NodeState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grpcEndpoint"] = o.GrpcEndpoint
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	if !IsNil(o.NodeNqn) {
		toSerialize["node_nqn"] = o.NodeNqn
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *NodeState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grpcEndpoint",
		"id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeState := _NodeState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeState)

	if err != nil {
		return err
	}

	*o = NodeState(varNodeState)

	return err
}

type NullableNodeState struct {
	value *NodeState
	isSet bool
}

func (v NullableNodeState) Get() *NodeState {
	return v.value
}

func (v *NullableNodeState) Set(val *NodeState) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeState) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeState(val *NodeState) *NullableNodeState {
	return &NullableNodeState{value: val, isSet: true}
}

func (v NullableNodeState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


