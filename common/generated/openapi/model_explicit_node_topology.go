/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExplicitNodeTopology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplicitNodeTopology{}

// ExplicitNodeTopology volume topology, explicitly selected
type ExplicitNodeTopology struct {
	// replicas can only be placed on these nodes
	AllowedNodes []string `json:"allowed_nodes"`
	// preferred nodes to place the replicas
	PreferredNodes []string `json:"preferred_nodes"`
}

type _ExplicitNodeTopology ExplicitNodeTopology

// NewExplicitNodeTopology instantiates a new ExplicitNodeTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplicitNodeTopology(allowedNodes []string, preferredNodes []string) *ExplicitNodeTopology {
	this := ExplicitNodeTopology{}
	this.AllowedNodes = allowedNodes
	this.PreferredNodes = preferredNodes
	return &this
}

// NewExplicitNodeTopologyWithDefaults instantiates a new ExplicitNodeTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplicitNodeTopologyWithDefaults() *ExplicitNodeTopology {
	this := ExplicitNodeTopology{}
	return &this
}

// GetAllowedNodes returns the AllowedNodes field value
func (o *ExplicitNodeTopology) GetAllowedNodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedNodes
}

// GetAllowedNodesOk returns a tuple with the AllowedNodes field value
// and a boolean to check if the value has been set.
func (o *ExplicitNodeTopology) GetAllowedNodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedNodes, true
}

// SetAllowedNodes sets field value
func (o *ExplicitNodeTopology) SetAllowedNodes(v []string) {
	o.AllowedNodes = v
}

// GetPreferredNodes returns the PreferredNodes field value
func (o *ExplicitNodeTopology) GetPreferredNodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PreferredNodes
}

// GetPreferredNodesOk returns a tuple with the PreferredNodes field value
// and a boolean to check if the value has been set.
func (o *ExplicitNodeTopology) GetPreferredNodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreferredNodes, true
}

// SetPreferredNodes sets field value
func (o *ExplicitNodeTopology) SetPreferredNodes(v []string) {
	o.PreferredNodes = v
}

func (o ExplicitNodeTopology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplicitNodeTopology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowed_nodes"] = o.AllowedNodes
	toSerialize["preferred_nodes"] = o.PreferredNodes
	return toSerialize, nil
}

func (o *ExplicitNodeTopology) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowed_nodes",
		"preferred_nodes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExplicitNodeTopology := _ExplicitNodeTopology{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExplicitNodeTopology)

	if err != nil {
		return err
	}

	*o = ExplicitNodeTopology(varExplicitNodeTopology)

	return err
}

type NullableExplicitNodeTopology struct {
	value *ExplicitNodeTopology
	isSet bool
}

func (v NullableExplicitNodeTopology) Get() *ExplicitNodeTopology {
	return v.value
}

func (v *NullableExplicitNodeTopology) Set(val *ExplicitNodeTopology) {
	v.value = val
	v.isSet = true
}

func (v NullableExplicitNodeTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableExplicitNodeTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplicitNodeTopology(val *ExplicitNodeTopology) *NullableExplicitNodeTopology {
	return &NullableExplicitNodeTopology{value: val, isSet: true}
}

func (v NullableExplicitNodeTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplicitNodeTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


