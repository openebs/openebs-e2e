/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestJsonError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestJsonError{}

// RestJsonError Rest Json Error format
type RestJsonError struct {
	// detailed error information
	Details string `json:"details"`
	// last reported error information
	Message string `json:"message"`
	// error kind
	Kind string `json:"kind"`
}

type _RestJsonError RestJsonError

// NewRestJsonError instantiates a new RestJsonError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestJsonError(details string, message string, kind string) *RestJsonError {
	this := RestJsonError{}
	this.Details = details
	this.Message = message
	this.Kind = kind
	return &this
}

// NewRestJsonErrorWithDefaults instantiates a new RestJsonError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestJsonErrorWithDefaults() *RestJsonError {
	this := RestJsonError{}
	return &this
}

// GetDetails returns the Details field value
func (o *RestJsonError) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *RestJsonError) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *RestJsonError) SetDetails(v string) {
	o.Details = v
}

// GetMessage returns the Message field value
func (o *RestJsonError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RestJsonError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RestJsonError) SetMessage(v string) {
	o.Message = v
}

// GetKind returns the Kind field value
func (o *RestJsonError) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *RestJsonError) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *RestJsonError) SetKind(v string) {
	o.Kind = v
}

func (o RestJsonError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestJsonError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["details"] = o.Details
	toSerialize["message"] = o.Message
	toSerialize["kind"] = o.Kind
	return toSerialize, nil
}

func (o *RestJsonError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"details",
		"message",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestJsonError := _RestJsonError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestJsonError)

	if err != nil {
		return err
	}

	*o = RestJsonError(varRestJsonError)

	return err
}

type NullableRestJsonError struct {
	value *RestJsonError
	isSet bool
}

func (v NullableRestJsonError) Get() *RestJsonError {
	return v.value
}

func (v *NullableRestJsonError) Set(val *RestJsonError) {
	v.value = val
	v.isSet = true
}

func (v NullableRestJsonError) IsSet() bool {
	return v.isSet
}

func (v *NullableRestJsonError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestJsonError(val *RestJsonError) *NullableRestJsonError {
	return &NullableRestJsonError{value: val, isSet: true}
}

func (v NullableRestJsonError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestJsonError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


