/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppNode{}

// AppNode Represents an application node, which connects to the target node via a share protocol (eg: nvmf).
type AppNode struct {
	// App node identifier.
	Id string `json:"id"`
	Spec AppNodeSpec `json:"spec"`
	State *AppNodeState `json:"state,omitempty"`
}

type _AppNode AppNode

// NewAppNode instantiates a new AppNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppNode(id string, spec AppNodeSpec) *AppNode {
	this := AppNode{}
	this.Id = id
	this.Spec = spec
	return &this
}

// NewAppNodeWithDefaults instantiates a new AppNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppNodeWithDefaults() *AppNode {
	this := AppNode{}
	return &this
}

// GetId returns the Id field value
func (o *AppNode) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppNode) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppNode) SetId(v string) {
	o.Id = v
}

// GetSpec returns the Spec field value
func (o *AppNode) GetSpec() AppNodeSpec {
	if o == nil {
		var ret AppNodeSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *AppNode) GetSpecOk() (*AppNodeSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *AppNode) SetSpec(v AppNodeSpec) {
	o.Spec = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AppNode) GetState() AppNodeState {
	if o == nil || IsNil(o.State) {
		var ret AppNodeState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNode) GetStateOk() (*AppNodeState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AppNode) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given AppNodeState and assigns it to the State field.
func (o *AppNode) SetState(v AppNodeState) {
	o.State = &v
}

func (o AppNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["spec"] = o.Spec
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

func (o *AppNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppNode := _AppNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppNode)

	if err != nil {
		return err
	}

	*o = AppNode(varAppNode)

	return err
}

type NullableAppNode struct {
	value *AppNode
	isSet bool
}

func (v NullableAppNode) Get() *AppNode {
	return v.value
}

func (v *NullableAppNode) Set(val *AppNode) {
	v.value = val
	v.isSet = true
}

func (v NullableAppNode) IsSet() bool {
	return v.isSet
}

func (v *NullableAppNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppNode(val *AppNode) *NullableAppNode {
	return &NullableAppNode{value: val, isSet: true}
}

func (v NullableAppNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


