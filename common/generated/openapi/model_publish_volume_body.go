/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublishVolumeBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishVolumeBody{}

// PublishVolumeBody Publish Volume Body
type PublishVolumeBody struct {
	// Controller Volume Publish context
	PublishContext map[string]string `json:"publish_context"`
	// Allows reusing of the current target.
	ReuseExisting *bool `json:"reuse_existing,omitempty"`
	// The node where the target will reside in. It may be moved elsewhere during volume republish.
	Node *string `json:"node,omitempty"`
	// The protocol used to connect to the front-end node.
	Protocol VolumeShareProtocol `json:"protocol"`
	// Allows republishing the volume on the node by shutting down the existing target first.
	Republish *bool `json:"republish,omitempty"`
	// The node where the front-end workload resides. If the workload moves then the volume must be republished.
	FrontendNode *string `json:"frontend_node,omitempty"`
}

type _PublishVolumeBody PublishVolumeBody

// NewPublishVolumeBody instantiates a new PublishVolumeBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishVolumeBody(publishContext map[string]string, protocol VolumeShareProtocol) *PublishVolumeBody {
	this := PublishVolumeBody{}
	this.PublishContext = publishContext
	this.Protocol = protocol
	return &this
}

// NewPublishVolumeBodyWithDefaults instantiates a new PublishVolumeBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishVolumeBodyWithDefaults() *PublishVolumeBody {
	this := PublishVolumeBody{}
	return &this
}

// GetPublishContext returns the PublishContext field value
func (o *PublishVolumeBody) GetPublishContext() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.PublishContext
}

// GetPublishContextOk returns a tuple with the PublishContext field value
// and a boolean to check if the value has been set.
func (o *PublishVolumeBody) GetPublishContextOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishContext, true
}

// SetPublishContext sets field value
func (o *PublishVolumeBody) SetPublishContext(v map[string]string) {
	o.PublishContext = v
}

// GetReuseExisting returns the ReuseExisting field value if set, zero value otherwise.
func (o *PublishVolumeBody) GetReuseExisting() bool {
	if o == nil || IsNil(o.ReuseExisting) {
		var ret bool
		return ret
	}
	return *o.ReuseExisting
}

// GetReuseExistingOk returns a tuple with the ReuseExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishVolumeBody) GetReuseExistingOk() (*bool, bool) {
	if o == nil || IsNil(o.ReuseExisting) {
		return nil, false
	}
	return o.ReuseExisting, true
}

// HasReuseExisting returns a boolean if a field has been set.
func (o *PublishVolumeBody) HasReuseExisting() bool {
	if o != nil && !IsNil(o.ReuseExisting) {
		return true
	}

	return false
}

// SetReuseExisting gets a reference to the given bool and assigns it to the ReuseExisting field.
func (o *PublishVolumeBody) SetReuseExisting(v bool) {
	o.ReuseExisting = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *PublishVolumeBody) GetNode() string {
	if o == nil || IsNil(o.Node) {
		var ret string
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishVolumeBody) GetNodeOk() (*string, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *PublishVolumeBody) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given string and assigns it to the Node field.
func (o *PublishVolumeBody) SetNode(v string) {
	o.Node = &v
}

// GetProtocol returns the Protocol field value
func (o *PublishVolumeBody) GetProtocol() VolumeShareProtocol {
	if o == nil {
		var ret VolumeShareProtocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *PublishVolumeBody) GetProtocolOk() (*VolumeShareProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *PublishVolumeBody) SetProtocol(v VolumeShareProtocol) {
	o.Protocol = v
}

// GetRepublish returns the Republish field value if set, zero value otherwise.
func (o *PublishVolumeBody) GetRepublish() bool {
	if o == nil || IsNil(o.Republish) {
		var ret bool
		return ret
	}
	return *o.Republish
}

// GetRepublishOk returns a tuple with the Republish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishVolumeBody) GetRepublishOk() (*bool, bool) {
	if o == nil || IsNil(o.Republish) {
		return nil, false
	}
	return o.Republish, true
}

// HasRepublish returns a boolean if a field has been set.
func (o *PublishVolumeBody) HasRepublish() bool {
	if o != nil && !IsNil(o.Republish) {
		return true
	}

	return false
}

// SetRepublish gets a reference to the given bool and assigns it to the Republish field.
func (o *PublishVolumeBody) SetRepublish(v bool) {
	o.Republish = &v
}

// GetFrontendNode returns the FrontendNode field value if set, zero value otherwise.
func (o *PublishVolumeBody) GetFrontendNode() string {
	if o == nil || IsNil(o.FrontendNode) {
		var ret string
		return ret
	}
	return *o.FrontendNode
}

// GetFrontendNodeOk returns a tuple with the FrontendNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishVolumeBody) GetFrontendNodeOk() (*string, bool) {
	if o == nil || IsNil(o.FrontendNode) {
		return nil, false
	}
	return o.FrontendNode, true
}

// HasFrontendNode returns a boolean if a field has been set.
func (o *PublishVolumeBody) HasFrontendNode() bool {
	if o != nil && !IsNil(o.FrontendNode) {
		return true
	}

	return false
}

// SetFrontendNode gets a reference to the given string and assigns it to the FrontendNode field.
func (o *PublishVolumeBody) SetFrontendNode(v string) {
	o.FrontendNode = &v
}

func (o PublishVolumeBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishVolumeBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["publish_context"] = o.PublishContext
	if !IsNil(o.ReuseExisting) {
		toSerialize["reuse_existing"] = o.ReuseExisting
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.Republish) {
		toSerialize["republish"] = o.Republish
	}
	if !IsNil(o.FrontendNode) {
		toSerialize["frontend_node"] = o.FrontendNode
	}
	return toSerialize, nil
}

func (o *PublishVolumeBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"publish_context",
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublishVolumeBody := _PublishVolumeBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublishVolumeBody)

	if err != nil {
		return err
	}

	*o = PublishVolumeBody(varPublishVolumeBody)

	return err
}

type NullablePublishVolumeBody struct {
	value *PublishVolumeBody
	isSet bool
}

func (v NullablePublishVolumeBody) Get() *PublishVolumeBody {
	return v.value
}

func (v *NullablePublishVolumeBody) Set(val *PublishVolumeBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishVolumeBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishVolumeBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishVolumeBody(val *PublishVolumeBody) *NullablePublishVolumeBody {
	return &NullablePublishVolumeBody{value: val, isSet: true}
}

func (v NullablePublishVolumeBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishVolumeBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


