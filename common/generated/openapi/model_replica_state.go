/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReplicaState state of the replica
type ReplicaState string

// List of ReplicaState
const (
	REPLICASTATE_UNKNOWN  ReplicaState = "Unknown"
	REPLICASTATE_ONLINE   ReplicaState = "Online"
	REPLICASTATE_DEGRADED ReplicaState = "Degraded"
	REPLICASTATE_FAULTED  ReplicaState = "Faulted"
)

// All allowed values of ReplicaState enum
var AllowedReplicaStateEnumValues = []ReplicaState{
	"Unknown",
	"Online",
	"Degraded",
	"Faulted",
}

func (v *ReplicaState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaState(value)
	for _, existing := range AllowedReplicaStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaState", value)
}

// NewReplicaStateFromValue returns a pointer to a valid ReplicaState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaStateFromValue(v string) (*ReplicaState, error) {
	ev := ReplicaState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaState: valid values are %v", v, AllowedReplicaStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaState) IsValid() bool {
	for _, existing := range AllowedReplicaStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaState value
func (v ReplicaState) Ptr() *ReplicaState {
	return &v
}

type NullableReplicaState struct {
	value *ReplicaState
	isSet bool
}

func (v NullableReplicaState) Get() *ReplicaState {
	return v.value
}

func (v *NullableReplicaState) Set(val *ReplicaState) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaState) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaState(val *ReplicaState) *NullableReplicaState {
	return &NullableReplicaState{value: val, isSet: true}
}

func (v NullableReplicaState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

