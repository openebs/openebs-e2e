/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeTarget{}

// VolumeTarget Specification of a volume target
type VolumeTarget struct {
	// The node where front-end IO will be sent to
	Node string `json:"node"`
	Protocol *VolumeShareProtocol `json:"protocol,omitempty"`
	// The nodes where the front-end workload resides. If the workload moves then the volume must be republished.
	FrontendNodes []NodeAccessInfo `json:"frontend_nodes,omitempty"`
}

type _VolumeTarget VolumeTarget

// NewVolumeTarget instantiates a new VolumeTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeTarget(node string) *VolumeTarget {
	this := VolumeTarget{}
	this.Node = node
	return &this
}

// NewVolumeTargetWithDefaults instantiates a new VolumeTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeTargetWithDefaults() *VolumeTarget {
	this := VolumeTarget{}
	return &this
}

// GetNode returns the Node field value
func (o *VolumeTarget) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *VolumeTarget) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *VolumeTarget) SetNode(v string) {
	o.Node = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *VolumeTarget) GetProtocol() VolumeShareProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret VolumeShareProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeTarget) GetProtocolOk() (*VolumeShareProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *VolumeTarget) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given VolumeShareProtocol and assigns it to the Protocol field.
func (o *VolumeTarget) SetProtocol(v VolumeShareProtocol) {
	o.Protocol = &v
}

// GetFrontendNodes returns the FrontendNodes field value if set, zero value otherwise.
func (o *VolumeTarget) GetFrontendNodes() []NodeAccessInfo {
	if o == nil || IsNil(o.FrontendNodes) {
		var ret []NodeAccessInfo
		return ret
	}
	return o.FrontendNodes
}

// GetFrontendNodesOk returns a tuple with the FrontendNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeTarget) GetFrontendNodesOk() ([]NodeAccessInfo, bool) {
	if o == nil || IsNil(o.FrontendNodes) {
		return nil, false
	}
	return o.FrontendNodes, true
}

// HasFrontendNodes returns a boolean if a field has been set.
func (o *VolumeTarget) HasFrontendNodes() bool {
	if o != nil && !IsNil(o.FrontendNodes) {
		return true
	}

	return false
}

// SetFrontendNodes gets a reference to the given []NodeAccessInfo and assigns it to the FrontendNodes field.
func (o *VolumeTarget) SetFrontendNodes(v []NodeAccessInfo) {
	o.FrontendNodes = v
}

func (o VolumeTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["node"] = o.Node
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.FrontendNodes) {
		toSerialize["frontend_nodes"] = o.FrontendNodes
	}
	return toSerialize, nil
}

func (o *VolumeTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeTarget := _VolumeTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeTarget)

	if err != nil {
		return err
	}

	*o = VolumeTarget(varVolumeTarget)

	return err
}

type NullableVolumeTarget struct {
	value *VolumeTarget
	isSet bool
}

func (v NullableVolumeTarget) Get() *VolumeTarget {
	return v.value
}

func (v *NullableVolumeTarget) Set(val *VolumeTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeTarget(val *VolumeTarget) *NullableVolumeTarget {
	return &NullableVolumeTarget{value: val, isSet: true}
}

func (v NullableVolumeTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


