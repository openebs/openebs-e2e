/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeTopology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeTopology{}

// NodeTopology Used to determine how to place/distribute the data during volume creation and replica replacement.  If left empty then the control plane will select from all available resources.
type NodeTopology struct {
	// volume topology, explicitly selected
	Explicit *ExplicitNodeTopology `json:"explicit,omitempty"`
	// volume topology definition through labels
	Labelled *LabelledTopology `json:"labelled,omitempty"`
}

// NewNodeTopology instantiates a new NodeTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeTopology() *NodeTopology {
	this := NodeTopology{}
	return &this
}

// NewNodeTopologyWithDefaults instantiates a new NodeTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeTopologyWithDefaults() *NodeTopology {
	this := NodeTopology{}
	return &this
}

// GetExplicit returns the Explicit field value if set, zero value otherwise.
func (o *NodeTopology) GetExplicit() ExplicitNodeTopology {
	if o == nil || IsNil(o.Explicit) {
		var ret ExplicitNodeTopology
		return ret
	}
	return *o.Explicit
}

// GetExplicitOk returns a tuple with the Explicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeTopology) GetExplicitOk() (*ExplicitNodeTopology, bool) {
	if o == nil || IsNil(o.Explicit) {
		return nil, false
	}
	return o.Explicit, true
}

// HasExplicit returns a boolean if a field has been set.
func (o *NodeTopology) HasExplicit() bool {
	if o != nil && !IsNil(o.Explicit) {
		return true
	}

	return false
}

// SetExplicit gets a reference to the given ExplicitNodeTopology and assigns it to the Explicit field.
func (o *NodeTopology) SetExplicit(v ExplicitNodeTopology) {
	o.Explicit = &v
}

// GetLabelled returns the Labelled field value if set, zero value otherwise.
func (o *NodeTopology) GetLabelled() LabelledTopology {
	if o == nil || IsNil(o.Labelled) {
		var ret LabelledTopology
		return ret
	}
	return *o.Labelled
}

// GetLabelledOk returns a tuple with the Labelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeTopology) GetLabelledOk() (*LabelledTopology, bool) {
	if o == nil || IsNil(o.Labelled) {
		return nil, false
	}
	return o.Labelled, true
}

// HasLabelled returns a boolean if a field has been set.
func (o *NodeTopology) HasLabelled() bool {
	if o != nil && !IsNil(o.Labelled) {
		return true
	}

	return false
}

// SetLabelled gets a reference to the given LabelledTopology and assigns it to the Labelled field.
func (o *NodeTopology) SetLabelled(v LabelledTopology) {
	o.Labelled = &v
}

func (o NodeTopology) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeTopology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Explicit) {
		toSerialize["explicit"] = o.Explicit
	}
	if !IsNil(o.Labelled) {
		toSerialize["labelled"] = o.Labelled
	}
	return toSerialize, nil
}

type NullableNodeTopology struct {
	value *NodeTopology
	isSet bool
}

func (v NullableNodeTopology) Get() *NodeTopology {
	return v.value
}

func (v *NullableNodeTopology) Set(val *NodeTopology) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeTopology(val *NodeTopology) *NullableNodeTopology {
	return &NullableNodeTopology{value: val, isSet: true}
}

func (v NullableNodeTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


