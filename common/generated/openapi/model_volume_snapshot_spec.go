/*
IoEngine RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeSnapshotSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSnapshotSpec{}

// VolumeSnapshotSpec Volume Snapshot Spec information.
type VolumeSnapshotSpec struct {
	Uuid string `json:"uuid"`
	SourceVolume string `json:"source_volume"`
}

type _VolumeSnapshotSpec VolumeSnapshotSpec

// NewVolumeSnapshotSpec instantiates a new VolumeSnapshotSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSnapshotSpec(uuid string, sourceVolume string) *VolumeSnapshotSpec {
	this := VolumeSnapshotSpec{}
	this.Uuid = uuid
	this.SourceVolume = sourceVolume
	return &this
}

// NewVolumeSnapshotSpecWithDefaults instantiates a new VolumeSnapshotSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSnapshotSpecWithDefaults() *VolumeSnapshotSpec {
	this := VolumeSnapshotSpec{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *VolumeSnapshotSpec) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotSpec) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *VolumeSnapshotSpec) SetUuid(v string) {
	o.Uuid = v
}

// GetSourceVolume returns the SourceVolume field value
func (o *VolumeSnapshotSpec) GetSourceVolume() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceVolume
}

// GetSourceVolumeOk returns a tuple with the SourceVolume field value
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotSpec) GetSourceVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceVolume, true
}

// SetSourceVolume sets field value
func (o *VolumeSnapshotSpec) SetSourceVolume(v string) {
	o.SourceVolume = v
}

func (o VolumeSnapshotSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSnapshotSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["source_volume"] = o.SourceVolume
	return toSerialize, nil
}

func (o *VolumeSnapshotSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"source_volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSnapshotSpec := _VolumeSnapshotSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSnapshotSpec)

	if err != nil {
		return err
	}

	*o = VolumeSnapshotSpec(varVolumeSnapshotSpec)

	return err
}

type NullableVolumeSnapshotSpec struct {
	value *VolumeSnapshotSpec
	isSet bool
}

func (v NullableVolumeSnapshotSpec) Get() *VolumeSnapshotSpec {
	return v.value
}

func (v *NullableVolumeSnapshotSpec) Set(val *VolumeSnapshotSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSnapshotSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSnapshotSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSnapshotSpec(val *VolumeSnapshotSpec) *NullableVolumeSnapshotSpec {
	return &NullableVolumeSnapshotSpec{value: val, isSet: true}
}

func (v NullableVolumeSnapshotSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSnapshotSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


