// The definition of mayastor gRPC interface.

// This interface is supposed to be independent on particular computing
// environment (i.e. kubernetes).

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: mayastor.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mayastor_CreatePool_FullMethodName               = "/mayastor.Mayastor/CreatePool"
	Mayastor_DestroyPool_FullMethodName              = "/mayastor.Mayastor/DestroyPool"
	Mayastor_ListPools_FullMethodName                = "/mayastor.Mayastor/ListPools"
	Mayastor_CreateReplica_FullMethodName            = "/mayastor.Mayastor/CreateReplica"
	Mayastor_CreateReplicaV2_FullMethodName          = "/mayastor.Mayastor/CreateReplicaV2"
	Mayastor_DestroyReplica_FullMethodName           = "/mayastor.Mayastor/DestroyReplica"
	Mayastor_ListReplicas_FullMethodName             = "/mayastor.Mayastor/ListReplicas"
	Mayastor_ListReplicasV2_FullMethodName           = "/mayastor.Mayastor/ListReplicasV2"
	Mayastor_StatReplicas_FullMethodName             = "/mayastor.Mayastor/StatReplicas"
	Mayastor_ShareReplica_FullMethodName             = "/mayastor.Mayastor/ShareReplica"
	Mayastor_CreateNexus_FullMethodName              = "/mayastor.Mayastor/CreateNexus"
	Mayastor_CreateNexusV2_FullMethodName            = "/mayastor.Mayastor/CreateNexusV2"
	Mayastor_DestroyNexus_FullMethodName             = "/mayastor.Mayastor/DestroyNexus"
	Mayastor_ListNexus_FullMethodName                = "/mayastor.Mayastor/ListNexus"
	Mayastor_ListNexusV2_FullMethodName              = "/mayastor.Mayastor/ListNexusV2"
	Mayastor_AddChildNexus_FullMethodName            = "/mayastor.Mayastor/AddChildNexus"
	Mayastor_RemoveChildNexus_FullMethodName         = "/mayastor.Mayastor/RemoveChildNexus"
	Mayastor_FaultNexusChild_FullMethodName          = "/mayastor.Mayastor/FaultNexusChild"
	Mayastor_ShutdownNexus_FullMethodName            = "/mayastor.Mayastor/ShutdownNexus"
	Mayastor_InjectNexusFault_FullMethodName         = "/mayastor.Mayastor/InjectNexusFault"
	Mayastor_RemoveInjectedNexusFault_FullMethodName = "/mayastor.Mayastor/RemoveInjectedNexusFault"
	Mayastor_ListInjectedNexusFaults_FullMethodName  = "/mayastor.Mayastor/ListInjectedNexusFaults"
	Mayastor_PublishNexus_FullMethodName             = "/mayastor.Mayastor/PublishNexus"
	Mayastor_UnpublishNexus_FullMethodName           = "/mayastor.Mayastor/UnpublishNexus"
	Mayastor_GetNvmeAnaState_FullMethodName          = "/mayastor.Mayastor/GetNvmeAnaState"
	Mayastor_SetNvmeAnaState_FullMethodName          = "/mayastor.Mayastor/SetNvmeAnaState"
	Mayastor_GetMayastorInfo_FullMethodName          = "/mayastor.Mayastor/GetMayastorInfo"
	Mayastor_ChildOperation_FullMethodName           = "/mayastor.Mayastor/ChildOperation"
	Mayastor_StartRebuild_FullMethodName             = "/mayastor.Mayastor/StartRebuild"
	Mayastor_StopRebuild_FullMethodName              = "/mayastor.Mayastor/StopRebuild"
	Mayastor_PauseRebuild_FullMethodName             = "/mayastor.Mayastor/PauseRebuild"
	Mayastor_ResumeRebuild_FullMethodName            = "/mayastor.Mayastor/ResumeRebuild"
	Mayastor_GetRebuildState_FullMethodName          = "/mayastor.Mayastor/GetRebuildState"
	Mayastor_GetRebuildStats_FullMethodName          = "/mayastor.Mayastor/GetRebuildStats"
	Mayastor_GetRebuildProgress_FullMethodName       = "/mayastor.Mayastor/GetRebuildProgress"
	Mayastor_CreateSnapshot_FullMethodName           = "/mayastor.Mayastor/CreateSnapshot"
	Mayastor_ListBlockDevices_FullMethodName         = "/mayastor.Mayastor/ListBlockDevices"
	Mayastor_GetResourceUsage_FullMethodName         = "/mayastor.Mayastor/GetResourceUsage"
	Mayastor_ListNvmeControllers_FullMethodName      = "/mayastor.Mayastor/ListNvmeControllers"
	Mayastor_StatNvmeControllers_FullMethodName      = "/mayastor.Mayastor/StatNvmeControllers"
)

// MayastorClient is the client API for Mayastor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MayastorClient interface {
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*Pool, error)
	DestroyPool(ctx context.Context, in *DestroyPoolRequest, opts ...grpc.CallOption) (*Null, error)
	ListPools(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListPoolsReply, error)
	CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*Replica, error)
	CreateReplicaV2(ctx context.Context, in *CreateReplicaRequestV2, opts ...grpc.CallOption) (*ReplicaV2, error)
	DestroyReplica(ctx context.Context, in *DestroyReplicaRequest, opts ...grpc.CallOption) (*Null, error)
	ListReplicas(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListReplicasReply, error)
	ListReplicasV2(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListReplicasReplyV2, error)
	StatReplicas(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StatReplicasReply, error)
	ShareReplica(ctx context.Context, in *ShareReplicaRequest, opts ...grpc.CallOption) (*ShareReplicaReply, error)
	CreateNexus(ctx context.Context, in *CreateNexusRequest, opts ...grpc.CallOption) (*Nexus, error)
	CreateNexusV2(ctx context.Context, in *CreateNexusV2Request, opts ...grpc.CallOption) (*Nexus, error)
	DestroyNexus(ctx context.Context, in *DestroyNexusRequest, opts ...grpc.CallOption) (*Null, error)
	ListNexus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListNexusReply, error)
	ListNexusV2(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListNexusV2Reply, error)
	AddChildNexus(ctx context.Context, in *AddChildNexusRequest, opts ...grpc.CallOption) (*Child, error)
	RemoveChildNexus(ctx context.Context, in *RemoveChildNexusRequest, opts ...grpc.CallOption) (*Null, error)
	FaultNexusChild(ctx context.Context, in *FaultNexusChildRequest, opts ...grpc.CallOption) (*Null, error)
	ShutdownNexus(ctx context.Context, in *ShutdownNexusRequest, opts ...grpc.CallOption) (*Null, error)
	// Nexus-level fault injection and other development methods
	InjectNexusFault(ctx context.Context, in *InjectNexusFaultRequest, opts ...grpc.CallOption) (*Null, error)
	RemoveInjectedNexusFault(ctx context.Context, in *RemoveInjectedNexusFaultRequest, opts ...grpc.CallOption) (*Null, error)
	ListInjectedNexusFaults(ctx context.Context, in *ListInjectedNexusFaultsRequest, opts ...grpc.CallOption) (*ListInjectedNexusFaultsReply, error)
	// This method is called by control plane to construct a block device
	// (/dev/...) that will be used to connect the nexus to the OS.
	PublishNexus(ctx context.Context, in *PublishNexusRequest, opts ...grpc.CallOption) (*PublishNexusReply, error)
	UnpublishNexus(ctx context.Context, in *UnpublishNexusRequest, opts ...grpc.CallOption) (*Null, error)
	// NVMe ANA state
	GetNvmeAnaState(ctx context.Context, in *GetNvmeAnaStateRequest, opts ...grpc.CallOption) (*GetNvmeAnaStateReply, error)
	SetNvmeAnaState(ctx context.Context, in *SetNvmeAnaStateRequest, opts ...grpc.CallOption) (*Null, error)
	// Mayastor instance methods.
	GetMayastorInfo(ctx context.Context, in *Null, opts ...grpc.CallOption) (*MayastorInfoRequest, error)
	// Nexus child operations
	ChildOperation(ctx context.Context, in *ChildNexusRequest, opts ...grpc.CallOption) (*Null, error)
	// Rebuild operations
	StartRebuild(ctx context.Context, in *StartRebuildRequest, opts ...grpc.CallOption) (*Null, error)
	StopRebuild(ctx context.Context, in *StopRebuildRequest, opts ...grpc.CallOption) (*Null, error)
	PauseRebuild(ctx context.Context, in *PauseRebuildRequest, opts ...grpc.CallOption) (*Null, error)
	ResumeRebuild(ctx context.Context, in *ResumeRebuildRequest, opts ...grpc.CallOption) (*Null, error)
	GetRebuildState(ctx context.Context, in *RebuildStateRequest, opts ...grpc.CallOption) (*RebuildStateReply, error)
	GetRebuildStats(ctx context.Context, in *RebuildStatsRequest, opts ...grpc.CallOption) (*RebuildStatsReply, error)
	GetRebuildProgress(ctx context.Context, in *RebuildProgressRequest, opts ...grpc.CallOption) (*RebuildProgressReply, error)
	// Snapshot operations
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotReply, error)
	// Enumerate block devices on current host
	ListBlockDevices(ctx context.Context, in *ListBlockDevicesRequest, opts ...grpc.CallOption) (*ListBlockDevicesReply, error)
	// Obtain resource usage statistics for the current process
	GetResourceUsage(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetResourceUsageReply, error)
	// NVMe controllers
	ListNvmeControllers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListNvmeControllersReply, error)
	StatNvmeControllers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StatNvmeControllersReply, error)
}

type mayastorClient struct {
	cc grpc.ClientConnInterface
}

func NewMayastorClient(cc grpc.ClientConnInterface) MayastorClient {
	return &mayastorClient{cc}
}

func (c *mayastorClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*Pool, error) {
	out := new(Pool)
	err := c.cc.Invoke(ctx, Mayastor_CreatePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) DestroyPool(ctx context.Context, in *DestroyPoolRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_DestroyPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListPools(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListPoolsReply, error) {
	out := new(ListPoolsReply)
	err := c.cc.Invoke(ctx, Mayastor_ListPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*Replica, error) {
	out := new(Replica)
	err := c.cc.Invoke(ctx, Mayastor_CreateReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) CreateReplicaV2(ctx context.Context, in *CreateReplicaRequestV2, opts ...grpc.CallOption) (*ReplicaV2, error) {
	out := new(ReplicaV2)
	err := c.cc.Invoke(ctx, Mayastor_CreateReplicaV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) DestroyReplica(ctx context.Context, in *DestroyReplicaRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_DestroyReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListReplicas(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListReplicasReply, error) {
	out := new(ListReplicasReply)
	err := c.cc.Invoke(ctx, Mayastor_ListReplicas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListReplicasV2(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListReplicasReplyV2, error) {
	out := new(ListReplicasReplyV2)
	err := c.cc.Invoke(ctx, Mayastor_ListReplicasV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) StatReplicas(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StatReplicasReply, error) {
	out := new(StatReplicasReply)
	err := c.cc.Invoke(ctx, Mayastor_StatReplicas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ShareReplica(ctx context.Context, in *ShareReplicaRequest, opts ...grpc.CallOption) (*ShareReplicaReply, error) {
	out := new(ShareReplicaReply)
	err := c.cc.Invoke(ctx, Mayastor_ShareReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) CreateNexus(ctx context.Context, in *CreateNexusRequest, opts ...grpc.CallOption) (*Nexus, error) {
	out := new(Nexus)
	err := c.cc.Invoke(ctx, Mayastor_CreateNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) CreateNexusV2(ctx context.Context, in *CreateNexusV2Request, opts ...grpc.CallOption) (*Nexus, error) {
	out := new(Nexus)
	err := c.cc.Invoke(ctx, Mayastor_CreateNexusV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) DestroyNexus(ctx context.Context, in *DestroyNexusRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_DestroyNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListNexus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListNexusReply, error) {
	out := new(ListNexusReply)
	err := c.cc.Invoke(ctx, Mayastor_ListNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListNexusV2(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListNexusV2Reply, error) {
	out := new(ListNexusV2Reply)
	err := c.cc.Invoke(ctx, Mayastor_ListNexusV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) AddChildNexus(ctx context.Context, in *AddChildNexusRequest, opts ...grpc.CallOption) (*Child, error) {
	out := new(Child)
	err := c.cc.Invoke(ctx, Mayastor_AddChildNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) RemoveChildNexus(ctx context.Context, in *RemoveChildNexusRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_RemoveChildNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) FaultNexusChild(ctx context.Context, in *FaultNexusChildRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_FaultNexusChild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ShutdownNexus(ctx context.Context, in *ShutdownNexusRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_ShutdownNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) InjectNexusFault(ctx context.Context, in *InjectNexusFaultRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_InjectNexusFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) RemoveInjectedNexusFault(ctx context.Context, in *RemoveInjectedNexusFaultRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_RemoveInjectedNexusFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListInjectedNexusFaults(ctx context.Context, in *ListInjectedNexusFaultsRequest, opts ...grpc.CallOption) (*ListInjectedNexusFaultsReply, error) {
	out := new(ListInjectedNexusFaultsReply)
	err := c.cc.Invoke(ctx, Mayastor_ListInjectedNexusFaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) PublishNexus(ctx context.Context, in *PublishNexusRequest, opts ...grpc.CallOption) (*PublishNexusReply, error) {
	out := new(PublishNexusReply)
	err := c.cc.Invoke(ctx, Mayastor_PublishNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) UnpublishNexus(ctx context.Context, in *UnpublishNexusRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_UnpublishNexus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) GetNvmeAnaState(ctx context.Context, in *GetNvmeAnaStateRequest, opts ...grpc.CallOption) (*GetNvmeAnaStateReply, error) {
	out := new(GetNvmeAnaStateReply)
	err := c.cc.Invoke(ctx, Mayastor_GetNvmeAnaState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) SetNvmeAnaState(ctx context.Context, in *SetNvmeAnaStateRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_SetNvmeAnaState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) GetMayastorInfo(ctx context.Context, in *Null, opts ...grpc.CallOption) (*MayastorInfoRequest, error) {
	out := new(MayastorInfoRequest)
	err := c.cc.Invoke(ctx, Mayastor_GetMayastorInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ChildOperation(ctx context.Context, in *ChildNexusRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_ChildOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) StartRebuild(ctx context.Context, in *StartRebuildRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_StartRebuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) StopRebuild(ctx context.Context, in *StopRebuildRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_StopRebuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) PauseRebuild(ctx context.Context, in *PauseRebuildRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_PauseRebuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ResumeRebuild(ctx context.Context, in *ResumeRebuildRequest, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, Mayastor_ResumeRebuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) GetRebuildState(ctx context.Context, in *RebuildStateRequest, opts ...grpc.CallOption) (*RebuildStateReply, error) {
	out := new(RebuildStateReply)
	err := c.cc.Invoke(ctx, Mayastor_GetRebuildState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) GetRebuildStats(ctx context.Context, in *RebuildStatsRequest, opts ...grpc.CallOption) (*RebuildStatsReply, error) {
	out := new(RebuildStatsReply)
	err := c.cc.Invoke(ctx, Mayastor_GetRebuildStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) GetRebuildProgress(ctx context.Context, in *RebuildProgressRequest, opts ...grpc.CallOption) (*RebuildProgressReply, error) {
	out := new(RebuildProgressReply)
	err := c.cc.Invoke(ctx, Mayastor_GetRebuildProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotReply, error) {
	out := new(CreateSnapshotReply)
	err := c.cc.Invoke(ctx, Mayastor_CreateSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListBlockDevices(ctx context.Context, in *ListBlockDevicesRequest, opts ...grpc.CallOption) (*ListBlockDevicesReply, error) {
	out := new(ListBlockDevicesReply)
	err := c.cc.Invoke(ctx, Mayastor_ListBlockDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) GetResourceUsage(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetResourceUsageReply, error) {
	out := new(GetResourceUsageReply)
	err := c.cc.Invoke(ctx, Mayastor_GetResourceUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) ListNvmeControllers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ListNvmeControllersReply, error) {
	out := new(ListNvmeControllersReply)
	err := c.cc.Invoke(ctx, Mayastor_ListNvmeControllers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mayastorClient) StatNvmeControllers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StatNvmeControllersReply, error) {
	out := new(StatNvmeControllersReply)
	err := c.cc.Invoke(ctx, Mayastor_StatNvmeControllers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MayastorServer is the server API for Mayastor service.
// All implementations must embed UnimplementedMayastorServer
// for forward compatibility
type MayastorServer interface {
	CreatePool(context.Context, *CreatePoolRequest) (*Pool, error)
	DestroyPool(context.Context, *DestroyPoolRequest) (*Null, error)
	ListPools(context.Context, *Null) (*ListPoolsReply, error)
	CreateReplica(context.Context, *CreateReplicaRequest) (*Replica, error)
	CreateReplicaV2(context.Context, *CreateReplicaRequestV2) (*ReplicaV2, error)
	DestroyReplica(context.Context, *DestroyReplicaRequest) (*Null, error)
	ListReplicas(context.Context, *Null) (*ListReplicasReply, error)
	ListReplicasV2(context.Context, *Null) (*ListReplicasReplyV2, error)
	StatReplicas(context.Context, *Null) (*StatReplicasReply, error)
	ShareReplica(context.Context, *ShareReplicaRequest) (*ShareReplicaReply, error)
	CreateNexus(context.Context, *CreateNexusRequest) (*Nexus, error)
	CreateNexusV2(context.Context, *CreateNexusV2Request) (*Nexus, error)
	DestroyNexus(context.Context, *DestroyNexusRequest) (*Null, error)
	ListNexus(context.Context, *Null) (*ListNexusReply, error)
	ListNexusV2(context.Context, *Null) (*ListNexusV2Reply, error)
	AddChildNexus(context.Context, *AddChildNexusRequest) (*Child, error)
	RemoveChildNexus(context.Context, *RemoveChildNexusRequest) (*Null, error)
	FaultNexusChild(context.Context, *FaultNexusChildRequest) (*Null, error)
	ShutdownNexus(context.Context, *ShutdownNexusRequest) (*Null, error)
	// Nexus-level fault injection and other development methods
	InjectNexusFault(context.Context, *InjectNexusFaultRequest) (*Null, error)
	RemoveInjectedNexusFault(context.Context, *RemoveInjectedNexusFaultRequest) (*Null, error)
	ListInjectedNexusFaults(context.Context, *ListInjectedNexusFaultsRequest) (*ListInjectedNexusFaultsReply, error)
	// This method is called by control plane to construct a block device
	// (/dev/...) that will be used to connect the nexus to the OS.
	PublishNexus(context.Context, *PublishNexusRequest) (*PublishNexusReply, error)
	UnpublishNexus(context.Context, *UnpublishNexusRequest) (*Null, error)
	// NVMe ANA state
	GetNvmeAnaState(context.Context, *GetNvmeAnaStateRequest) (*GetNvmeAnaStateReply, error)
	SetNvmeAnaState(context.Context, *SetNvmeAnaStateRequest) (*Null, error)
	// Mayastor instance methods.
	GetMayastorInfo(context.Context, *Null) (*MayastorInfoRequest, error)
	// Nexus child operations
	ChildOperation(context.Context, *ChildNexusRequest) (*Null, error)
	// Rebuild operations
	StartRebuild(context.Context, *StartRebuildRequest) (*Null, error)
	StopRebuild(context.Context, *StopRebuildRequest) (*Null, error)
	PauseRebuild(context.Context, *PauseRebuildRequest) (*Null, error)
	ResumeRebuild(context.Context, *ResumeRebuildRequest) (*Null, error)
	GetRebuildState(context.Context, *RebuildStateRequest) (*RebuildStateReply, error)
	GetRebuildStats(context.Context, *RebuildStatsRequest) (*RebuildStatsReply, error)
	GetRebuildProgress(context.Context, *RebuildProgressRequest) (*RebuildProgressReply, error)
	// Snapshot operations
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotReply, error)
	// Enumerate block devices on current host
	ListBlockDevices(context.Context, *ListBlockDevicesRequest) (*ListBlockDevicesReply, error)
	// Obtain resource usage statistics for the current process
	GetResourceUsage(context.Context, *Null) (*GetResourceUsageReply, error)
	// NVMe controllers
	ListNvmeControllers(context.Context, *Null) (*ListNvmeControllersReply, error)
	StatNvmeControllers(context.Context, *Null) (*StatNvmeControllersReply, error)
	mustEmbedUnimplementedMayastorServer()
}

// UnimplementedMayastorServer must be embedded to have forward compatible implementations.
type UnimplementedMayastorServer struct {
}

func (UnimplementedMayastorServer) CreatePool(context.Context, *CreatePoolRequest) (*Pool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedMayastorServer) DestroyPool(context.Context, *DestroyPoolRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyPool not implemented")
}
func (UnimplementedMayastorServer) ListPools(context.Context, *Null) (*ListPoolsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (UnimplementedMayastorServer) CreateReplica(context.Context, *CreateReplicaRequest) (*Replica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplica not implemented")
}
func (UnimplementedMayastorServer) CreateReplicaV2(context.Context, *CreateReplicaRequestV2) (*ReplicaV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplicaV2 not implemented")
}
func (UnimplementedMayastorServer) DestroyReplica(context.Context, *DestroyReplicaRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyReplica not implemented")
}
func (UnimplementedMayastorServer) ListReplicas(context.Context, *Null) (*ListReplicasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplicas not implemented")
}
func (UnimplementedMayastorServer) ListReplicasV2(context.Context, *Null) (*ListReplicasReplyV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplicasV2 not implemented")
}
func (UnimplementedMayastorServer) StatReplicas(context.Context, *Null) (*StatReplicasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatReplicas not implemented")
}
func (UnimplementedMayastorServer) ShareReplica(context.Context, *ShareReplicaRequest) (*ShareReplicaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareReplica not implemented")
}
func (UnimplementedMayastorServer) CreateNexus(context.Context, *CreateNexusRequest) (*Nexus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNexus not implemented")
}
func (UnimplementedMayastorServer) CreateNexusV2(context.Context, *CreateNexusV2Request) (*Nexus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNexusV2 not implemented")
}
func (UnimplementedMayastorServer) DestroyNexus(context.Context, *DestroyNexusRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyNexus not implemented")
}
func (UnimplementedMayastorServer) ListNexus(context.Context, *Null) (*ListNexusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNexus not implemented")
}
func (UnimplementedMayastorServer) ListNexusV2(context.Context, *Null) (*ListNexusV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNexusV2 not implemented")
}
func (UnimplementedMayastorServer) AddChildNexus(context.Context, *AddChildNexusRequest) (*Child, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChildNexus not implemented")
}
func (UnimplementedMayastorServer) RemoveChildNexus(context.Context, *RemoveChildNexusRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChildNexus not implemented")
}
func (UnimplementedMayastorServer) FaultNexusChild(context.Context, *FaultNexusChildRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultNexusChild not implemented")
}
func (UnimplementedMayastorServer) ShutdownNexus(context.Context, *ShutdownNexusRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownNexus not implemented")
}
func (UnimplementedMayastorServer) InjectNexusFault(context.Context, *InjectNexusFaultRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectNexusFault not implemented")
}
func (UnimplementedMayastorServer) RemoveInjectedNexusFault(context.Context, *RemoveInjectedNexusFaultRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInjectedNexusFault not implemented")
}
func (UnimplementedMayastorServer) ListInjectedNexusFaults(context.Context, *ListInjectedNexusFaultsRequest) (*ListInjectedNexusFaultsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInjectedNexusFaults not implemented")
}
func (UnimplementedMayastorServer) PublishNexus(context.Context, *PublishNexusRequest) (*PublishNexusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNexus not implemented")
}
func (UnimplementedMayastorServer) UnpublishNexus(context.Context, *UnpublishNexusRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishNexus not implemented")
}
func (UnimplementedMayastorServer) GetNvmeAnaState(context.Context, *GetNvmeAnaStateRequest) (*GetNvmeAnaStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeAnaState not implemented")
}
func (UnimplementedMayastorServer) SetNvmeAnaState(context.Context, *SetNvmeAnaStateRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNvmeAnaState not implemented")
}
func (UnimplementedMayastorServer) GetMayastorInfo(context.Context, *Null) (*MayastorInfoRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMayastorInfo not implemented")
}
func (UnimplementedMayastorServer) ChildOperation(context.Context, *ChildNexusRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildOperation not implemented")
}
func (UnimplementedMayastorServer) StartRebuild(context.Context, *StartRebuildRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRebuild not implemented")
}
func (UnimplementedMayastorServer) StopRebuild(context.Context, *StopRebuildRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRebuild not implemented")
}
func (UnimplementedMayastorServer) PauseRebuild(context.Context, *PauseRebuildRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseRebuild not implemented")
}
func (UnimplementedMayastorServer) ResumeRebuild(context.Context, *ResumeRebuildRequest) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRebuild not implemented")
}
func (UnimplementedMayastorServer) GetRebuildState(context.Context, *RebuildStateRequest) (*RebuildStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebuildState not implemented")
}
func (UnimplementedMayastorServer) GetRebuildStats(context.Context, *RebuildStatsRequest) (*RebuildStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebuildStats not implemented")
}
func (UnimplementedMayastorServer) GetRebuildProgress(context.Context, *RebuildProgressRequest) (*RebuildProgressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebuildProgress not implemented")
}
func (UnimplementedMayastorServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedMayastorServer) ListBlockDevices(context.Context, *ListBlockDevicesRequest) (*ListBlockDevicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockDevices not implemented")
}
func (UnimplementedMayastorServer) GetResourceUsage(context.Context, *Null) (*GetResourceUsageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceUsage not implemented")
}
func (UnimplementedMayastorServer) ListNvmeControllers(context.Context, *Null) (*ListNvmeControllersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeControllers not implemented")
}
func (UnimplementedMayastorServer) StatNvmeControllers(context.Context, *Null) (*StatNvmeControllersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatNvmeControllers not implemented")
}
func (UnimplementedMayastorServer) mustEmbedUnimplementedMayastorServer() {}

// UnsafeMayastorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MayastorServer will
// result in compilation errors.
type UnsafeMayastorServer interface {
	mustEmbedUnimplementedMayastorServer()
}

func RegisterMayastorServer(s grpc.ServiceRegistrar, srv MayastorServer) {
	s.RegisterService(&Mayastor_ServiceDesc, srv)
}

func _Mayastor_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_CreatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_DestroyPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).DestroyPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_DestroyPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).DestroyPool(ctx, req.(*DestroyPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListPools(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_CreateReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).CreateReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_CreateReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).CreateReplica(ctx, req.(*CreateReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_CreateReplicaV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).CreateReplicaV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_CreateReplicaV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).CreateReplicaV2(ctx, req.(*CreateReplicaRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_DestroyReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).DestroyReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_DestroyReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).DestroyReplica(ctx, req.(*DestroyReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListReplicas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListReplicas(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListReplicasV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListReplicasV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListReplicasV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListReplicasV2(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_StatReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).StatReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_StatReplicas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).StatReplicas(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ShareReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ShareReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ShareReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ShareReplica(ctx, req.(*ShareReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_CreateNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).CreateNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_CreateNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).CreateNexus(ctx, req.(*CreateNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_CreateNexusV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNexusV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).CreateNexusV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_CreateNexusV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).CreateNexusV2(ctx, req.(*CreateNexusV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_DestroyNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).DestroyNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_DestroyNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).DestroyNexus(ctx, req.(*DestroyNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListNexus(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListNexusV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListNexusV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListNexusV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListNexusV2(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_AddChildNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChildNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).AddChildNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_AddChildNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).AddChildNexus(ctx, req.(*AddChildNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_RemoveChildNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChildNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).RemoveChildNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_RemoveChildNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).RemoveChildNexus(ctx, req.(*RemoveChildNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_FaultNexusChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaultNexusChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).FaultNexusChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_FaultNexusChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).FaultNexusChild(ctx, req.(*FaultNexusChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ShutdownNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ShutdownNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ShutdownNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ShutdownNexus(ctx, req.(*ShutdownNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_InjectNexusFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectNexusFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).InjectNexusFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_InjectNexusFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).InjectNexusFault(ctx, req.(*InjectNexusFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_RemoveInjectedNexusFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInjectedNexusFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).RemoveInjectedNexusFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_RemoveInjectedNexusFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).RemoveInjectedNexusFault(ctx, req.(*RemoveInjectedNexusFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListInjectedNexusFaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInjectedNexusFaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListInjectedNexusFaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListInjectedNexusFaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListInjectedNexusFaults(ctx, req.(*ListInjectedNexusFaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_PublishNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).PublishNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_PublishNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).PublishNexus(ctx, req.(*PublishNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_UnpublishNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).UnpublishNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_UnpublishNexus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).UnpublishNexus(ctx, req.(*UnpublishNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_GetNvmeAnaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeAnaStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).GetNvmeAnaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_GetNvmeAnaState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).GetNvmeAnaState(ctx, req.(*GetNvmeAnaStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_SetNvmeAnaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNvmeAnaStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).SetNvmeAnaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_SetNvmeAnaState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).SetNvmeAnaState(ctx, req.(*SetNvmeAnaStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_GetMayastorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).GetMayastorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_GetMayastorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).GetMayastorInfo(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ChildOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChildNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ChildOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ChildOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ChildOperation(ctx, req.(*ChildNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_StartRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).StartRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_StartRebuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).StartRebuild(ctx, req.(*StartRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_StopRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).StopRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_StopRebuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).StopRebuild(ctx, req.(*StopRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_PauseRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).PauseRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_PauseRebuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).PauseRebuild(ctx, req.(*PauseRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ResumeRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ResumeRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ResumeRebuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ResumeRebuild(ctx, req.(*ResumeRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_GetRebuildState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).GetRebuildState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_GetRebuildState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).GetRebuildState(ctx, req.(*RebuildStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_GetRebuildStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).GetRebuildStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_GetRebuildStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).GetRebuildStats(ctx, req.(*RebuildStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_GetRebuildProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).GetRebuildProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_GetRebuildProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).GetRebuildProgress(ctx, req.(*RebuildProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListBlockDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListBlockDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListBlockDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListBlockDevices(ctx, req.(*ListBlockDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_GetResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).GetResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_GetResourceUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).GetResourceUsage(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_ListNvmeControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).ListNvmeControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_ListNvmeControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).ListNvmeControllers(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mayastor_StatNvmeControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MayastorServer).StatNvmeControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mayastor_StatNvmeControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MayastorServer).StatNvmeControllers(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// Mayastor_ServiceDesc is the grpc.ServiceDesc for Mayastor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mayastor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.Mayastor",
	HandlerType: (*MayastorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePool",
			Handler:    _Mayastor_CreatePool_Handler,
		},
		{
			MethodName: "DestroyPool",
			Handler:    _Mayastor_DestroyPool_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _Mayastor_ListPools_Handler,
		},
		{
			MethodName: "CreateReplica",
			Handler:    _Mayastor_CreateReplica_Handler,
		},
		{
			MethodName: "CreateReplicaV2",
			Handler:    _Mayastor_CreateReplicaV2_Handler,
		},
		{
			MethodName: "DestroyReplica",
			Handler:    _Mayastor_DestroyReplica_Handler,
		},
		{
			MethodName: "ListReplicas",
			Handler:    _Mayastor_ListReplicas_Handler,
		},
		{
			MethodName: "ListReplicasV2",
			Handler:    _Mayastor_ListReplicasV2_Handler,
		},
		{
			MethodName: "StatReplicas",
			Handler:    _Mayastor_StatReplicas_Handler,
		},
		{
			MethodName: "ShareReplica",
			Handler:    _Mayastor_ShareReplica_Handler,
		},
		{
			MethodName: "CreateNexus",
			Handler:    _Mayastor_CreateNexus_Handler,
		},
		{
			MethodName: "CreateNexusV2",
			Handler:    _Mayastor_CreateNexusV2_Handler,
		},
		{
			MethodName: "DestroyNexus",
			Handler:    _Mayastor_DestroyNexus_Handler,
		},
		{
			MethodName: "ListNexus",
			Handler:    _Mayastor_ListNexus_Handler,
		},
		{
			MethodName: "ListNexusV2",
			Handler:    _Mayastor_ListNexusV2_Handler,
		},
		{
			MethodName: "AddChildNexus",
			Handler:    _Mayastor_AddChildNexus_Handler,
		},
		{
			MethodName: "RemoveChildNexus",
			Handler:    _Mayastor_RemoveChildNexus_Handler,
		},
		{
			MethodName: "FaultNexusChild",
			Handler:    _Mayastor_FaultNexusChild_Handler,
		},
		{
			MethodName: "ShutdownNexus",
			Handler:    _Mayastor_ShutdownNexus_Handler,
		},
		{
			MethodName: "InjectNexusFault",
			Handler:    _Mayastor_InjectNexusFault_Handler,
		},
		{
			MethodName: "RemoveInjectedNexusFault",
			Handler:    _Mayastor_RemoveInjectedNexusFault_Handler,
		},
		{
			MethodName: "ListInjectedNexusFaults",
			Handler:    _Mayastor_ListInjectedNexusFaults_Handler,
		},
		{
			MethodName: "PublishNexus",
			Handler:    _Mayastor_PublishNexus_Handler,
		},
		{
			MethodName: "UnpublishNexus",
			Handler:    _Mayastor_UnpublishNexus_Handler,
		},
		{
			MethodName: "GetNvmeAnaState",
			Handler:    _Mayastor_GetNvmeAnaState_Handler,
		},
		{
			MethodName: "SetNvmeAnaState",
			Handler:    _Mayastor_SetNvmeAnaState_Handler,
		},
		{
			MethodName: "GetMayastorInfo",
			Handler:    _Mayastor_GetMayastorInfo_Handler,
		},
		{
			MethodName: "ChildOperation",
			Handler:    _Mayastor_ChildOperation_Handler,
		},
		{
			MethodName: "StartRebuild",
			Handler:    _Mayastor_StartRebuild_Handler,
		},
		{
			MethodName: "StopRebuild",
			Handler:    _Mayastor_StopRebuild_Handler,
		},
		{
			MethodName: "PauseRebuild",
			Handler:    _Mayastor_PauseRebuild_Handler,
		},
		{
			MethodName: "ResumeRebuild",
			Handler:    _Mayastor_ResumeRebuild_Handler,
		},
		{
			MethodName: "GetRebuildState",
			Handler:    _Mayastor_GetRebuildState_Handler,
		},
		{
			MethodName: "GetRebuildStats",
			Handler:    _Mayastor_GetRebuildStats_Handler,
		},
		{
			MethodName: "GetRebuildProgress",
			Handler:    _Mayastor_GetRebuildProgress_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _Mayastor_CreateSnapshot_Handler,
		},
		{
			MethodName: "ListBlockDevices",
			Handler:    _Mayastor_ListBlockDevices_Handler,
		},
		{
			MethodName: "GetResourceUsage",
			Handler:    _Mayastor_GetResourceUsage_Handler,
		},
		{
			MethodName: "ListNvmeControllers",
			Handler:    _Mayastor_ListNvmeControllers_Handler,
		},
		{
			MethodName: "StatNvmeControllers",
			Handler:    _Mayastor_StatNvmeControllers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mayastor.proto",
}

const (
	BdevRpc_List_FullMethodName    = "/mayastor.BdevRpc/List"
	BdevRpc_Create_FullMethodName  = "/mayastor.BdevRpc/Create"
	BdevRpc_Destroy_FullMethodName = "/mayastor.BdevRpc/Destroy"
	BdevRpc_Share_FullMethodName   = "/mayastor.BdevRpc/Share"
	BdevRpc_Unshare_FullMethodName = "/mayastor.BdevRpc/Unshare"
)

// BdevRpcClient is the client API for BdevRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BdevRpcClient interface {
	List(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Bdevs, error)
	Create(ctx context.Context, in *BdevUri, opts ...grpc.CallOption) (*CreateReply, error)
	Destroy(ctx context.Context, in *BdevUri, opts ...grpc.CallOption) (*Null, error)
	Share(ctx context.Context, in *BdevShareRequest, opts ...grpc.CallOption) (*BdevShareReply, error)
	Unshare(ctx context.Context, in *CreateReply, opts ...grpc.CallOption) (*Null, error)
}

type bdevRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBdevRpcClient(cc grpc.ClientConnInterface) BdevRpcClient {
	return &bdevRpcClient{cc}
}

func (c *bdevRpcClient) List(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Bdevs, error) {
	out := new(Bdevs)
	err := c.cc.Invoke(ctx, BdevRpc_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Create(ctx context.Context, in *BdevUri, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, BdevRpc_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Destroy(ctx context.Context, in *BdevUri, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, BdevRpc_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Share(ctx context.Context, in *BdevShareRequest, opts ...grpc.CallOption) (*BdevShareReply, error) {
	out := new(BdevShareReply)
	err := c.cc.Invoke(ctx, BdevRpc_Share_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Unshare(ctx context.Context, in *CreateReply, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, BdevRpc_Unshare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BdevRpcServer is the server API for BdevRpc service.
// All implementations must embed UnimplementedBdevRpcServer
// for forward compatibility
type BdevRpcServer interface {
	List(context.Context, *Null) (*Bdevs, error)
	Create(context.Context, *BdevUri) (*CreateReply, error)
	Destroy(context.Context, *BdevUri) (*Null, error)
	Share(context.Context, *BdevShareRequest) (*BdevShareReply, error)
	Unshare(context.Context, *CreateReply) (*Null, error)
	mustEmbedUnimplementedBdevRpcServer()
}

// UnimplementedBdevRpcServer must be embedded to have forward compatible implementations.
type UnimplementedBdevRpcServer struct {
}

func (UnimplementedBdevRpcServer) List(context.Context, *Null) (*Bdevs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBdevRpcServer) Create(context.Context, *BdevUri) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBdevRpcServer) Destroy(context.Context, *BdevUri) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedBdevRpcServer) Share(context.Context, *BdevShareRequest) (*BdevShareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (UnimplementedBdevRpcServer) Unshare(context.Context, *CreateReply) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unshare not implemented")
}
func (UnimplementedBdevRpcServer) mustEmbedUnimplementedBdevRpcServer() {}

// UnsafeBdevRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BdevRpcServer will
// result in compilation errors.
type UnsafeBdevRpcServer interface {
	mustEmbedUnimplementedBdevRpcServer()
}

func RegisterBdevRpcServer(s grpc.ServiceRegistrar, srv BdevRpcServer) {
	s.RegisterService(&BdevRpc_ServiceDesc, srv)
}

func _BdevRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).List(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BdevUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Create(ctx, req.(*BdevUri))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BdevUri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Destroy(ctx, req.(*BdevUri))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BdevShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Share_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Share(ctx, req.(*BdevShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Unshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Unshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Unshare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Unshare(ctx, req.(*CreateReply))
	}
	return interceptor(ctx, in, info, handler)
}

// BdevRpc_ServiceDesc is the grpc.ServiceDesc for BdevRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BdevRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.BdevRpc",
	HandlerType: (*BdevRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BdevRpc_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BdevRpc_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _BdevRpc_Destroy_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _BdevRpc_Share_Handler,
		},
		{
			MethodName: "Unshare",
			Handler:    _BdevRpc_Unshare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mayastor.proto",
}

const (
	JsonRpc_JsonRpcCall_FullMethodName = "/mayastor.JsonRpc/JsonRpcCall"
)

// JsonRpcClient is the client API for JsonRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JsonRpcClient interface {
	// Call a (SPDK) json-rpc method
	JsonRpcCall(ctx context.Context, in *JsonRpcRequest, opts ...grpc.CallOption) (*JsonRpcReply, error)
}

type jsonRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonRpcClient(cc grpc.ClientConnInterface) JsonRpcClient {
	return &jsonRpcClient{cc}
}

func (c *jsonRpcClient) JsonRpcCall(ctx context.Context, in *JsonRpcRequest, opts ...grpc.CallOption) (*JsonRpcReply, error) {
	out := new(JsonRpcReply)
	err := c.cc.Invoke(ctx, JsonRpc_JsonRpcCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsonRpcServer is the server API for JsonRpc service.
// All implementations must embed UnimplementedJsonRpcServer
// for forward compatibility
type JsonRpcServer interface {
	// Call a (SPDK) json-rpc method
	JsonRpcCall(context.Context, *JsonRpcRequest) (*JsonRpcReply, error)
	mustEmbedUnimplementedJsonRpcServer()
}

// UnimplementedJsonRpcServer must be embedded to have forward compatible implementations.
type UnimplementedJsonRpcServer struct {
}

func (UnimplementedJsonRpcServer) JsonRpcCall(context.Context, *JsonRpcRequest) (*JsonRpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsonRpcCall not implemented")
}
func (UnimplementedJsonRpcServer) mustEmbedUnimplementedJsonRpcServer() {}

// UnsafeJsonRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JsonRpcServer will
// result in compilation errors.
type UnsafeJsonRpcServer interface {
	mustEmbedUnimplementedJsonRpcServer()
}

func RegisterJsonRpcServer(s grpc.ServiceRegistrar, srv JsonRpcServer) {
	s.RegisterService(&JsonRpc_ServiceDesc, srv)
}

func _JsonRpc_JsonRpcCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonRpcServer).JsonRpcCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JsonRpc_JsonRpcCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonRpcServer).JsonRpcCall(ctx, req.(*JsonRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JsonRpc_ServiceDesc is the grpc.ServiceDesc for JsonRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JsonRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.JsonRpc",
	HandlerType: (*JsonRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JsonRpcCall",
			Handler:    _JsonRpc_JsonRpcCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mayastor.proto",
}
