// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: bdev.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BdevRpc_Create_FullMethodName  = "/mayastor.v1.BdevRpc/Create"
	BdevRpc_Destroy_FullMethodName = "/mayastor.v1.BdevRpc/Destroy"
	BdevRpc_List_FullMethodName    = "/mayastor.v1.BdevRpc/List"
	BdevRpc_Share_FullMethodName   = "/mayastor.v1.BdevRpc/Share"
	BdevRpc_Unshare_FullMethodName = "/mayastor.v1.BdevRpc/Unshare"
)

// BdevRpcClient is the client API for BdevRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BdevRpcClient interface {
	// create a new block device using a uri scheme
	Create(ctx context.Context, in *CreateBdevRequest, opts ...grpc.CallOption) (*CreateBdevResponse, error)
	// destroys the block device
	Destroy(ctx context.Context, in *DestroyBdevRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// list the block devices
	List(ctx context.Context, in *ListBdevOptions, opts ...grpc.CallOption) (*ListBdevResponse, error)
	// share the block device
	Share(ctx context.Context, in *BdevShareRequest, opts ...grpc.CallOption) (*BdevShareResponse, error)
	// unshare the block device
	Unshare(ctx context.Context, in *BdevUnshareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bdevRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBdevRpcClient(cc grpc.ClientConnInterface) BdevRpcClient {
	return &bdevRpcClient{cc}
}

func (c *bdevRpcClient) Create(ctx context.Context, in *CreateBdevRequest, opts ...grpc.CallOption) (*CreateBdevResponse, error) {
	out := new(CreateBdevResponse)
	err := c.cc.Invoke(ctx, BdevRpc_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Destroy(ctx context.Context, in *DestroyBdevRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BdevRpc_Destroy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) List(ctx context.Context, in *ListBdevOptions, opts ...grpc.CallOption) (*ListBdevResponse, error) {
	out := new(ListBdevResponse)
	err := c.cc.Invoke(ctx, BdevRpc_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Share(ctx context.Context, in *BdevShareRequest, opts ...grpc.CallOption) (*BdevShareResponse, error) {
	out := new(BdevShareResponse)
	err := c.cc.Invoke(ctx, BdevRpc_Share_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bdevRpcClient) Unshare(ctx context.Context, in *BdevUnshareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BdevRpc_Unshare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BdevRpcServer is the server API for BdevRpc service.
// All implementations must embed UnimplementedBdevRpcServer
// for forward compatibility
type BdevRpcServer interface {
	// create a new block device using a uri scheme
	Create(context.Context, *CreateBdevRequest) (*CreateBdevResponse, error)
	// destroys the block device
	Destroy(context.Context, *DestroyBdevRequest) (*emptypb.Empty, error)
	// list the block devices
	List(context.Context, *ListBdevOptions) (*ListBdevResponse, error)
	// share the block device
	Share(context.Context, *BdevShareRequest) (*BdevShareResponse, error)
	// unshare the block device
	Unshare(context.Context, *BdevUnshareRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBdevRpcServer()
}

// UnimplementedBdevRpcServer must be embedded to have forward compatible implementations.
type UnimplementedBdevRpcServer struct {
}

func (UnimplementedBdevRpcServer) Create(context.Context, *CreateBdevRequest) (*CreateBdevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBdevRpcServer) Destroy(context.Context, *DestroyBdevRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedBdevRpcServer) List(context.Context, *ListBdevOptions) (*ListBdevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBdevRpcServer) Share(context.Context, *BdevShareRequest) (*BdevShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (UnimplementedBdevRpcServer) Unshare(context.Context, *BdevUnshareRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unshare not implemented")
}
func (UnimplementedBdevRpcServer) mustEmbedUnimplementedBdevRpcServer() {}

// UnsafeBdevRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BdevRpcServer will
// result in compilation errors.
type UnsafeBdevRpcServer interface {
	mustEmbedUnimplementedBdevRpcServer()
}

func RegisterBdevRpcServer(s grpc.ServiceRegistrar, srv BdevRpcServer) {
	s.RegisterService(&BdevRpc_ServiceDesc, srv)
}

func _BdevRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBdevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Create(ctx, req.(*CreateBdevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyBdevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Destroy(ctx, req.(*DestroyBdevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBdevOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).List(ctx, req.(*ListBdevOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BdevShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Share_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Share(ctx, req.(*BdevShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BdevRpc_Unshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BdevUnshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BdevRpcServer).Unshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BdevRpc_Unshare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BdevRpcServer).Unshare(ctx, req.(*BdevUnshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BdevRpc_ServiceDesc is the grpc.ServiceDesc for BdevRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BdevRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.v1.BdevRpc",
	HandlerType: (*BdevRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BdevRpc_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _BdevRpc_Destroy_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BdevRpc_List_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _BdevRpc_Share_Handler,
		},
		{
			MethodName: "Unshare",
			Handler:    _BdevRpc_Unshare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bdev.proto",
}
