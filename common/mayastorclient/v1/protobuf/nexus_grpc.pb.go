// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: nexus.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NexusRpcClient is the client API for NexusRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusRpcClient interface {
	CreateNexus(ctx context.Context, in *CreateNexusRequest, opts ...grpc.CallOption) (*CreateNexusResponse, error)
	DestroyNexus(ctx context.Context, in *DestroyNexusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListNexus(ctx context.Context, in *ListNexusOptions, opts ...grpc.CallOption) (*ListNexusResponse, error)
	AddChildNexus(ctx context.Context, in *AddChildNexusRequest, opts ...grpc.CallOption) (*AddChildNexusResponse, error)
	RemoveChildNexus(ctx context.Context, in *RemoveChildNexusRequest, opts ...grpc.CallOption) (*RemoveChildNexusResponse, error)
	// take a child offline permanently; exactly the same ChildOperation OfflinePermanent
	FaultNexusChild(ctx context.Context, in *FaultNexusChildRequest, opts ...grpc.CallOption) (*FaultNexusChildResponse, error)
	ShutdownNexus(ctx context.Context, in *ShutdownNexusRequest, opts ...grpc.CallOption) (*ShutdownNexusResponse, error)
	// This method is called by control plane to construct a block device
	// (/dev/...) that will be used to connect the nexus to the OS.
	PublishNexus(ctx context.Context, in *PublishNexusRequest, opts ...grpc.CallOption) (*PublishNexusResponse, error)
	UnpublishNexus(ctx context.Context, in *UnpublishNexusRequest, opts ...grpc.CallOption) (*UnpublishNexusResponse, error)
	// NVMe ANA state
	GetNvmeAnaState(ctx context.Context, in *GetNvmeAnaStateRequest, opts ...grpc.CallOption) (*GetNvmeAnaStateResponse, error)
	SetNvmeAnaState(ctx context.Context, in *SetNvmeAnaStateRequest, opts ...grpc.CallOption) (*SetNvmeAnaStateResponse, error)
	// Nexus child operations
	ChildOperation(ctx context.Context, in *ChildOperationRequest, opts ...grpc.CallOption) (*ChildOperationResponse, error)
	// Rebuild operations
	StartRebuild(ctx context.Context, in *StartRebuildRequest, opts ...grpc.CallOption) (*StartRebuildResponse, error)
	StopRebuild(ctx context.Context, in *StopRebuildRequest, opts ...grpc.CallOption) (*StopRebuildResponse, error)
	PauseRebuild(ctx context.Context, in *PauseRebuildRequest, opts ...grpc.CallOption) (*PauseRebuildResponse, error)
	ResumeRebuild(ctx context.Context, in *ResumeRebuildRequest, opts ...grpc.CallOption) (*ResumeRebuildResponse, error)
	GetRebuildState(ctx context.Context, in *RebuildStateRequest, opts ...grpc.CallOption) (*RebuildStateResponse, error)
	GetRebuildStats(ctx context.Context, in *RebuildStatsRequest, opts ...grpc.CallOption) (*RebuildStatsResponse, error)
	GetRebuildHistory(ctx context.Context, in *RebuildHistoryRequest, opts ...grpc.CallOption) (*RebuildHistoryResponse, error)
	ListRebuildHistory(ctx context.Context, in *ListRebuildHistoryRequest, opts ...grpc.CallOption) (*ListRebuildHistoryResponse, error)
}

type nexusRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusRpcClient(cc grpc.ClientConnInterface) NexusRpcClient {
	return &nexusRpcClient{cc}
}

func (c *nexusRpcClient) CreateNexus(ctx context.Context, in *CreateNexusRequest, opts ...grpc.CallOption) (*CreateNexusResponse, error) {
	out := new(CreateNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/CreateNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) DestroyNexus(ctx context.Context, in *DestroyNexusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/DestroyNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) ListNexus(ctx context.Context, in *ListNexusOptions, opts ...grpc.CallOption) (*ListNexusResponse, error) {
	out := new(ListNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/ListNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) AddChildNexus(ctx context.Context, in *AddChildNexusRequest, opts ...grpc.CallOption) (*AddChildNexusResponse, error) {
	out := new(AddChildNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/AddChildNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) RemoveChildNexus(ctx context.Context, in *RemoveChildNexusRequest, opts ...grpc.CallOption) (*RemoveChildNexusResponse, error) {
	out := new(RemoveChildNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/RemoveChildNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) FaultNexusChild(ctx context.Context, in *FaultNexusChildRequest, opts ...grpc.CallOption) (*FaultNexusChildResponse, error) {
	out := new(FaultNexusChildResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/FaultNexusChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) ShutdownNexus(ctx context.Context, in *ShutdownNexusRequest, opts ...grpc.CallOption) (*ShutdownNexusResponse, error) {
	out := new(ShutdownNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/ShutdownNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) PublishNexus(ctx context.Context, in *PublishNexusRequest, opts ...grpc.CallOption) (*PublishNexusResponse, error) {
	out := new(PublishNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/PublishNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) UnpublishNexus(ctx context.Context, in *UnpublishNexusRequest, opts ...grpc.CallOption) (*UnpublishNexusResponse, error) {
	out := new(UnpublishNexusResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/UnpublishNexus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) GetNvmeAnaState(ctx context.Context, in *GetNvmeAnaStateRequest, opts ...grpc.CallOption) (*GetNvmeAnaStateResponse, error) {
	out := new(GetNvmeAnaStateResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/GetNvmeAnaState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) SetNvmeAnaState(ctx context.Context, in *SetNvmeAnaStateRequest, opts ...grpc.CallOption) (*SetNvmeAnaStateResponse, error) {
	out := new(SetNvmeAnaStateResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/SetNvmeAnaState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) ChildOperation(ctx context.Context, in *ChildOperationRequest, opts ...grpc.CallOption) (*ChildOperationResponse, error) {
	out := new(ChildOperationResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/ChildOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) StartRebuild(ctx context.Context, in *StartRebuildRequest, opts ...grpc.CallOption) (*StartRebuildResponse, error) {
	out := new(StartRebuildResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/StartRebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) StopRebuild(ctx context.Context, in *StopRebuildRequest, opts ...grpc.CallOption) (*StopRebuildResponse, error) {
	out := new(StopRebuildResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/StopRebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) PauseRebuild(ctx context.Context, in *PauseRebuildRequest, opts ...grpc.CallOption) (*PauseRebuildResponse, error) {
	out := new(PauseRebuildResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/PauseRebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) ResumeRebuild(ctx context.Context, in *ResumeRebuildRequest, opts ...grpc.CallOption) (*ResumeRebuildResponse, error) {
	out := new(ResumeRebuildResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/ResumeRebuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) GetRebuildState(ctx context.Context, in *RebuildStateRequest, opts ...grpc.CallOption) (*RebuildStateResponse, error) {
	out := new(RebuildStateResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/GetRebuildState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) GetRebuildStats(ctx context.Context, in *RebuildStatsRequest, opts ...grpc.CallOption) (*RebuildStatsResponse, error) {
	out := new(RebuildStatsResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/GetRebuildStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) GetRebuildHistory(ctx context.Context, in *RebuildHistoryRequest, opts ...grpc.CallOption) (*RebuildHistoryResponse, error) {
	out := new(RebuildHistoryResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/GetRebuildHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusRpcClient) ListRebuildHistory(ctx context.Context, in *ListRebuildHistoryRequest, opts ...grpc.CallOption) (*ListRebuildHistoryResponse, error) {
	out := new(ListRebuildHistoryResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.NexusRpc/ListRebuildHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusRpcServer is the server API for NexusRpc service.
// All implementations must embed UnimplementedNexusRpcServer
// for forward compatibility
type NexusRpcServer interface {
	CreateNexus(context.Context, *CreateNexusRequest) (*CreateNexusResponse, error)
	DestroyNexus(context.Context, *DestroyNexusRequest) (*emptypb.Empty, error)
	ListNexus(context.Context, *ListNexusOptions) (*ListNexusResponse, error)
	AddChildNexus(context.Context, *AddChildNexusRequest) (*AddChildNexusResponse, error)
	RemoveChildNexus(context.Context, *RemoveChildNexusRequest) (*RemoveChildNexusResponse, error)
	// take a child offline permanently; exactly the same ChildOperation OfflinePermanent
	FaultNexusChild(context.Context, *FaultNexusChildRequest) (*FaultNexusChildResponse, error)
	ShutdownNexus(context.Context, *ShutdownNexusRequest) (*ShutdownNexusResponse, error)
	// This method is called by control plane to construct a block device
	// (/dev/...) that will be used to connect the nexus to the OS.
	PublishNexus(context.Context, *PublishNexusRequest) (*PublishNexusResponse, error)
	UnpublishNexus(context.Context, *UnpublishNexusRequest) (*UnpublishNexusResponse, error)
	// NVMe ANA state
	GetNvmeAnaState(context.Context, *GetNvmeAnaStateRequest) (*GetNvmeAnaStateResponse, error)
	SetNvmeAnaState(context.Context, *SetNvmeAnaStateRequest) (*SetNvmeAnaStateResponse, error)
	// Nexus child operations
	ChildOperation(context.Context, *ChildOperationRequest) (*ChildOperationResponse, error)
	// Rebuild operations
	StartRebuild(context.Context, *StartRebuildRequest) (*StartRebuildResponse, error)
	StopRebuild(context.Context, *StopRebuildRequest) (*StopRebuildResponse, error)
	PauseRebuild(context.Context, *PauseRebuildRequest) (*PauseRebuildResponse, error)
	ResumeRebuild(context.Context, *ResumeRebuildRequest) (*ResumeRebuildResponse, error)
	GetRebuildState(context.Context, *RebuildStateRequest) (*RebuildStateResponse, error)
	GetRebuildStats(context.Context, *RebuildStatsRequest) (*RebuildStatsResponse, error)
	GetRebuildHistory(context.Context, *RebuildHistoryRequest) (*RebuildHistoryResponse, error)
	ListRebuildHistory(context.Context, *ListRebuildHistoryRequest) (*ListRebuildHistoryResponse, error)
	mustEmbedUnimplementedNexusRpcServer()
}

// UnimplementedNexusRpcServer must be embedded to have forward compatible implementations.
type UnimplementedNexusRpcServer struct {
}

func (UnimplementedNexusRpcServer) CreateNexus(context.Context, *CreateNexusRequest) (*CreateNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNexus not implemented")
}
func (UnimplementedNexusRpcServer) DestroyNexus(context.Context, *DestroyNexusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyNexus not implemented")
}
func (UnimplementedNexusRpcServer) ListNexus(context.Context, *ListNexusOptions) (*ListNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNexus not implemented")
}
func (UnimplementedNexusRpcServer) AddChildNexus(context.Context, *AddChildNexusRequest) (*AddChildNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChildNexus not implemented")
}
func (UnimplementedNexusRpcServer) RemoveChildNexus(context.Context, *RemoveChildNexusRequest) (*RemoveChildNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChildNexus not implemented")
}
func (UnimplementedNexusRpcServer) FaultNexusChild(context.Context, *FaultNexusChildRequest) (*FaultNexusChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FaultNexusChild not implemented")
}
func (UnimplementedNexusRpcServer) ShutdownNexus(context.Context, *ShutdownNexusRequest) (*ShutdownNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownNexus not implemented")
}
func (UnimplementedNexusRpcServer) PublishNexus(context.Context, *PublishNexusRequest) (*PublishNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNexus not implemented")
}
func (UnimplementedNexusRpcServer) UnpublishNexus(context.Context, *UnpublishNexusRequest) (*UnpublishNexusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishNexus not implemented")
}
func (UnimplementedNexusRpcServer) GetNvmeAnaState(context.Context, *GetNvmeAnaStateRequest) (*GetNvmeAnaStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeAnaState not implemented")
}
func (UnimplementedNexusRpcServer) SetNvmeAnaState(context.Context, *SetNvmeAnaStateRequest) (*SetNvmeAnaStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNvmeAnaState not implemented")
}
func (UnimplementedNexusRpcServer) ChildOperation(context.Context, *ChildOperationRequest) (*ChildOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildOperation not implemented")
}
func (UnimplementedNexusRpcServer) StartRebuild(context.Context, *StartRebuildRequest) (*StartRebuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRebuild not implemented")
}
func (UnimplementedNexusRpcServer) StopRebuild(context.Context, *StopRebuildRequest) (*StopRebuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRebuild not implemented")
}
func (UnimplementedNexusRpcServer) PauseRebuild(context.Context, *PauseRebuildRequest) (*PauseRebuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseRebuild not implemented")
}
func (UnimplementedNexusRpcServer) ResumeRebuild(context.Context, *ResumeRebuildRequest) (*ResumeRebuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRebuild not implemented")
}
func (UnimplementedNexusRpcServer) GetRebuildState(context.Context, *RebuildStateRequest) (*RebuildStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebuildState not implemented")
}
func (UnimplementedNexusRpcServer) GetRebuildStats(context.Context, *RebuildStatsRequest) (*RebuildStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebuildStats not implemented")
}
func (UnimplementedNexusRpcServer) GetRebuildHistory(context.Context, *RebuildHistoryRequest) (*RebuildHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebuildHistory not implemented")
}
func (UnimplementedNexusRpcServer) ListRebuildHistory(context.Context, *ListRebuildHistoryRequest) (*ListRebuildHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRebuildHistory not implemented")
}
func (UnimplementedNexusRpcServer) mustEmbedUnimplementedNexusRpcServer() {}

// UnsafeNexusRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusRpcServer will
// result in compilation errors.
type UnsafeNexusRpcServer interface {
	mustEmbedUnimplementedNexusRpcServer()
}

func RegisterNexusRpcServer(s grpc.ServiceRegistrar, srv NexusRpcServer) {
	s.RegisterService(&NexusRpc_ServiceDesc, srv)
}

func _NexusRpc_CreateNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).CreateNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/CreateNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).CreateNexus(ctx, req.(*CreateNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_DestroyNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).DestroyNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/DestroyNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).DestroyNexus(ctx, req.(*DestroyNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_ListNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNexusOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).ListNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/ListNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).ListNexus(ctx, req.(*ListNexusOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_AddChildNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChildNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).AddChildNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/AddChildNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).AddChildNexus(ctx, req.(*AddChildNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_RemoveChildNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChildNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).RemoveChildNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/RemoveChildNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).RemoveChildNexus(ctx, req.(*RemoveChildNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_FaultNexusChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaultNexusChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).FaultNexusChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/FaultNexusChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).FaultNexusChild(ctx, req.(*FaultNexusChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_ShutdownNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).ShutdownNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/ShutdownNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).ShutdownNexus(ctx, req.(*ShutdownNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_PublishNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).PublishNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/PublishNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).PublishNexus(ctx, req.(*PublishNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_UnpublishNexus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishNexusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).UnpublishNexus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/UnpublishNexus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).UnpublishNexus(ctx, req.(*UnpublishNexusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_GetNvmeAnaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeAnaStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).GetNvmeAnaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/GetNvmeAnaState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).GetNvmeAnaState(ctx, req.(*GetNvmeAnaStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_SetNvmeAnaState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNvmeAnaStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).SetNvmeAnaState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/SetNvmeAnaState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).SetNvmeAnaState(ctx, req.(*SetNvmeAnaStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_ChildOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChildOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).ChildOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/ChildOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).ChildOperation(ctx, req.(*ChildOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_StartRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).StartRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/StartRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).StartRebuild(ctx, req.(*StartRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_StopRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).StopRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/StopRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).StopRebuild(ctx, req.(*StopRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_PauseRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).PauseRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/PauseRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).PauseRebuild(ctx, req.(*PauseRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_ResumeRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).ResumeRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/ResumeRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).ResumeRebuild(ctx, req.(*ResumeRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_GetRebuildState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).GetRebuildState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/GetRebuildState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).GetRebuildState(ctx, req.(*RebuildStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_GetRebuildStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).GetRebuildStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/GetRebuildStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).GetRebuildStats(ctx, req.(*RebuildStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_GetRebuildHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).GetRebuildHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/GetRebuildHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).GetRebuildHistory(ctx, req.(*RebuildHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusRpc_ListRebuildHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRebuildHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusRpcServer).ListRebuildHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.NexusRpc/ListRebuildHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusRpcServer).ListRebuildHistory(ctx, req.(*ListRebuildHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NexusRpc_ServiceDesc is the grpc.ServiceDesc for NexusRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.v1.NexusRpc",
	HandlerType: (*NexusRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNexus",
			Handler:    _NexusRpc_CreateNexus_Handler,
		},
		{
			MethodName: "DestroyNexus",
			Handler:    _NexusRpc_DestroyNexus_Handler,
		},
		{
			MethodName: "ListNexus",
			Handler:    _NexusRpc_ListNexus_Handler,
		},
		{
			MethodName: "AddChildNexus",
			Handler:    _NexusRpc_AddChildNexus_Handler,
		},
		{
			MethodName: "RemoveChildNexus",
			Handler:    _NexusRpc_RemoveChildNexus_Handler,
		},
		{
			MethodName: "FaultNexusChild",
			Handler:    _NexusRpc_FaultNexusChild_Handler,
		},
		{
			MethodName: "ShutdownNexus",
			Handler:    _NexusRpc_ShutdownNexus_Handler,
		},
		{
			MethodName: "PublishNexus",
			Handler:    _NexusRpc_PublishNexus_Handler,
		},
		{
			MethodName: "UnpublishNexus",
			Handler:    _NexusRpc_UnpublishNexus_Handler,
		},
		{
			MethodName: "GetNvmeAnaState",
			Handler:    _NexusRpc_GetNvmeAnaState_Handler,
		},
		{
			MethodName: "SetNvmeAnaState",
			Handler:    _NexusRpc_SetNvmeAnaState_Handler,
		},
		{
			MethodName: "ChildOperation",
			Handler:    _NexusRpc_ChildOperation_Handler,
		},
		{
			MethodName: "StartRebuild",
			Handler:    _NexusRpc_StartRebuild_Handler,
		},
		{
			MethodName: "StopRebuild",
			Handler:    _NexusRpc_StopRebuild_Handler,
		},
		{
			MethodName: "PauseRebuild",
			Handler:    _NexusRpc_PauseRebuild_Handler,
		},
		{
			MethodName: "ResumeRebuild",
			Handler:    _NexusRpc_ResumeRebuild_Handler,
		},
		{
			MethodName: "GetRebuildState",
			Handler:    _NexusRpc_GetRebuildState_Handler,
		},
		{
			MethodName: "GetRebuildStats",
			Handler:    _NexusRpc_GetRebuildStats_Handler,
		},
		{
			MethodName: "GetRebuildHistory",
			Handler:    _NexusRpc_GetRebuildHistory_Handler,
		},
		{
			MethodName: "ListRebuildHistory",
			Handler:    _NexusRpc_ListRebuildHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexus.proto",
}
