// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: host.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NvmeControllerState int32

const (
	NvmeControllerState_NEW           NvmeControllerState = 0
	NvmeControllerState_INITIALIZING  NvmeControllerState = 1
	NvmeControllerState_RUNNING       NvmeControllerState = 2
	NvmeControllerState_FAULTED       NvmeControllerState = 3
	NvmeControllerState_UNCONFIGURING NvmeControllerState = 4
	NvmeControllerState_UNCONFIGURED  NvmeControllerState = 5
)

// Enum value maps for NvmeControllerState.
var (
	NvmeControllerState_name = map[int32]string{
		0: "NEW",
		1: "INITIALIZING",
		2: "RUNNING",
		3: "FAULTED",
		4: "UNCONFIGURING",
		5: "UNCONFIGURED",
	}
	NvmeControllerState_value = map[string]int32{
		"NEW":           0,
		"INITIALIZING":  1,
		"RUNNING":       2,
		"FAULTED":       3,
		"UNCONFIGURING": 4,
		"UNCONFIGURED":  5,
	}
)

func (x NvmeControllerState) Enum() *NvmeControllerState {
	p := new(NvmeControllerState)
	*p = x
	return p
}

func (x NvmeControllerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NvmeControllerState) Descriptor() protoreflect.EnumDescriptor {
	return file_host_proto_enumTypes[0].Descriptor()
}

func (NvmeControllerState) Type() protoreflect.EnumType {
	return &file_host_proto_enumTypes[0]
}

func (x NvmeControllerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NvmeControllerState.Descriptor instead.
func (NvmeControllerState) EnumDescriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{0}
}

type MayastorFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsymmetricNamespaceAccess bool `protobuf:"varint,1,opt,name=asymmetricNamespaceAccess,proto3" json:"asymmetricNamespaceAccess,omitempty"`
}

func (x *MayastorFeatures) Reset() {
	*x = MayastorFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayastorFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayastorFeatures) ProtoMessage() {}

func (x *MayastorFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayastorFeatures.ProtoReflect.Descriptor instead.
func (*MayastorFeatures) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{0}
}

func (x *MayastorFeatures) GetAsymmetricNamespaceAccess() bool {
	if x != nil {
		return x.AsymmetricNamespaceAccess
	}
	return false
}

type MayastorInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	SupportedFeatures *MayastorFeatures `protobuf:"bytes,2,opt,name=supportedFeatures,proto3" json:"supportedFeatures,omitempty"`
	RegistrationInfo  *RegisterRequest  `protobuf:"bytes,3,opt,name=registration_info,json=registrationInfo,proto3" json:"registration_info,omitempty"`
}

func (x *MayastorInfoResponse) Reset() {
	*x = MayastorInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayastorInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayastorInfoResponse) ProtoMessage() {}

func (x *MayastorInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayastorInfoResponse.ProtoReflect.Descriptor instead.
func (*MayastorInfoResponse) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{1}
}

func (x *MayastorInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MayastorInfoResponse) GetSupportedFeatures() *MayastorFeatures {
	if x != nil {
		return x.SupportedFeatures
	}
	return nil
}

func (x *MayastorInfoResponse) GetRegistrationInfo() *RegisterRequest {
	if x != nil {
		return x.RegistrationInfo
	}
	return nil
}

type BlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devname    string                  `protobuf:"bytes,1,opt,name=devname,proto3" json:"devname,omitempty"`        // entry in /dev associated with device
	Devtype    string                  `protobuf:"bytes,2,opt,name=devtype,proto3" json:"devtype,omitempty"`        // currently "disk" or "partition"
	Devmajor   uint32                  `protobuf:"varint,3,opt,name=devmajor,proto3" json:"devmajor,omitempty"`     // major device number
	Devminor   uint32                  `protobuf:"varint,4,opt,name=devminor,proto3" json:"devminor,omitempty"`     // minor device number
	Model      string                  `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`            // device model - useful for identifying mayastor devices
	Devpath    string                  `protobuf:"bytes,6,opt,name=devpath,proto3" json:"devpath,omitempty"`        // official device path
	Devlinks   []string                `protobuf:"bytes,7,rep,name=devlinks,proto3" json:"devlinks,omitempty"`      // list of udev generated symlinks by which device may be identified
	Size       uint64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`             // size of device in (512 byte) blocks
	Partition  *BlockDevice_Partition  `protobuf:"bytes,9,opt,name=partition,proto3" json:"partition,omitempty"`    // partition information in case where device represents a partition
	Filesystem *BlockDevice_Filesystem `protobuf:"bytes,10,opt,name=filesystem,proto3" json:"filesystem,omitempty"` // filesystem information in case where a filesystem is present
	Available  bool                    `protobuf:"varint,11,opt,name=available,proto3" json:"available,omitempty"`  // identifies if device is available for use (ie. is not "currently" in use)
}

func (x *BlockDevice) Reset() {
	*x = BlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice) ProtoMessage() {}

func (x *BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice.ProtoReflect.Descriptor instead.
func (*BlockDevice) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{2}
}

func (x *BlockDevice) GetDevname() string {
	if x != nil {
		return x.Devname
	}
	return ""
}

func (x *BlockDevice) GetDevtype() string {
	if x != nil {
		return x.Devtype
	}
	return ""
}

func (x *BlockDevice) GetDevmajor() uint32 {
	if x != nil {
		return x.Devmajor
	}
	return 0
}

func (x *BlockDevice) GetDevminor() uint32 {
	if x != nil {
		return x.Devminor
	}
	return 0
}

func (x *BlockDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *BlockDevice) GetDevpath() string {
	if x != nil {
		return x.Devpath
	}
	return ""
}

func (x *BlockDevice) GetDevlinks() []string {
	if x != nil {
		return x.Devlinks
	}
	return nil
}

func (x *BlockDevice) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockDevice) GetPartition() *BlockDevice_Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *BlockDevice) GetFilesystem() *BlockDevice_Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *BlockDevice) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type ListBlockDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"` // list "all" block devices found (not just "available" ones)
}

func (x *ListBlockDevicesRequest) Reset() {
	*x = ListBlockDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockDevicesRequest) ProtoMessage() {}

func (x *ListBlockDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListBlockDevicesRequest) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{3}
}

func (x *ListBlockDevicesRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type ListBlockDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*BlockDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *ListBlockDevicesResponse) Reset() {
	*x = ListBlockDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockDevicesResponse) ProtoMessage() {}

func (x *ListBlockDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListBlockDevicesResponse) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{4}
}

func (x *ListBlockDevicesResponse) GetDevices() []*BlockDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

type ResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftFaults  int64 `protobuf:"varint,1,opt,name=soft_faults,json=softFaults,proto3" json:"soft_faults,omitempty"`      // page reclaims (soft page faults)
	HardFaults  int64 `protobuf:"varint,2,opt,name=hard_faults,json=hardFaults,proto3" json:"hard_faults,omitempty"`      // hard page faults
	Swaps       int64 `protobuf:"varint,3,opt,name=swaps,proto3" json:"swaps,omitempty"`                                  // swaps
	InBlockOps  int64 `protobuf:"varint,4,opt,name=in_block_ops,json=inBlockOps,proto3" json:"in_block_ops,omitempty"`    // input block operations
	OutBlockOps int64 `protobuf:"varint,5,opt,name=out_block_ops,json=outBlockOps,proto3" json:"out_block_ops,omitempty"` // output block operations
	IpcMsgSend  int64 `protobuf:"varint,6,opt,name=ipc_msg_send,json=ipcMsgSend,proto3" json:"ipc_msg_send,omitempty"`    // IPC messages sent
	IpcMsgRcv   int64 `protobuf:"varint,7,opt,name=ipc_msg_rcv,json=ipcMsgRcv,proto3" json:"ipc_msg_rcv,omitempty"`       // IPC messages received
	Signals     int64 `protobuf:"varint,8,opt,name=signals,proto3" json:"signals,omitempty"`                              // signals received
	VolCsw      int64 `protobuf:"varint,9,opt,name=vol_csw,json=volCsw,proto3" json:"vol_csw,omitempty"`                  // voluntary context switches
	InvolCsw    int64 `protobuf:"varint,10,opt,name=invol_csw,json=involCsw,proto3" json:"invol_csw,omitempty"`           // involuntary context switches
}

func (x *ResourceUsage) Reset() {
	*x = ResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage) ProtoMessage() {}

func (x *ResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage.ProtoReflect.Descriptor instead.
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceUsage) GetSoftFaults() int64 {
	if x != nil {
		return x.SoftFaults
	}
	return 0
}

func (x *ResourceUsage) GetHardFaults() int64 {
	if x != nil {
		return x.HardFaults
	}
	return 0
}

func (x *ResourceUsage) GetSwaps() int64 {
	if x != nil {
		return x.Swaps
	}
	return 0
}

func (x *ResourceUsage) GetInBlockOps() int64 {
	if x != nil {
		return x.InBlockOps
	}
	return 0
}

func (x *ResourceUsage) GetOutBlockOps() int64 {
	if x != nil {
		return x.OutBlockOps
	}
	return 0
}

func (x *ResourceUsage) GetIpcMsgSend() int64 {
	if x != nil {
		return x.IpcMsgSend
	}
	return 0
}

func (x *ResourceUsage) GetIpcMsgRcv() int64 {
	if x != nil {
		return x.IpcMsgRcv
	}
	return 0
}

func (x *ResourceUsage) GetSignals() int64 {
	if x != nil {
		return x.Signals
	}
	return 0
}

func (x *ResourceUsage) GetVolCsw() int64 {
	if x != nil {
		return x.VolCsw
	}
	return 0
}

func (x *ResourceUsage) GetInvolCsw() int64 {
	if x != nil {
		return x.InvolCsw
	}
	return 0
}

type GetMayastorResourceUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage *ResourceUsage `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *GetMayastorResourceUsageResponse) Reset() {
	*x = GetMayastorResourceUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMayastorResourceUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMayastorResourceUsageResponse) ProtoMessage() {}

func (x *GetMayastorResourceUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMayastorResourceUsageResponse.ProtoReflect.Descriptor instead.
func (*GetMayastorResourceUsageResponse) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{6}
}

func (x *GetMayastorResourceUsageResponse) GetUsage() *ResourceUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type NvmeControllerIoStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumReadOps    uint64 `protobuf:"varint,1,opt,name=num_read_ops,json=numReadOps,proto3" json:"num_read_ops,omitempty"`
	NumWriteOps   uint64 `protobuf:"varint,2,opt,name=num_write_ops,json=numWriteOps,proto3" json:"num_write_ops,omitempty"`
	BytesRead     uint64 `protobuf:"varint,3,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	BytesWritten  uint64 `protobuf:"varint,4,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	NumUnmapOps   uint64 `protobuf:"varint,5,opt,name=num_unmap_ops,json=numUnmapOps,proto3" json:"num_unmap_ops,omitempty"`
	BytesUnmapped uint64 `protobuf:"varint,6,opt,name=bytes_unmapped,json=bytesUnmapped,proto3" json:"bytes_unmapped,omitempty"`
}

func (x *NvmeControllerIoStats) Reset() {
	*x = NvmeControllerIoStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeControllerIoStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeControllerIoStats) ProtoMessage() {}

func (x *NvmeControllerIoStats) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeControllerIoStats.ProtoReflect.Descriptor instead.
func (*NvmeControllerIoStats) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{7}
}

func (x *NvmeControllerIoStats) GetNumReadOps() uint64 {
	if x != nil {
		return x.NumReadOps
	}
	return 0
}

func (x *NvmeControllerIoStats) GetNumWriteOps() uint64 {
	if x != nil {
		return x.NumWriteOps
	}
	return 0
}

func (x *NvmeControllerIoStats) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *NvmeControllerIoStats) GetBytesWritten() uint64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *NvmeControllerIoStats) GetNumUnmapOps() uint64 {
	if x != nil {
		return x.NumUnmapOps
	}
	return 0
}

func (x *NvmeControllerIoStats) GetBytesUnmapped() uint64 {
	if x != nil {
		return x.BytesUnmapped
	}
	return 0
}

type NvmeController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                         // NVMe controller name
	State   NvmeControllerState `protobuf:"varint,2,opt,name=state,proto3,enum=mayastor.v1.NvmeControllerState" json:"state,omitempty"` // Current state of the NVMe controller
	Size    uint64              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                                        // Size of the controller's namespace (0 if no namespace attached).
	BlkSize uint32              `protobuf:"varint,4,opt,name=blk_size,json=blkSize,proto3" json:"blk_size,omitempty"`                   // Block size of the namespace (0 if no namespace attached).
}

func (x *NvmeController) Reset() {
	*x = NvmeController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvmeController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeController) ProtoMessage() {}

func (x *NvmeController) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeController.ProtoReflect.Descriptor instead.
func (*NvmeController) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{8}
}

func (x *NvmeController) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NvmeController) GetState() NvmeControllerState {
	if x != nil {
		return x.State
	}
	return NvmeControllerState_NEW
}

func (x *NvmeController) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NvmeController) GetBlkSize() uint32 {
	if x != nil {
		return x.BlkSize
	}
	return 0
}

type ListNvmeControllersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controllers []*NvmeController `protobuf:"bytes,1,rep,name=controllers,proto3" json:"controllers,omitempty"`
}

func (x *ListNvmeControllersResponse) Reset() {
	*x = ListNvmeControllersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeControllersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeControllersResponse) ProtoMessage() {}

func (x *ListNvmeControllersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeControllersResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeControllersResponse) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{9}
}

func (x *ListNvmeControllersResponse) GetControllers() []*NvmeController {
	if x != nil {
		return x.Controllers
	}
	return nil
}

type StatNvmeControllerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatNvmeControllerRequest) Reset() {
	*x = StatNvmeControllerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatNvmeControllerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatNvmeControllerRequest) ProtoMessage() {}

func (x *StatNvmeControllerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatNvmeControllerRequest.ProtoReflect.Descriptor instead.
func (*StatNvmeControllerRequest) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{10}
}

func (x *StatNvmeControllerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StatNvmeControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *NvmeControllerIoStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"` // Controller I/O statistics
}

func (x *StatNvmeControllerResponse) Reset() {
	*x = StatNvmeControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatNvmeControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatNvmeControllerResponse) ProtoMessage() {}

func (x *StatNvmeControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatNvmeControllerResponse.ProtoReflect.Descriptor instead.
func (*StatNvmeControllerResponse) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{11}
}

func (x *StatNvmeControllerResponse) GetStats() *NvmeControllerIoStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type BlockDevice_Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`  // devname of parent device to which this partition belongs
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"` // partition number
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`      // partition name
	Scheme string `protobuf:"bytes,4,opt,name=scheme,proto3" json:"scheme,omitempty"`  // partition scheme: gpt, dos, ...
	Typeid string `protobuf:"bytes,5,opt,name=typeid,proto3" json:"typeid,omitempty"`  // partition type identifier
	Uuid   string `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`      // UUID identifying partition
}

func (x *BlockDevice_Partition) Reset() {
	*x = BlockDevice_Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice_Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice_Partition) ProtoMessage() {}

func (x *BlockDevice_Partition) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice_Partition.ProtoReflect.Descriptor instead.
func (*BlockDevice_Partition) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BlockDevice_Partition) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BlockDevice_Partition) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockDevice_Partition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockDevice_Partition) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *BlockDevice_Partition) GetTypeid() string {
	if x != nil {
		return x.Typeid
	}
	return ""
}

func (x *BlockDevice_Partition) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type BlockDevice_Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fstype      string   `protobuf:"bytes,1,opt,name=fstype,proto3" json:"fstype,omitempty"`           // filesystem type: ext3, ntfs, ...
	Label       string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`             // volume label
	Uuid        string   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`               // UUID identifying the volume (filesystem)
	Mountpoints []string `protobuf:"bytes,4,rep,name=mountpoints,proto3" json:"mountpoints,omitempty"` // paths where filesystem is currently mounted
}

func (x *BlockDevice_Filesystem) Reset() {
	*x = BlockDevice_Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDevice_Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDevice_Filesystem) ProtoMessage() {}

func (x *BlockDevice_Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_host_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDevice_Filesystem.ProtoReflect.Descriptor instead.
func (*BlockDevice_Filesystem) Descriptor() ([]byte, []int) {
	return file_host_proto_rawDescGZIP(), []int{2, 1}
}

func (x *BlockDevice_Filesystem) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *BlockDevice_Filesystem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BlockDevice_Filesystem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BlockDevice_Filesystem) GetMountpoints() []string {
	if x != nil {
		return x.Mountpoints
	}
	return nil
}

var File_host_proto protoreflect.FileDescriptor

var file_host_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x10, 0x4d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x19, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc8, 0x01, 0x0a,
	0x14, 0x4d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x05, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x1a, 0x70,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x2b, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x4e, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xbf, 0x02,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x70, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x70, 0x63, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x63, 0x76, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x70, 0x63, 0x4d, 0x73, 0x67, 0x52, 0x63, 0x76, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x5f, 0x63, 0x73, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x43,
	0x73, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x5f, 0x63, 0x73, 0x77, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x43, 0x73, 0x77, 0x22,
	0x54, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x15, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4f, 0x70, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x5c, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x22, 0x2f, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x56, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x76, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2a, 0x6f, 0x0a, 0x13, 0x4e, 0x76, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x05, 0x32, 0xe5, 0x03, 0x0a, 0x07, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x70, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x26, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x62, 0x73, 0x2f, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_host_proto_rawDescOnce sync.Once
	file_host_proto_rawDescData = file_host_proto_rawDesc
)

func file_host_proto_rawDescGZIP() []byte {
	file_host_proto_rawDescOnce.Do(func() {
		file_host_proto_rawDescData = protoimpl.X.CompressGZIP(file_host_proto_rawDescData)
	})
	return file_host_proto_rawDescData
}

var file_host_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_host_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_host_proto_goTypes = []interface{}{
	(NvmeControllerState)(0),                 // 0: mayastor.v1.NvmeControllerState
	(*MayastorFeatures)(nil),                 // 1: mayastor.v1.MayastorFeatures
	(*MayastorInfoResponse)(nil),             // 2: mayastor.v1.MayastorInfoResponse
	(*BlockDevice)(nil),                      // 3: mayastor.v1.BlockDevice
	(*ListBlockDevicesRequest)(nil),          // 4: mayastor.v1.ListBlockDevicesRequest
	(*ListBlockDevicesResponse)(nil),         // 5: mayastor.v1.ListBlockDevicesResponse
	(*ResourceUsage)(nil),                    // 6: mayastor.v1.ResourceUsage
	(*GetMayastorResourceUsageResponse)(nil), // 7: mayastor.v1.GetMayastorResourceUsageResponse
	(*NvmeControllerIoStats)(nil),            // 8: mayastor.v1.NvmeControllerIoStats
	(*NvmeController)(nil),                   // 9: mayastor.v1.NvmeController
	(*ListNvmeControllersResponse)(nil),      // 10: mayastor.v1.ListNvmeControllersResponse
	(*StatNvmeControllerRequest)(nil),        // 11: mayastor.v1.StatNvmeControllerRequest
	(*StatNvmeControllerResponse)(nil),       // 12: mayastor.v1.StatNvmeControllerResponse
	(*BlockDevice_Partition)(nil),            // 13: mayastor.v1.BlockDevice.Partition
	(*BlockDevice_Filesystem)(nil),           // 14: mayastor.v1.BlockDevice.Filesystem
	(*RegisterRequest)(nil),                  // 15: mayastor.v1.RegisterRequest
	(*emptypb.Empty)(nil),                    // 16: google.protobuf.Empty
}
var file_host_proto_depIdxs = []int32{
	1,  // 0: mayastor.v1.MayastorInfoResponse.supportedFeatures:type_name -> mayastor.v1.MayastorFeatures
	15, // 1: mayastor.v1.MayastorInfoResponse.registration_info:type_name -> mayastor.v1.RegisterRequest
	13, // 2: mayastor.v1.BlockDevice.partition:type_name -> mayastor.v1.BlockDevice.Partition
	14, // 3: mayastor.v1.BlockDevice.filesystem:type_name -> mayastor.v1.BlockDevice.Filesystem
	3,  // 4: mayastor.v1.ListBlockDevicesResponse.devices:type_name -> mayastor.v1.BlockDevice
	6,  // 5: mayastor.v1.GetMayastorResourceUsageResponse.usage:type_name -> mayastor.v1.ResourceUsage
	0,  // 6: mayastor.v1.NvmeController.state:type_name -> mayastor.v1.NvmeControllerState
	9,  // 7: mayastor.v1.ListNvmeControllersResponse.controllers:type_name -> mayastor.v1.NvmeController
	8,  // 8: mayastor.v1.StatNvmeControllerResponse.stats:type_name -> mayastor.v1.NvmeControllerIoStats
	16, // 9: mayastor.v1.HostRpc.GetMayastorInfo:input_type -> google.protobuf.Empty
	4,  // 10: mayastor.v1.HostRpc.ListBlockDevices:input_type -> mayastor.v1.ListBlockDevicesRequest
	16, // 11: mayastor.v1.HostRpc.GetMayastorResourceUsage:input_type -> google.protobuf.Empty
	16, // 12: mayastor.v1.HostRpc.ListNvmeControllers:input_type -> google.protobuf.Empty
	11, // 13: mayastor.v1.HostRpc.StatNvmeController:input_type -> mayastor.v1.StatNvmeControllerRequest
	2,  // 14: mayastor.v1.HostRpc.GetMayastorInfo:output_type -> mayastor.v1.MayastorInfoResponse
	5,  // 15: mayastor.v1.HostRpc.ListBlockDevices:output_type -> mayastor.v1.ListBlockDevicesResponse
	7,  // 16: mayastor.v1.HostRpc.GetMayastorResourceUsage:output_type -> mayastor.v1.GetMayastorResourceUsageResponse
	10, // 17: mayastor.v1.HostRpc.ListNvmeControllers:output_type -> mayastor.v1.ListNvmeControllersResponse
	12, // 18: mayastor.v1.HostRpc.StatNvmeController:output_type -> mayastor.v1.StatNvmeControllerResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_host_proto_init() }
func file_host_proto_init() {
	if File_host_proto != nil {
		return
	}
	file_registration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_host_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayastorFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayastorInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlockDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlockDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMayastorResourceUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeControllerIoStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvmeController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeControllersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatNvmeControllerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatNvmeControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice_Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDevice_Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_host_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_host_proto_goTypes,
		DependencyIndexes: file_host_proto_depIdxs,
		EnumInfos:         file_host_proto_enumTypes,
		MessageInfos:      file_host_proto_msgTypes,
	}.Build()
	File_host_proto = out.File
	file_host_proto_rawDesc = nil
	file_host_proto_goTypes = nil
	file_host_proto_depIdxs = nil
}
