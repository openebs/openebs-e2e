// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: host.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HostRpc_GetMayastorInfo_FullMethodName          = "/mayastor.v1.HostRpc/GetMayastorInfo"
	HostRpc_ListBlockDevices_FullMethodName         = "/mayastor.v1.HostRpc/ListBlockDevices"
	HostRpc_GetMayastorResourceUsage_FullMethodName = "/mayastor.v1.HostRpc/GetMayastorResourceUsage"
	HostRpc_ListNvmeControllers_FullMethodName      = "/mayastor.v1.HostRpc/ListNvmeControllers"
	HostRpc_StatNvmeController_FullMethodName       = "/mayastor.v1.HostRpc/StatNvmeController"
)

// HostRpcClient is the client API for HostRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostRpcClient interface {
	GetMayastorInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MayastorInfoResponse, error)
	// Enumerate block devices on current host
	ListBlockDevices(ctx context.Context, in *ListBlockDevicesRequest, opts ...grpc.CallOption) (*ListBlockDevicesResponse, error)
	// Obtain resource usage statistics for the current process
	GetMayastorResourceUsage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMayastorResourceUsageResponse, error)
	// NVMe controllers
	ListNvmeControllers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNvmeControllersResponse, error)
	StatNvmeController(ctx context.Context, in *StatNvmeControllerRequest, opts ...grpc.CallOption) (*StatNvmeControllerResponse, error)
}

type hostRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewHostRpcClient(cc grpc.ClientConnInterface) HostRpcClient {
	return &hostRpcClient{cc}
}

func (c *hostRpcClient) GetMayastorInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MayastorInfoResponse, error) {
	out := new(MayastorInfoResponse)
	err := c.cc.Invoke(ctx, HostRpc_GetMayastorInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostRpcClient) ListBlockDevices(ctx context.Context, in *ListBlockDevicesRequest, opts ...grpc.CallOption) (*ListBlockDevicesResponse, error) {
	out := new(ListBlockDevicesResponse)
	err := c.cc.Invoke(ctx, HostRpc_ListBlockDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostRpcClient) GetMayastorResourceUsage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMayastorResourceUsageResponse, error) {
	out := new(GetMayastorResourceUsageResponse)
	err := c.cc.Invoke(ctx, HostRpc_GetMayastorResourceUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostRpcClient) ListNvmeControllers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNvmeControllersResponse, error) {
	out := new(ListNvmeControllersResponse)
	err := c.cc.Invoke(ctx, HostRpc_ListNvmeControllers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostRpcClient) StatNvmeController(ctx context.Context, in *StatNvmeControllerRequest, opts ...grpc.CallOption) (*StatNvmeControllerResponse, error) {
	out := new(StatNvmeControllerResponse)
	err := c.cc.Invoke(ctx, HostRpc_StatNvmeController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostRpcServer is the server API for HostRpc service.
// All implementations must embed UnimplementedHostRpcServer
// for forward compatibility
type HostRpcServer interface {
	GetMayastorInfo(context.Context, *emptypb.Empty) (*MayastorInfoResponse, error)
	// Enumerate block devices on current host
	ListBlockDevices(context.Context, *ListBlockDevicesRequest) (*ListBlockDevicesResponse, error)
	// Obtain resource usage statistics for the current process
	GetMayastorResourceUsage(context.Context, *emptypb.Empty) (*GetMayastorResourceUsageResponse, error)
	// NVMe controllers
	ListNvmeControllers(context.Context, *emptypb.Empty) (*ListNvmeControllersResponse, error)
	StatNvmeController(context.Context, *StatNvmeControllerRequest) (*StatNvmeControllerResponse, error)
	mustEmbedUnimplementedHostRpcServer()
}

// UnimplementedHostRpcServer must be embedded to have forward compatible implementations.
type UnimplementedHostRpcServer struct {
}

func (UnimplementedHostRpcServer) GetMayastorInfo(context.Context, *emptypb.Empty) (*MayastorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMayastorInfo not implemented")
}
func (UnimplementedHostRpcServer) ListBlockDevices(context.Context, *ListBlockDevicesRequest) (*ListBlockDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockDevices not implemented")
}
func (UnimplementedHostRpcServer) GetMayastorResourceUsage(context.Context, *emptypb.Empty) (*GetMayastorResourceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMayastorResourceUsage not implemented")
}
func (UnimplementedHostRpcServer) ListNvmeControllers(context.Context, *emptypb.Empty) (*ListNvmeControllersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeControllers not implemented")
}
func (UnimplementedHostRpcServer) StatNvmeController(context.Context, *StatNvmeControllerRequest) (*StatNvmeControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatNvmeController not implemented")
}
func (UnimplementedHostRpcServer) mustEmbedUnimplementedHostRpcServer() {}

// UnsafeHostRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostRpcServer will
// result in compilation errors.
type UnsafeHostRpcServer interface {
	mustEmbedUnimplementedHostRpcServer()
}

func RegisterHostRpcServer(s grpc.ServiceRegistrar, srv HostRpcServer) {
	s.RegisterService(&HostRpc_ServiceDesc, srv)
}

func _HostRpc_GetMayastorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostRpcServer).GetMayastorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostRpc_GetMayastorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostRpcServer).GetMayastorInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostRpc_ListBlockDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostRpcServer).ListBlockDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostRpc_ListBlockDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostRpcServer).ListBlockDevices(ctx, req.(*ListBlockDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostRpc_GetMayastorResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostRpcServer).GetMayastorResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostRpc_GetMayastorResourceUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostRpcServer).GetMayastorResourceUsage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostRpc_ListNvmeControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostRpcServer).ListNvmeControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostRpc_ListNvmeControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostRpcServer).ListNvmeControllers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostRpc_StatNvmeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatNvmeControllerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostRpcServer).StatNvmeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostRpc_StatNvmeController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostRpcServer).StatNvmeController(ctx, req.(*StatNvmeControllerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostRpc_ServiceDesc is the grpc.ServiceDesc for HostRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.v1.HostRpc",
	HandlerType: (*HostRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMayastorInfo",
			Handler:    _HostRpc_GetMayastorInfo_Handler,
		},
		{
			MethodName: "ListBlockDevices",
			Handler:    _HostRpc_ListBlockDevices_Handler,
		},
		{
			MethodName: "GetMayastorResourceUsage",
			Handler:    _HostRpc_GetMayastorResourceUsage_Handler,
		},
		{
			MethodName: "ListNvmeControllers",
			Handler:    _HostRpc_ListNvmeControllers_Handler,
		},
		{
			MethodName: "StatNvmeController",
			Handler:    _HostRpc_StatNvmeController_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "host.proto",
}
