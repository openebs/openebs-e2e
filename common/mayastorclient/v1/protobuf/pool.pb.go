// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: pool.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies the type of the pool
type PoolType int32

const (
	PoolType_Lvs PoolType = 0 // pool backed by spdk lvs
)

// Enum value maps for PoolType.
var (
	PoolType_name = map[int32]string{
		0: "Lvs",
	}
	PoolType_value = map[string]int32{
		"Lvs": 0,
	}
)

func (x PoolType) Enum() *PoolType {
	p := new(PoolType)
	*p = x
	return p
}

func (x PoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_proto_enumTypes[0].Descriptor()
}

func (PoolType) Type() protoreflect.EnumType {
	return &file_pool_proto_enumTypes[0]
}

func (x PoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolType.Descriptor instead.
func (PoolType) EnumDescriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{0}
}

// State of the storage pool (terminology comes from ZFS).
type PoolState int32

const (
	PoolState_POOL_UNKNOWN  PoolState = 0
	PoolState_POOL_ONLINE   PoolState = 1 // the pool is in normal working order
	PoolState_POOL_DEGRADED PoolState = 2 // the pool has experienced a failure but can still function
	PoolState_POOL_FAULTED  PoolState = 3 // the pool is completely inaccessible
)

// Enum value maps for PoolState.
var (
	PoolState_name = map[int32]string{
		0: "POOL_UNKNOWN",
		1: "POOL_ONLINE",
		2: "POOL_DEGRADED",
		3: "POOL_FAULTED",
	}
	PoolState_value = map[string]int32{
		"POOL_UNKNOWN":  0,
		"POOL_ONLINE":   1,
		"POOL_DEGRADED": 2,
		"POOL_FAULTED":  3,
	}
)

func (x PoolState) Enum() *PoolState {
	p := new(PoolState)
	*p = x
	return p
}

func (x PoolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolState) Descriptor() protoreflect.EnumDescriptor {
	return file_pool_proto_enumTypes[1].Descriptor()
}

func (PoolState) Type() protoreflect.EnumType {
	return &file_pool_proto_enumTypes[1]
}

func (x PoolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolState.Descriptor instead.
func (PoolState) EnumDescriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{1}
}

// The wrapper for pooltype.
// It helps in defining optional fields
// when required.
type PoolTypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value PoolType `protobuf:"varint,1,opt,name=value,proto3,enum=mayastor.v1.PoolType" json:"value,omitempty"`
}

func (x *PoolTypeValue) Reset() {
	*x = PoolTypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolTypeValue) ProtoMessage() {}

func (x *PoolTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolTypeValue.ProtoReflect.Descriptor instead.
func (*PoolTypeValue) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{0}
}

func (x *PoolTypeValue) GetValue() PoolType {
	if x != nil {
		return x.Value
	}
	return PoolType_Lvs
}

// Create pool arguments.
type CreatePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                    // name of the pool
	Uuid     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                    // optional uuid for the pool to be created
	Disks    []string                `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`                                  // disk device paths or URIs to be claimed by the pool
	Pooltype PoolType                `protobuf:"varint,4,opt,name=pooltype,proto3,enum=mayastor.v1.PoolType" json:"pooltype,omitempty"` // type of the pool
	// Default cluster size is 4MiB (4 * 1024 * 1024), input cluster size must be in "bytes" but
	// must be multiple of 1MiB, else default cluster size i.e 4MiB will be considered. Minimum
	// cluster size can be input as 1048576 (1024 * 1024) bytes (1MiB)
	ClusterSize *uint32 `protobuf:"varint,5,opt,name=cluster_size,json=clusterSize,proto3,oneof" json:"cluster_size,omitempty"`
}

func (x *CreatePoolRequest) Reset() {
	*x = CreatePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolRequest) ProtoMessage() {}

func (x *CreatePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePoolRequest) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CreatePoolRequest) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *CreatePoolRequest) GetPooltype() PoolType {
	if x != nil {
		return x.Pooltype
	}
	return PoolType_Lvs
}

func (x *CreatePoolRequest) GetClusterSize() uint32 {
	if x != nil && x.ClusterSize != nil {
		return *x.ClusterSize
	}
	return 0
}

// Create pool arguments.
type ImportPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                    // name of the pool
	Uuid     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                    // optional uuid for the pool to be imported
	Disks    []string                `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`                                  // disk device paths or URIs to be claimed by the pool
	Pooltype PoolType                `protobuf:"varint,4,opt,name=pooltype,proto3,enum=mayastor.v1.PoolType" json:"pooltype,omitempty"` // type of the pool
}

func (x *ImportPoolRequest) Reset() {
	*x = ImportPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPoolRequest) ProtoMessage() {}

func (x *ImportPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPoolRequest.ProtoReflect.Descriptor instead.
func (*ImportPoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{2}
}

func (x *ImportPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImportPoolRequest) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ImportPoolRequest) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *ImportPoolRequest) GetPooltype() PoolType {
	if x != nil {
		return x.Pooltype
	}
	return PoolType_Lvs
}

// Storage pool properties
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                    // uuid of the pool
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                    // name of the pool
	Disks       []string  `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`                                  // absolute disk paths claimed by the pool
	State       PoolState `protobuf:"varint,4,opt,name=state,proto3,enum=mayastor.v1.PoolState" json:"state,omitempty"`      // current state of the pool
	Capacity    uint64    `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`                           // size of the pool in bytes
	Used        uint64    `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`                                   // used bytes from the pool
	Pooltype    PoolType  `protobuf:"varint,7,opt,name=pooltype,proto3,enum=mayastor.v1.PoolType" json:"pooltype,omitempty"` // type of the pool
	Committed   uint64    `protobuf:"varint,8,opt,name=committed,proto3" json:"committed,omitempty"`                         // committed size of all pool replicas (sum of capacities of all replicas)
	ClusterSize uint32    `protobuf:"varint,9,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`  // blobstor cluster size set (in bytes) during pool creation
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{3}
}

func (x *Pool) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Pool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pool) GetDisks() []string {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Pool) GetState() PoolState {
	if x != nil {
		return x.State
	}
	return PoolState_POOL_UNKNOWN
}

func (x *Pool) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Pool) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Pool) GetPooltype() PoolType {
	if x != nil {
		return x.Pooltype
	}
	return PoolType_Lvs
}

func (x *Pool) GetCommitted() uint64 {
	if x != nil {
		return x.Committed
	}
	return 0
}

func (x *Pool) GetClusterSize() uint32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

// Destroy pool arguments.
type DestroyPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the pool
	Uuid *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"` // optional uuid for the pool to be destroyed
}

func (x *DestroyPoolRequest) Reset() {
	*x = DestroyPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyPoolRequest) ProtoMessage() {}

func (x *DestroyPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyPoolRequest.ProtoReflect.Descriptor instead.
func (*DestroyPoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{4}
}

func (x *DestroyPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestroyPoolRequest) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// Export pool arguments.
type ExportPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the pool
	Uuid *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"` // optional uuid for the pool to be exported
}

func (x *ExportPoolRequest) Reset() {
	*x = ExportPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPoolRequest) ProtoMessage() {}

func (x *ExportPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPoolRequest.ProtoReflect.Descriptor instead.
func (*ExportPoolRequest) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{5}
}

func (x *ExportPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportPoolRequest) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// List of pools and their properties.
type ListPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"` // list of the pools
}

func (x *ListPoolsResponse) Reset() {
	*x = ListPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoolsResponse) ProtoMessage() {}

func (x *ListPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoolsResponse.ProtoReflect.Descriptor instead.
func (*ListPoolsResponse) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{6}
}

func (x *ListPoolsResponse) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type ListPoolOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // list the pools matching the name if provided
	Pooltype *PoolTypeValue          `protobuf:"bytes,2,opt,name=pooltype,proto3" json:"pooltype,omitempty"` // optional pooltype filter
	Uuid     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`         // get the pool matching the uuid if provided
}

func (x *ListPoolOptions) Reset() {
	*x = ListPoolOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoolOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoolOptions) ProtoMessage() {}

func (x *ListPoolOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoolOptions.ProtoReflect.Descriptor instead.
func (*ListPoolOptions) Descriptor() ([]byte, []int) {
	return file_pool_proto_rawDescGZIP(), []int{7}
}

func (x *ListPoolOptions) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListPoolOptions) GetPooltype() *PoolTypeValue {
	if x != nil {
		return x.Pooltype
	}
	return nil
}

func (x *ListPoolOptions) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

var File_pool_proto protoreflect.FileDescriptor

var file_pool_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0d, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x69, 0x73, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70,
	0x6f, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x5a, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x11,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70,
	0x6f, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x2a, 0x13, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x76, 0x73, 0x10, 0x00, 0x2a, 0x53, 0x0a, 0x09, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x4f,
	0x4c, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32,
	0xee, 0x02, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x70, 0x63, 0x12, 0x41, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1f, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1e,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x65, 0x62, 0x73, 0x2f, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_proto_rawDescOnce sync.Once
	file_pool_proto_rawDescData = file_pool_proto_rawDesc
)

func file_pool_proto_rawDescGZIP() []byte {
	file_pool_proto_rawDescOnce.Do(func() {
		file_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_proto_rawDescData)
	})
	return file_pool_proto_rawDescData
}

var file_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pool_proto_goTypes = []interface{}{
	(PoolType)(0),                  // 0: mayastor.v1.PoolType
	(PoolState)(0),                 // 1: mayastor.v1.PoolState
	(*PoolTypeValue)(nil),          // 2: mayastor.v1.PoolTypeValue
	(*CreatePoolRequest)(nil),      // 3: mayastor.v1.CreatePoolRequest
	(*ImportPoolRequest)(nil),      // 4: mayastor.v1.ImportPoolRequest
	(*Pool)(nil),                   // 5: mayastor.v1.Pool
	(*DestroyPoolRequest)(nil),     // 6: mayastor.v1.DestroyPoolRequest
	(*ExportPoolRequest)(nil),      // 7: mayastor.v1.ExportPoolRequest
	(*ListPoolsResponse)(nil),      // 8: mayastor.v1.ListPoolsResponse
	(*ListPoolOptions)(nil),        // 9: mayastor.v1.ListPoolOptions
	(*wrapperspb.StringValue)(nil), // 10: google.protobuf.StringValue
	(*emptypb.Empty)(nil),          // 11: google.protobuf.Empty
}
var file_pool_proto_depIdxs = []int32{
	0,  // 0: mayastor.v1.PoolTypeValue.value:type_name -> mayastor.v1.PoolType
	10, // 1: mayastor.v1.CreatePoolRequest.uuid:type_name -> google.protobuf.StringValue
	0,  // 2: mayastor.v1.CreatePoolRequest.pooltype:type_name -> mayastor.v1.PoolType
	10, // 3: mayastor.v1.ImportPoolRequest.uuid:type_name -> google.protobuf.StringValue
	0,  // 4: mayastor.v1.ImportPoolRequest.pooltype:type_name -> mayastor.v1.PoolType
	1,  // 5: mayastor.v1.Pool.state:type_name -> mayastor.v1.PoolState
	0,  // 6: mayastor.v1.Pool.pooltype:type_name -> mayastor.v1.PoolType
	10, // 7: mayastor.v1.DestroyPoolRequest.uuid:type_name -> google.protobuf.StringValue
	10, // 8: mayastor.v1.ExportPoolRequest.uuid:type_name -> google.protobuf.StringValue
	5,  // 9: mayastor.v1.ListPoolsResponse.pools:type_name -> mayastor.v1.Pool
	10, // 10: mayastor.v1.ListPoolOptions.name:type_name -> google.protobuf.StringValue
	2,  // 11: mayastor.v1.ListPoolOptions.pooltype:type_name -> mayastor.v1.PoolTypeValue
	10, // 12: mayastor.v1.ListPoolOptions.uuid:type_name -> google.protobuf.StringValue
	3,  // 13: mayastor.v1.PoolRpc.CreatePool:input_type -> mayastor.v1.CreatePoolRequest
	6,  // 14: mayastor.v1.PoolRpc.DestroyPool:input_type -> mayastor.v1.DestroyPoolRequest
	7,  // 15: mayastor.v1.PoolRpc.ExportPool:input_type -> mayastor.v1.ExportPoolRequest
	4,  // 16: mayastor.v1.PoolRpc.ImportPool:input_type -> mayastor.v1.ImportPoolRequest
	9,  // 17: mayastor.v1.PoolRpc.ListPools:input_type -> mayastor.v1.ListPoolOptions
	5,  // 18: mayastor.v1.PoolRpc.CreatePool:output_type -> mayastor.v1.Pool
	11, // 19: mayastor.v1.PoolRpc.DestroyPool:output_type -> google.protobuf.Empty
	11, // 20: mayastor.v1.PoolRpc.ExportPool:output_type -> google.protobuf.Empty
	5,  // 21: mayastor.v1.PoolRpc.ImportPool:output_type -> mayastor.v1.Pool
	8,  // 22: mayastor.v1.PoolRpc.ListPools:output_type -> mayastor.v1.ListPoolsResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pool_proto_init() }
func file_pool_proto_init() {
	if File_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolTypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoolOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pool_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pool_proto_goTypes,
		DependencyIndexes: file_pool_proto_depIdxs,
		EnumInfos:         file_pool_proto_enumTypes,
		MessageInfos:      file_pool_proto_msgTypes,
	}.Build()
	File_pool_proto = out.File
	file_pool_proto_rawDesc = nil
	file_pool_proto_goTypes = nil
	file_pool_proto_depIdxs = nil
}
