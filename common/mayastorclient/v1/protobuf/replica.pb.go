// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: replica.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Replica space usage
type ReplicaSpaceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapacityBytes                   uint64  `protobuf:"varint,1,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`                                                                   // replica capacity in bytes.
	AllocatedBytes                  uint64  `protobuf:"varint,2,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`                                                                // amount of actually allocated disk space for this replica in bytes
	ClusterSize                     uint64  `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`                                                                         // cluster size in bytes
	NumClusters                     uint64  `protobuf:"varint,4,opt,name=num_clusters,json=numClusters,proto3" json:"num_clusters,omitempty"`                                                                         // total number of clusters
	NumAllocatedClusters            uint64  `protobuf:"varint,5,opt,name=num_allocated_clusters,json=numAllocatedClusters,proto3" json:"num_allocated_clusters,omitempty"`                                            // number of actually used clusters
	AllocatedBytesSnapshots         uint64  `protobuf:"varint,6,opt,name=allocated_bytes_snapshots,json=allocatedBytesSnapshots,proto3" json:"allocated_bytes_snapshots,omitempty"`                                   // amount of space allocated by all replica snapshots
	NumAllocatedClustersSnapshots   uint64  `protobuf:"varint,7,opt,name=num_allocated_clusters_snapshots,json=numAllocatedClustersSnapshots,proto3" json:"num_allocated_clusters_snapshots,omitempty"`               // number of clusters used by all replica snapshots
	AllocatedBytesSnapshotFromClone *uint64 `protobuf:"varint,8,opt,name=allocated_bytes_snapshot_from_clone,json=allocatedBytesSnapshotFromClone,proto3,oneof" json:"allocated_bytes_snapshot_from_clone,omitempty"` // actual amount of disk space allocated by snapshot which is created from clone
}

func (x *ReplicaSpaceUsage) Reset() {
	*x = ReplicaSpaceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaSpaceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSpaceUsage) ProtoMessage() {}

func (x *ReplicaSpaceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSpaceUsage.ProtoReflect.Descriptor instead.
func (*ReplicaSpaceUsage) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicaSpaceUsage) GetCapacityBytes() uint64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetAllocatedBytes() uint64 {
	if x != nil {
		return x.AllocatedBytes
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetClusterSize() uint64 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetNumClusters() uint64 {
	if x != nil {
		return x.NumClusters
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetNumAllocatedClusters() uint64 {
	if x != nil {
		return x.NumAllocatedClusters
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetAllocatedBytesSnapshots() uint64 {
	if x != nil {
		return x.AllocatedBytesSnapshots
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetNumAllocatedClustersSnapshots() uint64 {
	if x != nil {
		return x.NumAllocatedClustersSnapshots
	}
	return 0
}

func (x *ReplicaSpaceUsage) GetAllocatedBytesSnapshotFromClone() uint64 {
	if x != nil && x.AllocatedBytesSnapshotFromClone != nil {
		return *x.AllocatedBytesSnapshotFromClone
	}
	return 0
}

// Replica properties
type Replica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                            // name of the replica
	Uuid         string             `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                            // uuid of the replica
	Pooluuid     string             `protobuf:"bytes,3,opt,name=pooluuid,proto3" json:"pooluuid,omitempty"`                                    // uuid of the pool on which replica is present
	Size         uint64             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                           // size of the replica in bytes
	Thin         bool               `protobuf:"varint,5,opt,name=thin,proto3" json:"thin,omitempty"`                                           // thin provisioning
	Share        ShareProtocol      `protobuf:"varint,6,opt,name=share,proto3,enum=mayastor.v1.ShareProtocol" json:"share,omitempty"`          // protocol used for exposing the replica
	Uri          string             `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`                                              // uri under which the replica is accessible by nexus
	Poolname     string             `protobuf:"bytes,8,opt,name=poolname,proto3" json:"poolname,omitempty"`                                    // name of the pool on which replica is present
	Usage        *ReplicaSpaceUsage `protobuf:"bytes,9,opt,name=usage,proto3" json:"usage,omitempty"`                                          // replica space usage
	AllowedHosts []string           `protobuf:"bytes,10,rep,name=allowed_hosts,json=allowedHosts,proto3" json:"allowed_hosts,omitempty"`       // host (nqn's) which are allowed to connect to the target
	IsSnapshot   bool               `protobuf:"varint,11,opt,name=is_snapshot,json=isSnapshot,proto3" json:"is_snapshot,omitempty"`            // true: snapshot false: normal replica
	IsClone      bool               `protobuf:"varint,12,opt,name=is_clone,json=isClone,proto3" json:"is_clone,omitempty"`                     // true: clone replica from snapshot, false: normal replica
	SnapshotUuid *string            `protobuf:"bytes,13,opt,name=snapshot_uuid,json=snapshotUuid,proto3,oneof" json:"snapshot_uuid,omitempty"` // snapshot uuid from which the clone replica is created
}

func (x *Replica) Reset() {
	*x = Replica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replica) ProtoMessage() {}

func (x *Replica) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replica.ProtoReflect.Descriptor instead.
func (*Replica) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{1}
}

func (x *Replica) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Replica) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Replica) GetPooluuid() string {
	if x != nil {
		return x.Pooluuid
	}
	return ""
}

func (x *Replica) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Replica) GetThin() bool {
	if x != nil {
		return x.Thin
	}
	return false
}

func (x *Replica) GetShare() ShareProtocol {
	if x != nil {
		return x.Share
	}
	return ShareProtocol_NONE
}

func (x *Replica) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Replica) GetPoolname() string {
	if x != nil {
		return x.Poolname
	}
	return ""
}

func (x *Replica) GetUsage() *ReplicaSpaceUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *Replica) GetAllowedHosts() []string {
	if x != nil {
		return x.AllowedHosts
	}
	return nil
}

func (x *Replica) GetIsSnapshot() bool {
	if x != nil {
		return x.IsSnapshot
	}
	return false
}

func (x *Replica) GetIsClone() bool {
	if x != nil {
		return x.IsClone
	}
	return false
}

func (x *Replica) GetSnapshotUuid() string {
	if x != nil && x.SnapshotUuid != nil {
		return *x.SnapshotUuid
	}
	return ""
}

type CreateReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // name of the replica
	Uuid         string        `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                     // uuid of the replica
	Pooluuid     string        `protobuf:"bytes,3,opt,name=pooluuid,proto3" json:"pooluuid,omitempty"`                             // uuid of the pool on which replica needs to be created.
	Size         uint64        `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                    // size of the replica in bytes
	Thin         bool          `protobuf:"varint,5,opt,name=thin,proto3" json:"thin,omitempty"`                                    // thin provisioning
	Share        ShareProtocol `protobuf:"varint,6,opt,name=share,proto3,enum=mayastor.v1.ShareProtocol" json:"share,omitempty"`   // protocol to expose the replica over
	AllowedHosts []string      `protobuf:"bytes,7,rep,name=allowed_hosts,json=allowedHosts,proto3" json:"allowed_hosts,omitempty"` // host (nqn's) which are allowed to connect to the target.
}

func (x *CreateReplicaRequest) Reset() {
	*x = CreateReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaRequest) ProtoMessage() {}

func (x *CreateReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{2}
}

func (x *CreateReplicaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CreateReplicaRequest) GetPooluuid() string {
	if x != nil {
		return x.Pooluuid
	}
	return ""
}

func (x *CreateReplicaRequest) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateReplicaRequest) GetThin() bool {
	if x != nil {
		return x.Thin
	}
	return false
}

func (x *CreateReplicaRequest) GetShare() ShareProtocol {
	if x != nil {
		return x.Share
	}
	return ShareProtocol_NONE
}

func (x *CreateReplicaRequest) GetAllowedHosts() []string {
	if x != nil {
		return x.AllowedHosts
	}
	return nil
}

// Destroy replica arguments.
type DestroyReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the replica.
	// Types that are assignable to Pool:
	//
	//	*DestroyReplicaRequest_PoolName
	//	*DestroyReplicaRequest_PoolUuid
	Pool isDestroyReplicaRequest_Pool `protobuf_oneof:"pool"`
}

func (x *DestroyReplicaRequest) Reset() {
	*x = DestroyReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyReplicaRequest) ProtoMessage() {}

func (x *DestroyReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyReplicaRequest.ProtoReflect.Descriptor instead.
func (*DestroyReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{3}
}

func (x *DestroyReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *DestroyReplicaRequest) GetPool() isDestroyReplicaRequest_Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (x *DestroyReplicaRequest) GetPoolName() string {
	if x, ok := x.GetPool().(*DestroyReplicaRequest_PoolName); ok {
		return x.PoolName
	}
	return ""
}

func (x *DestroyReplicaRequest) GetPoolUuid() string {
	if x, ok := x.GetPool().(*DestroyReplicaRequest_PoolUuid); ok {
		return x.PoolUuid
	}
	return ""
}

type isDestroyReplicaRequest_Pool interface {
	isDestroyReplicaRequest_Pool()
}

type DestroyReplicaRequest_PoolName struct {
	PoolName string `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3,oneof"` // name of the pool where the replica resides.
}

type DestroyReplicaRequest_PoolUuid struct {
	PoolUuid string `protobuf:"bytes,3,opt,name=pool_uuid,json=poolUuid,proto3,oneof"` // optional uuid for the pool where the replica resides.
}

func (*DestroyReplicaRequest_PoolName) isDestroyReplicaRequest_Pool() {}

func (*DestroyReplicaRequest_PoolUuid) isDestroyReplicaRequest_Pool() {}

// Share replica request.
type ShareReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the replica
	// protocol used for exposing the replica
	Share        ShareProtocol `protobuf:"varint,2,opt,name=share,proto3,enum=mayastor.v1.ShareProtocol" json:"share,omitempty"`
	AllowedHosts []string      `protobuf:"bytes,3,rep,name=allowed_hosts,json=allowedHosts,proto3" json:"allowed_hosts,omitempty"` // host (nqn's) which are allowed to connect to the target.
}

func (x *ShareReplicaRequest) Reset() {
	*x = ShareReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareReplicaRequest) ProtoMessage() {}

func (x *ShareReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareReplicaRequest.ProtoReflect.Descriptor instead.
func (*ShareReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{4}
}

func (x *ShareReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShareReplicaRequest) GetShare() ShareProtocol {
	if x != nil {
		return x.Share
	}
	return ShareProtocol_NONE
}

func (x *ShareReplicaRequest) GetAllowedHosts() []string {
	if x != nil {
		return x.AllowedHosts
	}
	return nil
}

// Unshare replica request
type UnshareReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // uuid of the replica
}

func (x *UnshareReplicaRequest) Reset() {
	*x = UnshareReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareReplicaRequest) ProtoMessage() {}

func (x *UnshareReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareReplicaRequest.ProtoReflect.Descriptor instead.
func (*UnshareReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{5}
}

func (x *UnshareReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Resize(expand or shrink) a replica. Only valid for normal lvol
// replicas, and not lvols that are a snapshot.
type ResizeReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                                         // uuid of the replica.
	RequestedSize uint64 `protobuf:"varint,2,opt,name=requested_size,json=requestedSize,proto3" json:"requested_size,omitempty"` // indicates the requested new size of replica.
}

func (x *ResizeReplicaRequest) Reset() {
	*x = ResizeReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeReplicaRequest) ProtoMessage() {}

func (x *ResizeReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeReplicaRequest.ProtoReflect.Descriptor instead.
func (*ResizeReplicaRequest) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{6}
}

func (x *ResizeReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ResizeReplicaRequest) GetRequestedSize() uint64 {
	if x != nil {
		return x.RequestedSize
	}
	return 0
}

// List of replicas and their properties.
type ListReplicasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas []*Replica `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"` // list of the replicas
}

func (x *ListReplicasResponse) Reset() {
	*x = ListReplicasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplicasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicasResponse) ProtoMessage() {}

func (x *ListReplicasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicasResponse.ProtoReflect.Descriptor instead.
func (*ListReplicasResponse) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{7}
}

func (x *ListReplicasResponse) GetReplicas() []*Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type ListReplicaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // list the replica with the name if provided
	Poolname *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=poolname,proto3" json:"poolname,omitempty"` // list the replicas on the provided pool, by name
	Uuid     *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`         // list the replica with the uuid if provided
	Pooluuid *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=pooluuid,proto3" json:"pooluuid,omitempty"` // list the replicas on the provided pool, by uuid
	Query    *ListReplicaOptions_Query `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`       // list replica based on Query value
}

func (x *ListReplicaOptions) Reset() {
	*x = ListReplicaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplicaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicaOptions) ProtoMessage() {}

func (x *ListReplicaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicaOptions.ProtoReflect.Descriptor instead.
func (*ListReplicaOptions) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{8}
}

func (x *ListReplicaOptions) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListReplicaOptions) GetPoolname() *wrapperspb.StringValue {
	if x != nil {
		return x.Poolname
	}
	return nil
}

func (x *ListReplicaOptions) GetUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ListReplicaOptions) GetPooluuid() *wrapperspb.StringValue {
	if x != nil {
		return x.Pooluuid
	}
	return nil
}

func (x *ListReplicaOptions) GetQuery() *ListReplicaOptions_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

// / Query used for getting specific types of replicas. These are mutually exclusive, ex. a snapshot cannot be clone.
type ListReplicaOptions_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica  bool `protobuf:"varint,1,opt,name=replica,proto3" json:"replica,omitempty"`   // query for selecting or normal replica types.
	Snapshot bool `protobuf:"varint,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"` // query for selecting or snapshot types.
	Clone    bool `protobuf:"varint,3,opt,name=clone,proto3" json:"clone,omitempty"`       // query for selecting or clone types.
}

func (x *ListReplicaOptions_Query) Reset() {
	*x = ListReplicaOptions_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replica_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplicaOptions_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicaOptions_Query) ProtoMessage() {}

func (x *ListReplicaOptions_Query) ProtoReflect() protoreflect.Message {
	mi := &file_replica_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicaOptions_Query.ProtoReflect.Descriptor instead.
func (*ListReplicaOptions_Query) Descriptor() ([]byte, []int) {
	return file_replica_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListReplicaOptions_Query) GetReplica() bool {
	if x != nil {
		return x.Replica
	}
	return false
}

func (x *ListReplicaOptions_Query) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

func (x *ListReplicaOptions_Query) GetClone() bool {
	if x != nil {
		return x.Clone
	}
	return false
}

var File_replica_proto protoreflect.FileDescriptor

var file_replica_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1d, 0x6e, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x51,
	0x0a, 0x23, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x22, 0xa8, 0x03, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x68, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x22, 0x71, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x22, 0xfe, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x6f,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x53, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x32, 0xe2, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x70, 0x63,
	0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x22,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1f, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e,
	0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x22,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x21, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x62, 0x73, 0x2f, 0x6d, 0x61, 0x79,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_replica_proto_rawDescOnce sync.Once
	file_replica_proto_rawDescData = file_replica_proto_rawDesc
)

func file_replica_proto_rawDescGZIP() []byte {
	file_replica_proto_rawDescOnce.Do(func() {
		file_replica_proto_rawDescData = protoimpl.X.CompressGZIP(file_replica_proto_rawDescData)
	})
	return file_replica_proto_rawDescData
}

var file_replica_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_replica_proto_goTypes = []interface{}{
	(*ReplicaSpaceUsage)(nil),        // 0: mayastor.v1.ReplicaSpaceUsage
	(*Replica)(nil),                  // 1: mayastor.v1.Replica
	(*CreateReplicaRequest)(nil),     // 2: mayastor.v1.CreateReplicaRequest
	(*DestroyReplicaRequest)(nil),    // 3: mayastor.v1.DestroyReplicaRequest
	(*ShareReplicaRequest)(nil),      // 4: mayastor.v1.ShareReplicaRequest
	(*UnshareReplicaRequest)(nil),    // 5: mayastor.v1.UnshareReplicaRequest
	(*ResizeReplicaRequest)(nil),     // 6: mayastor.v1.ResizeReplicaRequest
	(*ListReplicasResponse)(nil),     // 7: mayastor.v1.ListReplicasResponse
	(*ListReplicaOptions)(nil),       // 8: mayastor.v1.ListReplicaOptions
	(*ListReplicaOptions_Query)(nil), // 9: mayastor.v1.ListReplicaOptions.Query
	(ShareProtocol)(0),               // 10: mayastor.v1.ShareProtocol
	(*wrapperspb.StringValue)(nil),   // 11: google.protobuf.StringValue
	(*emptypb.Empty)(nil),            // 12: google.protobuf.Empty
}
var file_replica_proto_depIdxs = []int32{
	10, // 0: mayastor.v1.Replica.share:type_name -> mayastor.v1.ShareProtocol
	0,  // 1: mayastor.v1.Replica.usage:type_name -> mayastor.v1.ReplicaSpaceUsage
	10, // 2: mayastor.v1.CreateReplicaRequest.share:type_name -> mayastor.v1.ShareProtocol
	10, // 3: mayastor.v1.ShareReplicaRequest.share:type_name -> mayastor.v1.ShareProtocol
	1,  // 4: mayastor.v1.ListReplicasResponse.replicas:type_name -> mayastor.v1.Replica
	11, // 5: mayastor.v1.ListReplicaOptions.name:type_name -> google.protobuf.StringValue
	11, // 6: mayastor.v1.ListReplicaOptions.poolname:type_name -> google.protobuf.StringValue
	11, // 7: mayastor.v1.ListReplicaOptions.uuid:type_name -> google.protobuf.StringValue
	11, // 8: mayastor.v1.ListReplicaOptions.pooluuid:type_name -> google.protobuf.StringValue
	9,  // 9: mayastor.v1.ListReplicaOptions.query:type_name -> mayastor.v1.ListReplicaOptions.Query
	2,  // 10: mayastor.v1.ReplicaRpc.CreateReplica:input_type -> mayastor.v1.CreateReplicaRequest
	3,  // 11: mayastor.v1.ReplicaRpc.DestroyReplica:input_type -> mayastor.v1.DestroyReplicaRequest
	8,  // 12: mayastor.v1.ReplicaRpc.ListReplicas:input_type -> mayastor.v1.ListReplicaOptions
	4,  // 13: mayastor.v1.ReplicaRpc.ShareReplica:input_type -> mayastor.v1.ShareReplicaRequest
	5,  // 14: mayastor.v1.ReplicaRpc.UnshareReplica:input_type -> mayastor.v1.UnshareReplicaRequest
	6,  // 15: mayastor.v1.ReplicaRpc.ResizeReplica:input_type -> mayastor.v1.ResizeReplicaRequest
	1,  // 16: mayastor.v1.ReplicaRpc.CreateReplica:output_type -> mayastor.v1.Replica
	12, // 17: mayastor.v1.ReplicaRpc.DestroyReplica:output_type -> google.protobuf.Empty
	7,  // 18: mayastor.v1.ReplicaRpc.ListReplicas:output_type -> mayastor.v1.ListReplicasResponse
	1,  // 19: mayastor.v1.ReplicaRpc.ShareReplica:output_type -> mayastor.v1.Replica
	1,  // 20: mayastor.v1.ReplicaRpc.UnshareReplica:output_type -> mayastor.v1.Replica
	1,  // 21: mayastor.v1.ReplicaRpc.ResizeReplica:output_type -> mayastor.v1.Replica
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_replica_proto_init() }
func file_replica_proto_init() {
	if File_replica_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_replica_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaSpaceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplicasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplicaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replica_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplicaOptions_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_replica_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_replica_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_replica_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DestroyReplicaRequest_PoolName)(nil),
		(*DestroyReplicaRequest_PoolUuid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_replica_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_replica_proto_goTypes,
		DependencyIndexes: file_replica_proto_depIdxs,
		MessageInfos:      file_replica_proto_msgTypes,
	}.Build()
	File_replica_proto = out.File
	file_replica_proto_rawDesc = nil
	file_replica_proto_goTypes = nil
	file_replica_proto_depIdxs = nil
}
