// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: snapshot.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parameter details of a single snapshot
type SnapshotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotUuid      string                 `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid,omitempty"`                  // uuid of the snapshot
	SnapshotName      string                 `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`                  // name of the snapshot
	SnapshotSize      uint64                 `protobuf:"varint,3,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty"`                 // amount of bytes referenced by snapshot
	NumClones         uint64                 `protobuf:"varint,4,opt,name=num_clones,json=numClones,proto3" json:"num_clones,omitempty"`                          // number of clones created from this snapshot
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                            // snapshot creation_timestamp
	SourceUuid        string                 `protobuf:"bytes,6,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`                        // uuid of the source from which snapshot is created (nexus / replica)
	SourceSize        uint64                 `protobuf:"varint,7,opt,name=source_size,json=sourceSize,proto3" json:"source_size,omitempty"`                       // amount of bytes referenced by source
	PoolUuid          string                 `protobuf:"bytes,8,opt,name=pool_uuid,json=poolUuid,proto3" json:"pool_uuid,omitempty"`                              // pool UUID in which snapshot is present
	PoolName          string                 `protobuf:"bytes,9,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`                              // pool name in which snapshot is present
	EntityId          string                 `protobuf:"bytes,10,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`                             // uuid of the entity for which snapshot is taken.
	TxnId             string                 `protobuf:"bytes,11,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                                      // unique transaction id for snapshot.
	ValidSnapshot     bool                   `protobuf:"varint,12,opt,name=valid_snapshot,json=validSnapshot,proto3" json:"valid_snapshot,omitempty"`             // true: valid, false: invalid (missing one/more snapshot descriptor field i.e. txn_id, entity_id, source_uuid
	ReadyAsSource     bool                   `protobuf:"varint,13,opt,name=ready_as_source,json=readyAsSource,proto3" json:"ready_as_source,omitempty"`           // ready for usage, i,e source for another volume.
	ReferencedBytes   uint64                 `protobuf:"varint,14,opt,name=referenced_bytes,json=referencedBytes,proto3" json:"referenced_bytes,omitempty"`       // amount of bytes referenced by all successor snapshots.
	DiscardedSnapshot bool                   `protobuf:"varint,15,opt,name=discarded_snapshot,json=discardedSnapshot,proto3" json:"discarded_snapshot,omitempty"` // true: snapshot is marked as discarded. false: Valid Snapshot
}

func (x *SnapshotInfo) Reset() {
	*x = SnapshotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotInfo) ProtoMessage() {}

func (x *SnapshotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotInfo.ProtoReflect.Descriptor instead.
func (*SnapshotInfo) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *SnapshotInfo) GetSnapshotUuid() string {
	if x != nil {
		return x.SnapshotUuid
	}
	return ""
}

func (x *SnapshotInfo) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *SnapshotInfo) GetSnapshotSize() uint64 {
	if x != nil {
		return x.SnapshotSize
	}
	return 0
}

func (x *SnapshotInfo) GetNumClones() uint64 {
	if x != nil {
		return x.NumClones
	}
	return 0
}

func (x *SnapshotInfo) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SnapshotInfo) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *SnapshotInfo) GetSourceSize() uint64 {
	if x != nil {
		return x.SourceSize
	}
	return 0
}

func (x *SnapshotInfo) GetPoolUuid() string {
	if x != nil {
		return x.PoolUuid
	}
	return ""
}

func (x *SnapshotInfo) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *SnapshotInfo) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *SnapshotInfo) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *SnapshotInfo) GetValidSnapshot() bool {
	if x != nil {
		return x.ValidSnapshot
	}
	return false
}

func (x *SnapshotInfo) GetReadyAsSource() bool {
	if x != nil {
		return x.ReadyAsSource
	}
	return false
}

func (x *SnapshotInfo) GetReferencedBytes() uint64 {
	if x != nil {
		return x.ReferencedBytes
	}
	return 0
}

func (x *SnapshotInfo) GetDiscardedSnapshot() bool {
	if x != nil {
		return x.DiscardedSnapshot
	}
	return false
}

// Request parameters to list snapshot.
type ListSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUuid   *string                     `protobuf:"bytes,1,opt,name=source_uuid,json=sourceUuid,proto3,oneof" json:"source_uuid,omitempty"`       // source uuid from which snapshot is taken
	SnapshotUuid *string                     `protobuf:"bytes,2,opt,name=snapshot_uuid,json=snapshotUuid,proto3,oneof" json:"snapshot_uuid,omitempty"` // snapshot uuid for which the detail can be listed
	Query        *ListSnapshotsRequest_Query `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`                                         // list snapshot based on Query's inner field values if some.
}

func (x *ListSnapshotsRequest) Reset() {
	*x = ListSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsRequest) ProtoMessage() {}

func (x *ListSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *ListSnapshotsRequest) GetSourceUuid() string {
	if x != nil && x.SourceUuid != nil {
		return *x.SourceUuid
	}
	return ""
}

func (x *ListSnapshotsRequest) GetSnapshotUuid() string {
	if x != nil && x.SnapshotUuid != nil {
		return *x.SnapshotUuid
	}
	return ""
}

func (x *ListSnapshotsRequest) GetQuery() *ListSnapshotsRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

// List Snapshot Response.
type ListSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*SnapshotInfo `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"` // list of Snapshot Params.
}

func (x *ListSnapshotsResponse) Reset() {
	*x = ListSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsResponse) ProtoMessage() {}

func (x *ListSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *ListSnapshotsResponse) GetSnapshots() []*SnapshotInfo {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

// Delete Snapshot Request.
type DestroySnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotUuid string `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid,omitempty"` // snapshot to be deleted
	// Types that are assignable to Pool:
	//
	//	*DestroySnapshotRequest_PoolName
	//	*DestroySnapshotRequest_PoolUuid
	Pool isDestroySnapshotRequest_Pool `protobuf_oneof:"pool"`
}

func (x *DestroySnapshotRequest) Reset() {
	*x = DestroySnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroySnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroySnapshotRequest) ProtoMessage() {}

func (x *DestroySnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroySnapshotRequest.ProtoReflect.Descriptor instead.
func (*DestroySnapshotRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *DestroySnapshotRequest) GetSnapshotUuid() string {
	if x != nil {
		return x.SnapshotUuid
	}
	return ""
}

func (m *DestroySnapshotRequest) GetPool() isDestroySnapshotRequest_Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (x *DestroySnapshotRequest) GetPoolName() string {
	if x, ok := x.GetPool().(*DestroySnapshotRequest_PoolName); ok {
		return x.PoolName
	}
	return ""
}

func (x *DestroySnapshotRequest) GetPoolUuid() string {
	if x, ok := x.GetPool().(*DestroySnapshotRequest_PoolUuid); ok {
		return x.PoolUuid
	}
	return ""
}

type isDestroySnapshotRequest_Pool interface {
	isDestroySnapshotRequest_Pool()
}

type DestroySnapshotRequest_PoolName struct {
	PoolName string `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3,oneof"` // name of the pool where the snapshot resides.
}

type DestroySnapshotRequest_PoolUuid struct {
	PoolUuid string `protobuf:"bytes,3,opt,name=pool_uuid,json=poolUuid,proto3,oneof"` // optional uuid for the pool where the snapshot resides.
}

func (*DestroySnapshotRequest_PoolName) isDestroySnapshotRequest_Pool() {}

func (*DestroySnapshotRequest_PoolUuid) isDestroySnapshotRequest_Pool() {}

// Create Replica Snapshot Request.
type CreateReplicaSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaUuid  string `protobuf:"bytes,1,opt,name=replica_uuid,json=replicaUuid,proto3" json:"replica_uuid,omitempty"`    // uuid of the replica
	SnapshotUuid string `protobuf:"bytes,2,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid,omitempty"` // uuid of the snapshot
	SnapshotName string `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"` // snapshot name
	EntityId     string `protobuf:"bytes,4,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`             // entity associated with this snapshot
	TxnId        string `protobuf:"bytes,5,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                      // unique transaction id generate for snapshot creation
}

func (x *CreateReplicaSnapshotRequest) Reset() {
	*x = CreateReplicaSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaSnapshotRequest) ProtoMessage() {}

func (x *CreateReplicaSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicaSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{4}
}

func (x *CreateReplicaSnapshotRequest) GetReplicaUuid() string {
	if x != nil {
		return x.ReplicaUuid
	}
	return ""
}

func (x *CreateReplicaSnapshotRequest) GetSnapshotUuid() string {
	if x != nil {
		return x.SnapshotUuid
	}
	return ""
}

func (x *CreateReplicaSnapshotRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *CreateReplicaSnapshotRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *CreateReplicaSnapshotRequest) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

// / Create Replica Snapshot Response.
type CreateReplicaSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaUuid string        `protobuf:"bytes,1,opt,name=replica_uuid,json=replicaUuid,proto3" json:"replica_uuid,omitempty"` // UUID of the source replica
	Snapshot    *SnapshotInfo `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`                          // Snapshot detail information
}

func (x *CreateReplicaSnapshotResponse) Reset() {
	*x = CreateReplicaSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicaSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicaSnapshotResponse) ProtoMessage() {}

func (x *CreateReplicaSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicaSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateReplicaSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{5}
}

func (x *CreateReplicaSnapshotResponse) GetReplicaUuid() string {
	if x != nil {
		return x.ReplicaUuid
	}
	return ""
}

func (x *CreateReplicaSnapshotResponse) GetSnapshot() *SnapshotInfo {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

// Request parameter for Nexus Snapshot Create.
type NexusCreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NexusUuid    string                                  `protobuf:"bytes,1,opt,name=nexus_uuid,json=nexusUuid,proto3" json:"nexus_uuid,omitempty"`          // uuid of the nexus
	EntityId     string                                  `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`             // entity associated with this snapshot
	TxnId        string                                  `protobuf:"bytes,3,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                      // transaction id of the snapshot
	SnapshotName string                                  `protobuf:"bytes,4,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"` // name of the snapshot
	Replicas     []*NexusCreateSnapshotReplicaDescriptor `protobuf:"bytes,5,rep,name=replicas,proto3" json:"replicas,omitempty"`                             // replicas that participate in snapshot operation
}

func (x *NexusCreateSnapshotRequest) Reset() {
	*x = NexusCreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexusCreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexusCreateSnapshotRequest) ProtoMessage() {}

func (x *NexusCreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexusCreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*NexusCreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{6}
}

func (x *NexusCreateSnapshotRequest) GetNexusUuid() string {
	if x != nil {
		return x.NexusUuid
	}
	return ""
}

func (x *NexusCreateSnapshotRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *NexusCreateSnapshotRequest) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *NexusCreateSnapshotRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *NexusCreateSnapshotRequest) GetReplicas() []*NexusCreateSnapshotReplicaDescriptor {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type NexusCreateSnapshotReplicaDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaUuid  string  `protobuf:"bytes,1,opt,name=replica_uuid,json=replicaUuid,proto3" json:"replica_uuid,omitempty"`          // uuid of the replica
	SnapshotUuid *string `protobuf:"bytes,2,opt,name=snapshot_uuid,json=snapshotUuid,proto3,oneof" json:"snapshot_uuid,omitempty"` // uuid of the snapshot (can be omitted if replica is skipped)
	Skip         bool    `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`                                          // skip this replica
}

func (x *NexusCreateSnapshotReplicaDescriptor) Reset() {
	*x = NexusCreateSnapshotReplicaDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexusCreateSnapshotReplicaDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexusCreateSnapshotReplicaDescriptor) ProtoMessage() {}

func (x *NexusCreateSnapshotReplicaDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexusCreateSnapshotReplicaDescriptor.ProtoReflect.Descriptor instead.
func (*NexusCreateSnapshotReplicaDescriptor) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *NexusCreateSnapshotReplicaDescriptor) GetReplicaUuid() string {
	if x != nil {
		return x.ReplicaUuid
	}
	return ""
}

func (x *NexusCreateSnapshotReplicaDescriptor) GetSnapshotUuid() string {
	if x != nil && x.SnapshotUuid != nil {
		return *x.SnapshotUuid
	}
	return ""
}

func (x *NexusCreateSnapshotReplicaDescriptor) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

// Response parameter for Nexus Snapshot Create.
type NexusCreateSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nexus             *Nexus                              `protobuf:"bytes,1,opt,name=nexus,proto3" json:"nexus,omitempty"`                                                  // nexus descriptor
	SnapshotTimestamp *timestamppb.Timestamp              `protobuf:"bytes,2,opt,name=snapshot_timestamp,json=snapshotTimestamp,proto3" json:"snapshot_timestamp,omitempty"` // snapshot creation timestamp
	ReplicasDone      []*NexusCreateSnapshotReplicaStatus `protobuf:"bytes,3,rep,name=replicas_done,json=replicasDone,proto3" json:"replicas_done,omitempty"`                // status for replicas that participated in nexus snapshot operation
	ReplicasSkipped   []string                            `protobuf:"bytes,4,rep,name=replicas_skipped,json=replicasSkipped,proto3" json:"replicas_skipped,omitempty"`       // replicas that did not participate in nexus snapshot operation (uuids)
}

func (x *NexusCreateSnapshotResponse) Reset() {
	*x = NexusCreateSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexusCreateSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexusCreateSnapshotResponse) ProtoMessage() {}

func (x *NexusCreateSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexusCreateSnapshotResponse.ProtoReflect.Descriptor instead.
func (*NexusCreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{8}
}

func (x *NexusCreateSnapshotResponse) GetNexus() *Nexus {
	if x != nil {
		return x.Nexus
	}
	return nil
}

func (x *NexusCreateSnapshotResponse) GetSnapshotTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTimestamp
	}
	return nil
}

func (x *NexusCreateSnapshotResponse) GetReplicasDone() []*NexusCreateSnapshotReplicaStatus {
	if x != nil {
		return x.ReplicasDone
	}
	return nil
}

func (x *NexusCreateSnapshotResponse) GetReplicasSkipped() []string {
	if x != nil {
		return x.ReplicasSkipped
	}
	return nil
}

type NexusCreateSnapshotReplicaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaUuid string `protobuf:"bytes,1,opt,name=replica_uuid,json=replicaUuid,proto3" json:"replica_uuid,omitempty"` // uuid of the replica
	StatusCode  uint32 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`   // snapshot operation status (0 means successful completion)
}

func (x *NexusCreateSnapshotReplicaStatus) Reset() {
	*x = NexusCreateSnapshotReplicaStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexusCreateSnapshotReplicaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexusCreateSnapshotReplicaStatus) ProtoMessage() {}

func (x *NexusCreateSnapshotReplicaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexusCreateSnapshotReplicaStatus.ProtoReflect.Descriptor instead.
func (*NexusCreateSnapshotReplicaStatus) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *NexusCreateSnapshotReplicaStatus) GetReplicaUuid() string {
	if x != nil {
		return x.ReplicaUuid
	}
	return ""
}

func (x *NexusCreateSnapshotReplicaStatus) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

// Request Parameters for Creating Snapshot Clone.
type CreateSnapshotCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotUuid string `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid,omitempty"` // uuid of the snapshot
	CloneName    string `protobuf:"bytes,2,opt,name=clone_name,json=cloneName,proto3" json:"clone_name,omitempty"`          // snapshot clone name
	CloneUuid    string `protobuf:"bytes,3,opt,name=clone_uuid,json=cloneUuid,proto3" json:"clone_uuid,omitempty"`          // uuid of the clone to be created from snapshot
}

func (x *CreateSnapshotCloneRequest) Reset() {
	*x = CreateSnapshotCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotCloneRequest) ProtoMessage() {}

func (x *CreateSnapshotCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotCloneRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotCloneRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSnapshotCloneRequest) GetSnapshotUuid() string {
	if x != nil {
		return x.SnapshotUuid
	}
	return ""
}

func (x *CreateSnapshotCloneRequest) GetCloneName() string {
	if x != nil {
		return x.CloneName
	}
	return ""
}

func (x *CreateSnapshotCloneRequest) GetCloneUuid() string {
	if x != nil {
		return x.CloneUuid
	}
	return ""
}

// Request Parameters for List Snapshot Clone.
type ListSnapshotCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotUuid *string `protobuf:"bytes,1,opt,name=snapshot_uuid,json=snapshotUuid,proto3,oneof" json:"snapshot_uuid,omitempty"` // if snapshot uuid is present, return snapshot specific clone, else return all clones
}

func (x *ListSnapshotCloneRequest) Reset() {
	*x = ListSnapshotCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotCloneRequest) ProtoMessage() {}

func (x *ListSnapshotCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotCloneRequest.ProtoReflect.Descriptor instead.
func (*ListSnapshotCloneRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{11}
}

func (x *ListSnapshotCloneRequest) GetSnapshotUuid() string {
	if x != nil && x.SnapshotUuid != nil {
		return *x.SnapshotUuid
	}
	return ""
}

// Response Parameters for List Snapshot Clone.
type ListSnapshotCloneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas []*Replica `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"` // list of the replicas
}

func (x *ListSnapshotCloneResponse) Reset() {
	*x = ListSnapshotCloneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotCloneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotCloneResponse) ProtoMessage() {}

func (x *ListSnapshotCloneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotCloneResponse.ProtoReflect.Descriptor instead.
func (*ListSnapshotCloneResponse) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{12}
}

func (x *ListSnapshotCloneResponse) GetReplicas() []*Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// Query is used to filter snapshots in list snapshot response based on it's inner field values if some.
type ListSnapshotsRequest_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invalid   *bool `protobuf:"varint,1,opt,name=invalid,proto3,oneof" json:"invalid,omitempty"`     // Filter based on invalid if some.
	Discarded *bool `protobuf:"varint,2,opt,name=discarded,proto3,oneof" json:"discarded,omitempty"` // Filter based on discarded if some.
}

func (x *ListSnapshotsRequest_Query) Reset() {
	*x = ListSnapshotsRequest_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snapshot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsRequest_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsRequest_Query) ProtoMessage() {}

func (x *ListSnapshotsRequest_Query) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsRequest_Query.ProtoReflect.Descriptor instead.
func (*ListSnapshotsRequest_Query) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListSnapshotsRequest_Query) GetInvalid() bool {
	if x != nil && x.Invalid != nil {
		return *x.Invalid
	}
	return false
}

func (x *ListSnapshotsRequest_Query) GetDiscarded() bool {
	if x != nil && x.Discarded != nil {
		return *x.Discarded
	}
	return false
}

var File_snapshot_proto protoreflect.FileDescriptor

var file_snapshot_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6e, 0x65, 0x78, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x04, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x61, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x63, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e,
	0x49, 0x64, 0x22, 0x79, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xe3, 0x01,
	0x0a, 0x1a, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x78, 0x75, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x24, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x91, 0x02, 0x0a, 0x1b, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x05, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78,
	0x75, 0x73, 0x52, 0x05, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x22, 0x66, 0x0a, 0x20, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x32, 0xd4, 0x04, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x70, 0x63, 0x12, 0x70, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x75, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x27, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x62, 0x73,
	0x2f, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_snapshot_proto_rawDescOnce sync.Once
	file_snapshot_proto_rawDescData = file_snapshot_proto_rawDesc
)

func file_snapshot_proto_rawDescGZIP() []byte {
	file_snapshot_proto_rawDescOnce.Do(func() {
		file_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_snapshot_proto_rawDescData)
	})
	return file_snapshot_proto_rawDescData
}

var file_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_snapshot_proto_goTypes = []interface{}{
	(*SnapshotInfo)(nil),                         // 0: mayastor.v1.SnapshotInfo
	(*ListSnapshotsRequest)(nil),                 // 1: mayastor.v1.ListSnapshotsRequest
	(*ListSnapshotsResponse)(nil),                // 2: mayastor.v1.ListSnapshotsResponse
	(*DestroySnapshotRequest)(nil),               // 3: mayastor.v1.DestroySnapshotRequest
	(*CreateReplicaSnapshotRequest)(nil),         // 4: mayastor.v1.CreateReplicaSnapshotRequest
	(*CreateReplicaSnapshotResponse)(nil),        // 5: mayastor.v1.CreateReplicaSnapshotResponse
	(*NexusCreateSnapshotRequest)(nil),           // 6: mayastor.v1.NexusCreateSnapshotRequest
	(*NexusCreateSnapshotReplicaDescriptor)(nil), // 7: mayastor.v1.NexusCreateSnapshotReplicaDescriptor
	(*NexusCreateSnapshotResponse)(nil),          // 8: mayastor.v1.NexusCreateSnapshotResponse
	(*NexusCreateSnapshotReplicaStatus)(nil),     // 9: mayastor.v1.NexusCreateSnapshotReplicaStatus
	(*CreateSnapshotCloneRequest)(nil),           // 10: mayastor.v1.CreateSnapshotCloneRequest
	(*ListSnapshotCloneRequest)(nil),             // 11: mayastor.v1.ListSnapshotCloneRequest
	(*ListSnapshotCloneResponse)(nil),            // 12: mayastor.v1.ListSnapshotCloneResponse
	(*ListSnapshotsRequest_Query)(nil),           // 13: mayastor.v1.ListSnapshotsRequest.Query
	(*timestamppb.Timestamp)(nil),                // 14: google.protobuf.Timestamp
	(*Nexus)(nil),                                // 15: mayastor.v1.Nexus
	(*Replica)(nil),                              // 16: mayastor.v1.Replica
	(*emptypb.Empty)(nil),                        // 17: google.protobuf.Empty
}
var file_snapshot_proto_depIdxs = []int32{
	14, // 0: mayastor.v1.SnapshotInfo.timestamp:type_name -> google.protobuf.Timestamp
	13, // 1: mayastor.v1.ListSnapshotsRequest.query:type_name -> mayastor.v1.ListSnapshotsRequest.Query
	0,  // 2: mayastor.v1.ListSnapshotsResponse.snapshots:type_name -> mayastor.v1.SnapshotInfo
	0,  // 3: mayastor.v1.CreateReplicaSnapshotResponse.snapshot:type_name -> mayastor.v1.SnapshotInfo
	7,  // 4: mayastor.v1.NexusCreateSnapshotRequest.replicas:type_name -> mayastor.v1.NexusCreateSnapshotReplicaDescriptor
	15, // 5: mayastor.v1.NexusCreateSnapshotResponse.nexus:type_name -> mayastor.v1.Nexus
	14, // 6: mayastor.v1.NexusCreateSnapshotResponse.snapshot_timestamp:type_name -> google.protobuf.Timestamp
	9,  // 7: mayastor.v1.NexusCreateSnapshotResponse.replicas_done:type_name -> mayastor.v1.NexusCreateSnapshotReplicaStatus
	16, // 8: mayastor.v1.ListSnapshotCloneResponse.replicas:type_name -> mayastor.v1.Replica
	4,  // 9: mayastor.v1.SnapshotRpc.CreateReplicaSnapshot:input_type -> mayastor.v1.CreateReplicaSnapshotRequest
	6,  // 10: mayastor.v1.SnapshotRpc.CreateNexusSnapshot:input_type -> mayastor.v1.NexusCreateSnapshotRequest
	1,  // 11: mayastor.v1.SnapshotRpc.ListSnapshot:input_type -> mayastor.v1.ListSnapshotsRequest
	3,  // 12: mayastor.v1.SnapshotRpc.DestroySnapshot:input_type -> mayastor.v1.DestroySnapshotRequest
	10, // 13: mayastor.v1.SnapshotRpc.CreateSnapshotClone:input_type -> mayastor.v1.CreateSnapshotCloneRequest
	11, // 14: mayastor.v1.SnapshotRpc.ListSnapshotClone:input_type -> mayastor.v1.ListSnapshotCloneRequest
	5,  // 15: mayastor.v1.SnapshotRpc.CreateReplicaSnapshot:output_type -> mayastor.v1.CreateReplicaSnapshotResponse
	8,  // 16: mayastor.v1.SnapshotRpc.CreateNexusSnapshot:output_type -> mayastor.v1.NexusCreateSnapshotResponse
	2,  // 17: mayastor.v1.SnapshotRpc.ListSnapshot:output_type -> mayastor.v1.ListSnapshotsResponse
	17, // 18: mayastor.v1.SnapshotRpc.DestroySnapshot:output_type -> google.protobuf.Empty
	16, // 19: mayastor.v1.SnapshotRpc.CreateSnapshotClone:output_type -> mayastor.v1.Replica
	12, // 20: mayastor.v1.SnapshotRpc.ListSnapshotClone:output_type -> mayastor.v1.ListSnapshotCloneResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_snapshot_proto_init() }
func file_snapshot_proto_init() {
	if File_snapshot_proto != nil {
		return
	}
	file_replica_proto_init()
	file_nexus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroySnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicaSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexusCreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexusCreateSnapshotReplicaDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexusCreateSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexusCreateSnapshotReplicaStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotCloneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snapshot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsRequest_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snapshot_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_snapshot_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DestroySnapshotRequest_PoolName)(nil),
		(*DestroySnapshotRequest_PoolUuid)(nil),
	}
	file_snapshot_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_snapshot_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_snapshot_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snapshot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snapshot_proto_goTypes,
		DependencyIndexes: file_snapshot_proto_depIdxs,
		MessageInfos:      file_snapshot_proto_msgTypes,
	}.Build()
	File_snapshot_proto = out.File
	file_snapshot_proto_rawDesc = nil
	file_snapshot_proto_goTypes = nil
	file_snapshot_proto_depIdxs = nil
}
