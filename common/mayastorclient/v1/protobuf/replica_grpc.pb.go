// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: replica.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicaRpcClient is the client API for ReplicaRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaRpcClient interface {
	// Replica related methods.
	//
	// Replica allocates space from storage pool.
	CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*Replica, error)
	DestroyReplica(ctx context.Context, in *DestroyReplicaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListReplicas(ctx context.Context, in *ListReplicaOptions, opts ...grpc.CallOption) (*ListReplicasResponse, error)
	ShareReplica(ctx context.Context, in *ShareReplicaRequest, opts ...grpc.CallOption) (*Replica, error)
	UnshareReplica(ctx context.Context, in *UnshareReplicaRequest, opts ...grpc.CallOption) (*Replica, error)
	ResizeReplica(ctx context.Context, in *ResizeReplicaRequest, opts ...grpc.CallOption) (*Replica, error)
}

type replicaRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaRpcClient(cc grpc.ClientConnInterface) ReplicaRpcClient {
	return &replicaRpcClient{cc}
}

func (c *replicaRpcClient) CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*Replica, error) {
	out := new(Replica)
	err := c.cc.Invoke(ctx, "/mayastor.v1.ReplicaRpc/CreateReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRpcClient) DestroyReplica(ctx context.Context, in *DestroyReplicaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mayastor.v1.ReplicaRpc/DestroyReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRpcClient) ListReplicas(ctx context.Context, in *ListReplicaOptions, opts ...grpc.CallOption) (*ListReplicasResponse, error) {
	out := new(ListReplicasResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.ReplicaRpc/ListReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRpcClient) ShareReplica(ctx context.Context, in *ShareReplicaRequest, opts ...grpc.CallOption) (*Replica, error) {
	out := new(Replica)
	err := c.cc.Invoke(ctx, "/mayastor.v1.ReplicaRpc/ShareReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRpcClient) UnshareReplica(ctx context.Context, in *UnshareReplicaRequest, opts ...grpc.CallOption) (*Replica, error) {
	out := new(Replica)
	err := c.cc.Invoke(ctx, "/mayastor.v1.ReplicaRpc/UnshareReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRpcClient) ResizeReplica(ctx context.Context, in *ResizeReplicaRequest, opts ...grpc.CallOption) (*Replica, error) {
	out := new(Replica)
	err := c.cc.Invoke(ctx, "/mayastor.v1.ReplicaRpc/ResizeReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaRpcServer is the server API for ReplicaRpc service.
// All implementations must embed UnimplementedReplicaRpcServer
// for forward compatibility
type ReplicaRpcServer interface {
	// Replica related methods.
	//
	// Replica allocates space from storage pool.
	CreateReplica(context.Context, *CreateReplicaRequest) (*Replica, error)
	DestroyReplica(context.Context, *DestroyReplicaRequest) (*emptypb.Empty, error)
	ListReplicas(context.Context, *ListReplicaOptions) (*ListReplicasResponse, error)
	ShareReplica(context.Context, *ShareReplicaRequest) (*Replica, error)
	UnshareReplica(context.Context, *UnshareReplicaRequest) (*Replica, error)
	ResizeReplica(context.Context, *ResizeReplicaRequest) (*Replica, error)
	mustEmbedUnimplementedReplicaRpcServer()
}

// UnimplementedReplicaRpcServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaRpcServer struct {
}

func (UnimplementedReplicaRpcServer) CreateReplica(context.Context, *CreateReplicaRequest) (*Replica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplica not implemented")
}
func (UnimplementedReplicaRpcServer) DestroyReplica(context.Context, *DestroyReplicaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyReplica not implemented")
}
func (UnimplementedReplicaRpcServer) ListReplicas(context.Context, *ListReplicaOptions) (*ListReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplicas not implemented")
}
func (UnimplementedReplicaRpcServer) ShareReplica(context.Context, *ShareReplicaRequest) (*Replica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareReplica not implemented")
}
func (UnimplementedReplicaRpcServer) UnshareReplica(context.Context, *UnshareReplicaRequest) (*Replica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareReplica not implemented")
}
func (UnimplementedReplicaRpcServer) ResizeReplica(context.Context, *ResizeReplicaRequest) (*Replica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeReplica not implemented")
}
func (UnimplementedReplicaRpcServer) mustEmbedUnimplementedReplicaRpcServer() {}

// UnsafeReplicaRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaRpcServer will
// result in compilation errors.
type UnsafeReplicaRpcServer interface {
	mustEmbedUnimplementedReplicaRpcServer()
}

func RegisterReplicaRpcServer(s grpc.ServiceRegistrar, srv ReplicaRpcServer) {
	s.RegisterService(&ReplicaRpc_ServiceDesc, srv)
}

func _ReplicaRpc_CreateReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRpcServer).CreateReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.ReplicaRpc/CreateReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRpcServer).CreateReplica(ctx, req.(*CreateReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRpc_DestroyReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRpcServer).DestroyReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.ReplicaRpc/DestroyReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRpcServer).DestroyReplica(ctx, req.(*DestroyReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRpc_ListReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplicaOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRpcServer).ListReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.ReplicaRpc/ListReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRpcServer).ListReplicas(ctx, req.(*ListReplicaOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRpc_ShareReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRpcServer).ShareReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.ReplicaRpc/ShareReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRpcServer).ShareReplica(ctx, req.(*ShareReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRpc_UnshareReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRpcServer).UnshareReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.ReplicaRpc/UnshareReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRpcServer).UnshareReplica(ctx, req.(*UnshareReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRpc_ResizeReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRpcServer).ResizeReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.ReplicaRpc/ResizeReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRpcServer).ResizeReplica(ctx, req.(*ResizeReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicaRpc_ServiceDesc is the grpc.ServiceDesc for ReplicaRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicaRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.v1.ReplicaRpc",
	HandlerType: (*ReplicaRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReplica",
			Handler:    _ReplicaRpc_CreateReplica_Handler,
		},
		{
			MethodName: "DestroyReplica",
			Handler:    _ReplicaRpc_DestroyReplica_Handler,
		},
		{
			MethodName: "ListReplicas",
			Handler:    _ReplicaRpc_ListReplicas_Handler,
		},
		{
			MethodName: "ShareReplica",
			Handler:    _ReplicaRpc_ShareReplica_Handler,
		},
		{
			MethodName: "UnshareReplica",
			Handler:    _ReplicaRpc_UnshareReplica_Handler,
		},
		{
			MethodName: "ResizeReplica",
			Handler:    _ReplicaRpc_ResizeReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replica.proto",
}
