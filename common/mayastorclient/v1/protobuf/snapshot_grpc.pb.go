// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: snapshot.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnapshotRpcClient is the client API for SnapshotRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotRpcClient interface {
	// Common snapshot related methods.
	CreateReplicaSnapshot(ctx context.Context, in *CreateReplicaSnapshotRequest, opts ...grpc.CallOption) (*CreateReplicaSnapshotResponse, error)
	CreateNexusSnapshot(ctx context.Context, in *NexusCreateSnapshotRequest, opts ...grpc.CallOption) (*NexusCreateSnapshotResponse, error)
	ListSnapshot(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	DestroySnapshot(ctx context.Context, in *DestroySnapshotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSnapshotClone(ctx context.Context, in *CreateSnapshotCloneRequest, opts ...grpc.CallOption) (*Replica, error)
	ListSnapshotClone(ctx context.Context, in *ListSnapshotCloneRequest, opts ...grpc.CallOption) (*ListSnapshotCloneResponse, error)
}

type snapshotRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotRpcClient(cc grpc.ClientConnInterface) SnapshotRpcClient {
	return &snapshotRpcClient{cc}
}

func (c *snapshotRpcClient) CreateReplicaSnapshot(ctx context.Context, in *CreateReplicaSnapshotRequest, opts ...grpc.CallOption) (*CreateReplicaSnapshotResponse, error) {
	out := new(CreateReplicaSnapshotResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.SnapshotRpc/CreateReplicaSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotRpcClient) CreateNexusSnapshot(ctx context.Context, in *NexusCreateSnapshotRequest, opts ...grpc.CallOption) (*NexusCreateSnapshotResponse, error) {
	out := new(NexusCreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.SnapshotRpc/CreateNexusSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotRpcClient) ListSnapshot(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.SnapshotRpc/ListSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotRpcClient) DestroySnapshot(ctx context.Context, in *DestroySnapshotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mayastor.v1.SnapshotRpc/DestroySnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotRpcClient) CreateSnapshotClone(ctx context.Context, in *CreateSnapshotCloneRequest, opts ...grpc.CallOption) (*Replica, error) {
	out := new(Replica)
	err := c.cc.Invoke(ctx, "/mayastor.v1.SnapshotRpc/CreateSnapshotClone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotRpcClient) ListSnapshotClone(ctx context.Context, in *ListSnapshotCloneRequest, opts ...grpc.CallOption) (*ListSnapshotCloneResponse, error) {
	out := new(ListSnapshotCloneResponse)
	err := c.cc.Invoke(ctx, "/mayastor.v1.SnapshotRpc/ListSnapshotClone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotRpcServer is the server API for SnapshotRpc service.
// All implementations must embed UnimplementedSnapshotRpcServer
// for forward compatibility
type SnapshotRpcServer interface {
	// Common snapshot related methods.
	CreateReplicaSnapshot(context.Context, *CreateReplicaSnapshotRequest) (*CreateReplicaSnapshotResponse, error)
	CreateNexusSnapshot(context.Context, *NexusCreateSnapshotRequest) (*NexusCreateSnapshotResponse, error)
	ListSnapshot(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	DestroySnapshot(context.Context, *DestroySnapshotRequest) (*emptypb.Empty, error)
	CreateSnapshotClone(context.Context, *CreateSnapshotCloneRequest) (*Replica, error)
	ListSnapshotClone(context.Context, *ListSnapshotCloneRequest) (*ListSnapshotCloneResponse, error)
	mustEmbedUnimplementedSnapshotRpcServer()
}

// UnimplementedSnapshotRpcServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotRpcServer struct {
}

func (UnimplementedSnapshotRpcServer) CreateReplicaSnapshot(context.Context, *CreateReplicaSnapshotRequest) (*CreateReplicaSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplicaSnapshot not implemented")
}
func (UnimplementedSnapshotRpcServer) CreateNexusSnapshot(context.Context, *NexusCreateSnapshotRequest) (*NexusCreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNexusSnapshot not implemented")
}
func (UnimplementedSnapshotRpcServer) ListSnapshot(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshot not implemented")
}
func (UnimplementedSnapshotRpcServer) DestroySnapshot(context.Context, *DestroySnapshotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySnapshot not implemented")
}
func (UnimplementedSnapshotRpcServer) CreateSnapshotClone(context.Context, *CreateSnapshotCloneRequest) (*Replica, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshotClone not implemented")
}
func (UnimplementedSnapshotRpcServer) ListSnapshotClone(context.Context, *ListSnapshotCloneRequest) (*ListSnapshotCloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshotClone not implemented")
}
func (UnimplementedSnapshotRpcServer) mustEmbedUnimplementedSnapshotRpcServer() {}

// UnsafeSnapshotRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotRpcServer will
// result in compilation errors.
type UnsafeSnapshotRpcServer interface {
	mustEmbedUnimplementedSnapshotRpcServer()
}

func RegisterSnapshotRpcServer(s grpc.ServiceRegistrar, srv SnapshotRpcServer) {
	s.RegisterService(&SnapshotRpc_ServiceDesc, srv)
}

func _SnapshotRpc_CreateReplicaSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotRpcServer).CreateReplicaSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.SnapshotRpc/CreateReplicaSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotRpcServer).CreateReplicaSnapshot(ctx, req.(*CreateReplicaSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotRpc_CreateNexusSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NexusCreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotRpcServer).CreateNexusSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.SnapshotRpc/CreateNexusSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotRpcServer).CreateNexusSnapshot(ctx, req.(*NexusCreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotRpc_ListSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotRpcServer).ListSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.SnapshotRpc/ListSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotRpcServer).ListSnapshot(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotRpc_DestroySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotRpcServer).DestroySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.SnapshotRpc/DestroySnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotRpcServer).DestroySnapshot(ctx, req.(*DestroySnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotRpc_CreateSnapshotClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotRpcServer).CreateSnapshotClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.SnapshotRpc/CreateSnapshotClone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotRpcServer).CreateSnapshotClone(ctx, req.(*CreateSnapshotCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotRpc_ListSnapshotClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotRpcServer).ListSnapshotClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.SnapshotRpc/ListSnapshotClone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotRpcServer).ListSnapshotClone(ctx, req.(*ListSnapshotCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotRpc_ServiceDesc is the grpc.ServiceDesc for SnapshotRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.v1.SnapshotRpc",
	HandlerType: (*SnapshotRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReplicaSnapshot",
			Handler:    _SnapshotRpc_CreateReplicaSnapshot_Handler,
		},
		{
			MethodName: "CreateNexusSnapshot",
			Handler:    _SnapshotRpc_CreateNexusSnapshot_Handler,
		},
		{
			MethodName: "ListSnapshot",
			Handler:    _SnapshotRpc_ListSnapshot_Handler,
		},
		{
			MethodName: "DestroySnapshot",
			Handler:    _SnapshotRpc_DestroySnapshot_Handler,
		},
		{
			MethodName: "CreateSnapshotClone",
			Handler:    _SnapshotRpc_CreateSnapshotClone_Handler,
		},
		{
			MethodName: "ListSnapshotClone",
			Handler:    _SnapshotRpc_ListSnapshotClone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snapshot.proto",
}
