// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: test.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WipeOptions_WipeMethod int32

const (
	// Don't actually wipe, just pretend.
	WipeOptions_NONE WipeOptions_WipeMethod = 0
	// Wipe by writing zeroes.
	WipeOptions_WRITE_ZEROES WipeOptions_WipeMethod = 1
	// Wipe by sending unmap/trim.
	WipeOptions_UNMAP WipeOptions_WipeMethod = 2
	// Wipe by writing a given patter (see write_pattern(6) field).
	WipeOptions_WRITE_PATTERN WipeOptions_WipeMethod = 3
	// Checksum the bdev.
	WipeOptions_CHECKSUM WipeOptions_WipeMethod = 4
)

// Enum value maps for WipeOptions_WipeMethod.
var (
	WipeOptions_WipeMethod_name = map[int32]string{
		0: "NONE",
		1: "WRITE_ZEROES",
		2: "UNMAP",
		3: "WRITE_PATTERN",
		4: "CHECKSUM",
	}
	WipeOptions_WipeMethod_value = map[string]int32{
		"NONE":          0,
		"WRITE_ZEROES":  1,
		"UNMAP":         2,
		"WRITE_PATTERN": 3,
		"CHECKSUM":      4,
	}
)

func (x WipeOptions_WipeMethod) Enum() *WipeOptions_WipeMethod {
	p := new(WipeOptions_WipeMethod)
	*p = x
	return p
}

func (x WipeOptions_WipeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WipeOptions_WipeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (WipeOptions_WipeMethod) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x WipeOptions_WipeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WipeOptions_WipeMethod.Descriptor instead.
func (WipeOptions_WipeMethod) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2, 0}
}

type WipeOptions_CheckSumAlgorithm int32

const (
	// The CRC32C is a variant of CRC32.
	WipeOptions_Crc32c WipeOptions_CheckSumAlgorithm = 0
)

// Enum value maps for WipeOptions_CheckSumAlgorithm.
var (
	WipeOptions_CheckSumAlgorithm_name = map[int32]string{
		0: "Crc32c",
	}
	WipeOptions_CheckSumAlgorithm_value = map[string]int32{
		"Crc32c": 0,
	}
)

func (x WipeOptions_CheckSumAlgorithm) Enum() *WipeOptions_CheckSumAlgorithm {
	p := new(WipeOptions_CheckSumAlgorithm)
	*p = x
	return p
}

func (x WipeOptions_CheckSumAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WipeOptions_CheckSumAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[1].Descriptor()
}

func (WipeOptions_CheckSumAlgorithm) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[1]
}

func (x WipeOptions_CheckSumAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WipeOptions_CheckSumAlgorithm.Descriptor instead.
func (WipeOptions_CheckSumAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2, 1}
}

type TestFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Supported wipe methods.
	WipeMethods []WipeOptions_WipeMethod `protobuf:"varint,1,rep,packed,name=wipe_methods,json=wipeMethods,proto3,enum=mayastor.v1.WipeOptions_WipeMethod" json:"wipe_methods,omitempty"`
	// Supported checksum algorithms.
	CksumAlgs []WipeOptions_CheckSumAlgorithm `protobuf:"varint,2,rep,packed,name=cksum_algs,json=cksumAlgs,proto3,enum=mayastor.v1.WipeOptions_CheckSumAlgorithm" json:"cksum_algs,omitempty"`
}

func (x *TestFeatures) Reset() {
	*x = TestFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFeatures) ProtoMessage() {}

func (x *TestFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFeatures.ProtoReflect.Descriptor instead.
func (*TestFeatures) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *TestFeatures) GetWipeMethods() []WipeOptions_WipeMethod {
	if x != nil {
		return x.WipeMethods
	}
	return nil
}

func (x *TestFeatures) GetCksumAlgs() []WipeOptions_CheckSumAlgorithm {
	if x != nil {
		return x.CksumAlgs
	}
	return nil
}

type WipeReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the replica.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are assignable to Pool:
	//
	//	*WipeReplicaRequest_PoolName
	//	*WipeReplicaRequest_PoolUuid
	Pool        isWipeReplicaRequest_Pool `protobuf_oneof:"pool"`
	WipeOptions *StreamWipeOptions        `protobuf:"bytes,4,opt,name=wipe_options,json=wipeOptions,proto3" json:"wipe_options,omitempty"`
}

func (x *WipeReplicaRequest) Reset() {
	*x = WipeReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WipeReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipeReplicaRequest) ProtoMessage() {}

func (x *WipeReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipeReplicaRequest.ProtoReflect.Descriptor instead.
func (*WipeReplicaRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *WipeReplicaRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (m *WipeReplicaRequest) GetPool() isWipeReplicaRequest_Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (x *WipeReplicaRequest) GetPoolName() string {
	if x, ok := x.GetPool().(*WipeReplicaRequest_PoolName); ok {
		return x.PoolName
	}
	return ""
}

func (x *WipeReplicaRequest) GetPoolUuid() string {
	if x, ok := x.GetPool().(*WipeReplicaRequest_PoolUuid); ok {
		return x.PoolUuid
	}
	return ""
}

func (x *WipeReplicaRequest) GetWipeOptions() *StreamWipeOptions {
	if x != nil {
		return x.WipeOptions
	}
	return nil
}

type isWipeReplicaRequest_Pool interface {
	isWipeReplicaRequest_Pool()
}

type WipeReplicaRequest_PoolName struct {
	// Name of the pool where the replica resides.
	PoolName string `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3,oneof"`
}

type WipeReplicaRequest_PoolUuid struct {
	// Optional uuid for the pool where the replica resides.
	PoolUuid string `protobuf:"bytes,3,opt,name=pool_uuid,json=poolUuid,proto3,oneof"`
}

func (*WipeReplicaRequest_PoolName) isWipeReplicaRequest_Pool() {}

func (*WipeReplicaRequest_PoolUuid) isWipeReplicaRequest_Pool() {}

type WipeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Method used to wipe the bdev.
	WipeMethod WipeOptions_WipeMethod `protobuf:"varint,1,opt,name=wipe_method,json=wipeMethod,proto3,enum=mayastor.v1.WipeOptions_WipeMethod" json:"wipe_method,omitempty"`
	// When using WRITE_PATTERN, wipe using this 32bit write pattern
	// Default: 0xDEADBEEF.
	WritePattern *uint32 `protobuf:"varint,2,opt,name=write_pattern,json=writePattern,proto3,oneof" json:"write_pattern,omitempty"`
	// When using CHECKSUM, use the following algorithm.
	CksumAlg WipeOptions_CheckSumAlgorithm `protobuf:"varint,3,opt,name=cksum_alg,json=cksumAlg,proto3,enum=mayastor.v1.WipeOptions_CheckSumAlgorithm" json:"cksum_alg,omitempty"`
}

func (x *WipeOptions) Reset() {
	*x = WipeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WipeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipeOptions) ProtoMessage() {}

func (x *WipeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipeOptions.ProtoReflect.Descriptor instead.
func (*WipeOptions) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

func (x *WipeOptions) GetWipeMethod() WipeOptions_WipeMethod {
	if x != nil {
		return x.WipeMethod
	}
	return WipeOptions_NONE
}

func (x *WipeOptions) GetWritePattern() uint32 {
	if x != nil && x.WritePattern != nil {
		return *x.WritePattern
	}
	return 0
}

func (x *WipeOptions) GetCksumAlg() WipeOptions_CheckSumAlgorithm {
	if x != nil {
		return x.CksumAlg
	}
	return WipeOptions_Crc32c
}

type StreamWipeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *WipeOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// Notify client when every chunk is complete.
	ChunkSize uint64 `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
}

func (x *StreamWipeOptions) Reset() {
	*x = StreamWipeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWipeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWipeOptions) ProtoMessage() {}

func (x *StreamWipeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWipeOptions.ProtoReflect.Descriptor instead.
func (*StreamWipeOptions) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

func (x *StreamWipeOptions) GetOptions() *WipeOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StreamWipeOptions) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// Stream of messages which are sent from the server to the client.
// A message is sent at the beginning, then a message will be sent after
// each chunk sized bytes are wiped.
// In case of successful wipes this brings the total number of messages
// to total_chunks + 1.
type WipeReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the replica.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Total bytes to be wiped.
	TotalBytes uint64 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// Size of a chunk.
	ChunkSize uint64 `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// Size of the last chunk (may differ in case of non multiple of the total size).
	LastChunkSize uint64 `protobuf:"varint,4,opt,name=last_chunk_size,json=lastChunkSize,proto3" json:"last_chunk_size,omitempty"`
	// Number of chunks (how many notifications -1) to be received.
	TotalChunks uint64 `protobuf:"varint,5,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	// How many bytes we've wiped so far (this will be incremented in chunks).
	WipedBytes uint64 `protobuf:"varint,6,opt,name=wiped_bytes,json=wipedBytes,proto3" json:"wiped_bytes,omitempty"`
	// How many chunks we've wiped so far.
	WipedChunks uint64 `protobuf:"varint,7,opt,name=wiped_chunks,json=wipedChunks,proto3" json:"wiped_chunks,omitempty"`
	// Remaining bytes to be wiped.
	RemainingBytes uint64 `protobuf:"varint,8,opt,name=remaining_bytes,json=remainingBytes,proto3" json:"remaining_bytes,omitempty"`
	// Duration since the start of the wipe.
	Since *durationpb.Duration `protobuf:"bytes,9,opt,name=since,proto3" json:"since,omitempty"`
	// When using CHECKSUM, output of the algorithm.
	//
	// Types that are assignable to Checksum:
	//
	//	*WipeReplicaResponse_Crc32
	Checksum isWipeReplicaResponse_Checksum `protobuf_oneof:"checksum"`
}

func (x *WipeReplicaResponse) Reset() {
	*x = WipeReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WipeReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipeReplicaResponse) ProtoMessage() {}

func (x *WipeReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipeReplicaResponse.ProtoReflect.Descriptor instead.
func (*WipeReplicaResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{4}
}

func (x *WipeReplicaResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *WipeReplicaResponse) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *WipeReplicaResponse) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *WipeReplicaResponse) GetLastChunkSize() uint64 {
	if x != nil {
		return x.LastChunkSize
	}
	return 0
}

func (x *WipeReplicaResponse) GetTotalChunks() uint64 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *WipeReplicaResponse) GetWipedBytes() uint64 {
	if x != nil {
		return x.WipedBytes
	}
	return 0
}

func (x *WipeReplicaResponse) GetWipedChunks() uint64 {
	if x != nil {
		return x.WipedChunks
	}
	return 0
}

func (x *WipeReplicaResponse) GetRemainingBytes() uint64 {
	if x != nil {
		return x.RemainingBytes
	}
	return 0
}

func (x *WipeReplicaResponse) GetSince() *durationpb.Duration {
	if x != nil {
		return x.Since
	}
	return nil
}

func (m *WipeReplicaResponse) GetChecksum() isWipeReplicaResponse_Checksum {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (x *WipeReplicaResponse) GetCrc32() uint32 {
	if x, ok := x.GetChecksum().(*WipeReplicaResponse_Crc32); ok {
		return x.Crc32
	}
	return 0
}

type isWipeReplicaResponse_Checksum interface {
	isWipeReplicaResponse_Checksum()
}

type WipeReplicaResponse_Crc32 struct {
	// 32bit CRC.
	Crc32 uint32 `protobuf:"varint,10,opt,name=crc32,proto3,oneof"`
}

func (*WipeReplicaResponse_Crc32) isWipeReplicaResponse_Checksum() {}

type FaultInjection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI that was used to add the fault injection.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Target device name to which the injection applies.
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// True if the injection is currently active (injection active condition
	// has been met).
	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *FaultInjection) Reset() {
	*x = FaultInjection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultInjection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultInjection) ProtoMessage() {}

func (x *FaultInjection) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultInjection.ProtoReflect.Descriptor instead.
func (*FaultInjection) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{5}
}

func (x *FaultInjection) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *FaultInjection) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *FaultInjection) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type AddFaultInjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI that defines injection target and parameters.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *AddFaultInjectionRequest) Reset() {
	*x = AddFaultInjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFaultInjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFaultInjectionRequest) ProtoMessage() {}

func (x *AddFaultInjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFaultInjectionRequest.ProtoReflect.Descriptor instead.
func (*AddFaultInjectionRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{6}
}

func (x *AddFaultInjectionRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type RemoveFaultInjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI that was used to add the fault injection.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *RemoveFaultInjectionRequest) Reset() {
	*x = RemoveFaultInjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFaultInjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFaultInjectionRequest) ProtoMessage() {}

func (x *RemoveFaultInjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFaultInjectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveFaultInjectionRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveFaultInjectionRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type ListFaultInjectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFaultInjectionsRequest) Reset() {
	*x = ListFaultInjectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFaultInjectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFaultInjectionsRequest) ProtoMessage() {}

func (x *ListFaultInjectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFaultInjectionsRequest.ProtoReflect.Descriptor instead.
func (*ListFaultInjectionsRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{8}
}

type ListFaultInjectionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Injections []*FaultInjection `protobuf:"bytes,1,rep,name=injections,proto3" json:"injections,omitempty"`
}

func (x *ListFaultInjectionsReply) Reset() {
	*x = ListFaultInjectionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFaultInjectionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFaultInjectionsReply) ProtoMessage() {}

func (x *ListFaultInjectionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFaultInjectionsReply.ProtoReflect.Descriptor instead.
func (*ListFaultInjectionsReply) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{9}
}

func (x *ListFaultInjectionsReply) GetInjections() []*FaultInjection {
	if x != nil {
		return x.Injections
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61,
	0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x77, 0x69, 0x70, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x70, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0b, 0x77, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x49, 0x0a, 0x0a, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52,
	0x09, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x57,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x69, 0x70, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x69,
	0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x77, 0x69, 0x70, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xcf,
	0x02, 0x0a, 0x0b, 0x57, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x0b, 0x77, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x69,
	0x70, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x77, 0x69, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x08, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x22, 0x54, 0x0a, 0x0a, 0x57, 0x69, 0x70, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x10, 0x04, 0x22, 0x1f, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x63, 0x33, 0x32, 0x63, 0x10, 0x00, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x22, 0x66, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x69, 0x70, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x13, 0x57, 0x69, 0x70,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x69, 0x70, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x69, 0x70, 0x65, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0x60, 0x0a, 0x0e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x2c, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x22, 0x2f, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x57, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0a,
	0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xbe, 0x03, 0x0a, 0x07, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x70, 0x63, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6d,
	0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x57, 0x69, 0x70,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x79, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x54, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e,
	0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x62, 0x73,
	0x2f, 0x6d, 0x61, 0x79, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_test_proto_goTypes = []interface{}{
	(WipeOptions_WipeMethod)(0),         // 0: mayastor.v1.WipeOptions.WipeMethod
	(WipeOptions_CheckSumAlgorithm)(0),  // 1: mayastor.v1.WipeOptions.CheckSumAlgorithm
	(*TestFeatures)(nil),                // 2: mayastor.v1.TestFeatures
	(*WipeReplicaRequest)(nil),          // 3: mayastor.v1.WipeReplicaRequest
	(*WipeOptions)(nil),                 // 4: mayastor.v1.WipeOptions
	(*StreamWipeOptions)(nil),           // 5: mayastor.v1.StreamWipeOptions
	(*WipeReplicaResponse)(nil),         // 6: mayastor.v1.WipeReplicaResponse
	(*FaultInjection)(nil),              // 7: mayastor.v1.FaultInjection
	(*AddFaultInjectionRequest)(nil),    // 8: mayastor.v1.AddFaultInjectionRequest
	(*RemoveFaultInjectionRequest)(nil), // 9: mayastor.v1.RemoveFaultInjectionRequest
	(*ListFaultInjectionsRequest)(nil),  // 10: mayastor.v1.ListFaultInjectionsRequest
	(*ListFaultInjectionsReply)(nil),    // 11: mayastor.v1.ListFaultInjectionsReply
	(*durationpb.Duration)(nil),         // 12: google.protobuf.Duration
	(*emptypb.Empty)(nil),               // 13: google.protobuf.Empty
}
var file_test_proto_depIdxs = []int32{
	0,  // 0: mayastor.v1.TestFeatures.wipe_methods:type_name -> mayastor.v1.WipeOptions.WipeMethod
	1,  // 1: mayastor.v1.TestFeatures.cksum_algs:type_name -> mayastor.v1.WipeOptions.CheckSumAlgorithm
	5,  // 2: mayastor.v1.WipeReplicaRequest.wipe_options:type_name -> mayastor.v1.StreamWipeOptions
	0,  // 3: mayastor.v1.WipeOptions.wipe_method:type_name -> mayastor.v1.WipeOptions.WipeMethod
	1,  // 4: mayastor.v1.WipeOptions.cksum_alg:type_name -> mayastor.v1.WipeOptions.CheckSumAlgorithm
	4,  // 5: mayastor.v1.StreamWipeOptions.options:type_name -> mayastor.v1.WipeOptions
	12, // 6: mayastor.v1.WipeReplicaResponse.since:type_name -> google.protobuf.Duration
	7,  // 7: mayastor.v1.ListFaultInjectionsReply.injections:type_name -> mayastor.v1.FaultInjection
	13, // 8: mayastor.v1.TestRpc.GetFeatures:input_type -> google.protobuf.Empty
	3,  // 9: mayastor.v1.TestRpc.WipeReplica:input_type -> mayastor.v1.WipeReplicaRequest
	8,  // 10: mayastor.v1.TestRpc.AddFaultInjection:input_type -> mayastor.v1.AddFaultInjectionRequest
	9,  // 11: mayastor.v1.TestRpc.RemoveFaultInjection:input_type -> mayastor.v1.RemoveFaultInjectionRequest
	10, // 12: mayastor.v1.TestRpc.ListFaultInjections:input_type -> mayastor.v1.ListFaultInjectionsRequest
	2,  // 13: mayastor.v1.TestRpc.GetFeatures:output_type -> mayastor.v1.TestFeatures
	6,  // 14: mayastor.v1.TestRpc.WipeReplica:output_type -> mayastor.v1.WipeReplicaResponse
	13, // 15: mayastor.v1.TestRpc.AddFaultInjection:output_type -> google.protobuf.Empty
	13, // 16: mayastor.v1.TestRpc.RemoveFaultInjection:output_type -> google.protobuf.Empty
	11, // 17: mayastor.v1.TestRpc.ListFaultInjections:output_type -> mayastor.v1.ListFaultInjectionsReply
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WipeReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WipeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWipeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WipeReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultInjection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFaultInjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFaultInjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFaultInjectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFaultInjectionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WipeReplicaRequest_PoolName)(nil),
		(*WipeReplicaRequest_PoolUuid)(nil),
	}
	file_test_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_test_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WipeReplicaResponse_Crc32)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
