// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestRpcClient is the client API for TestRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestRpcClient interface {
	// Get all the features supported by the test service.
	GetFeatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TestFeatures, error)
	// Replica related methods.
	//
	// Wipe a replica using the selected method.
	// The replica MUST NOT have any user data and must not be currently used
	// by any nexus => this will cause data loss!
	WipeReplica(ctx context.Context, in *WipeReplicaRequest, opts ...grpc.CallOption) (TestRpc_WipeReplicaClient, error)
	// Fault injection methods.
	//
	// Add a fault injection.
	AddFaultInjection(ctx context.Context, in *AddFaultInjectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove a fault injection.
	RemoveFaultInjection(ctx context.Context, in *RemoveFaultInjectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List existing fault injections.
	ListFaultInjections(ctx context.Context, in *ListFaultInjectionsRequest, opts ...grpc.CallOption) (*ListFaultInjectionsReply, error)
}

type testRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTestRpcClient(cc grpc.ClientConnInterface) TestRpcClient {
	return &testRpcClient{cc}
}

func (c *testRpcClient) GetFeatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TestFeatures, error) {
	out := new(TestFeatures)
	err := c.cc.Invoke(ctx, "/mayastor.v1.TestRpc/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testRpcClient) WipeReplica(ctx context.Context, in *WipeReplicaRequest, opts ...grpc.CallOption) (TestRpc_WipeReplicaClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestRpc_ServiceDesc.Streams[0], "/mayastor.v1.TestRpc/WipeReplica", opts...)
	if err != nil {
		return nil, err
	}
	x := &testRpcWipeReplicaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestRpc_WipeReplicaClient interface {
	Recv() (*WipeReplicaResponse, error)
	grpc.ClientStream
}

type testRpcWipeReplicaClient struct {
	grpc.ClientStream
}

func (x *testRpcWipeReplicaClient) Recv() (*WipeReplicaResponse, error) {
	m := new(WipeReplicaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testRpcClient) AddFaultInjection(ctx context.Context, in *AddFaultInjectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mayastor.v1.TestRpc/AddFaultInjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testRpcClient) RemoveFaultInjection(ctx context.Context, in *RemoveFaultInjectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mayastor.v1.TestRpc/RemoveFaultInjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testRpcClient) ListFaultInjections(ctx context.Context, in *ListFaultInjectionsRequest, opts ...grpc.CallOption) (*ListFaultInjectionsReply, error) {
	out := new(ListFaultInjectionsReply)
	err := c.cc.Invoke(ctx, "/mayastor.v1.TestRpc/ListFaultInjections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRpcServer is the server API for TestRpc service.
// All implementations must embed UnimplementedTestRpcServer
// for forward compatibility
type TestRpcServer interface {
	// Get all the features supported by the test service.
	GetFeatures(context.Context, *emptypb.Empty) (*TestFeatures, error)
	// Replica related methods.
	//
	// Wipe a replica using the selected method.
	// The replica MUST NOT have any user data and must not be currently used
	// by any nexus => this will cause data loss!
	WipeReplica(*WipeReplicaRequest, TestRpc_WipeReplicaServer) error
	// Fault injection methods.
	//
	// Add a fault injection.
	AddFaultInjection(context.Context, *AddFaultInjectionRequest) (*emptypb.Empty, error)
	// Remove a fault injection.
	RemoveFaultInjection(context.Context, *RemoveFaultInjectionRequest) (*emptypb.Empty, error)
	// List existing fault injections.
	ListFaultInjections(context.Context, *ListFaultInjectionsRequest) (*ListFaultInjectionsReply, error)
	mustEmbedUnimplementedTestRpcServer()
}

// UnimplementedTestRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTestRpcServer struct {
}

func (UnimplementedTestRpcServer) GetFeatures(context.Context, *emptypb.Empty) (*TestFeatures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedTestRpcServer) WipeReplica(*WipeReplicaRequest, TestRpc_WipeReplicaServer) error {
	return status.Errorf(codes.Unimplemented, "method WipeReplica not implemented")
}
func (UnimplementedTestRpcServer) AddFaultInjection(context.Context, *AddFaultInjectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFaultInjection not implemented")
}
func (UnimplementedTestRpcServer) RemoveFaultInjection(context.Context, *RemoveFaultInjectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFaultInjection not implemented")
}
func (UnimplementedTestRpcServer) ListFaultInjections(context.Context, *ListFaultInjectionsRequest) (*ListFaultInjectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaultInjections not implemented")
}
func (UnimplementedTestRpcServer) mustEmbedUnimplementedTestRpcServer() {}

// UnsafeTestRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestRpcServer will
// result in compilation errors.
type UnsafeTestRpcServer interface {
	mustEmbedUnimplementedTestRpcServer()
}

func RegisterTestRpcServer(s grpc.ServiceRegistrar, srv TestRpcServer) {
	s.RegisterService(&TestRpc_ServiceDesc, srv)
}

func _TestRpc_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.TestRpc/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).GetFeatures(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestRpc_WipeReplica_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WipeReplicaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestRpcServer).WipeReplica(m, &testRpcWipeReplicaServer{stream})
}

type TestRpc_WipeReplicaServer interface {
	Send(*WipeReplicaResponse) error
	grpc.ServerStream
}

type testRpcWipeReplicaServer struct {
	grpc.ServerStream
}

func (x *testRpcWipeReplicaServer) Send(m *WipeReplicaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestRpc_AddFaultInjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFaultInjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).AddFaultInjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.TestRpc/AddFaultInjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).AddFaultInjection(ctx, req.(*AddFaultInjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestRpc_RemoveFaultInjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFaultInjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).RemoveFaultInjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.TestRpc/RemoveFaultInjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).RemoveFaultInjection(ctx, req.(*RemoveFaultInjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestRpc_ListFaultInjections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFaultInjectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).ListFaultInjections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mayastor.v1.TestRpc/ListFaultInjections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).ListFaultInjections(ctx, req.(*ListFaultInjectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestRpc_ServiceDesc is the grpc.ServiceDesc for TestRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mayastor.v1.TestRpc",
	HandlerType: (*TestRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatures",
			Handler:    _TestRpc_GetFeatures_Handler,
		},
		{
			MethodName: "AddFaultInjection",
			Handler:    _TestRpc_AddFaultInjection_Handler,
		},
		{
			MethodName: "RemoveFaultInjection",
			Handler:    _TestRpc_RemoveFaultInjection_Handler,
		},
		{
			MethodName: "ListFaultInjections",
			Handler:    _TestRpc_ListFaultInjections_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WipeReplica",
			Handler:       _TestRpc_WipeReplica_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}
